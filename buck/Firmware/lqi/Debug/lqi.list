
lqi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005900  08005900  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005900  08005900  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000018  0800591c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800591c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011baa  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000212f  00000000  00000000  00031bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00033d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028870  00000000  00000000  00035e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c86a  00000000  00000000  0005e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010288a  00000000  00000000  0006af32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d7bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  0016d838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058a8 	.word	0x080058a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080058a8 	.word	0x080058a8

080001c8 <swap>:
/* USER CODE BEGIN 0 */
//  Begin code from https://www.geeksforgeeks.org/quick-sort/
/* Functions of the quick sort algorithm.
 * Once the values have been sorted the median value is returned */
void swap(int* a, int* b)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	int t = *a;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	60fb      	str	r3, [r7, #12]
    *a = *b;
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	601a      	str	r2, [r3, #0]
    *b = t;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	601a      	str	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	3714      	adds	r7, #20
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr

080001f2 <partition>:

int partition (int arr[], int low, int high)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b088      	sub	sp, #32
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	60f8      	str	r0, [r7, #12]
 80001fa:	60b9      	str	r1, [r7, #8]
 80001fc:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	4413      	add	r3, r2
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	3b01      	subs	r3, #1
 800020e:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	61bb      	str	r3, [r7, #24]
 8000214:	e018      	b.n	8000248 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000216:	69bb      	ldr	r3, [r7, #24]
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	4413      	add	r3, r2
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	429a      	cmp	r2, r3
 8000224:	dd0d      	ble.n	8000242 <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3301      	adds	r3, #1
 800022a:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 800022c:	69fb      	ldr	r3, [r7, #28]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	18d0      	adds	r0, r2, r3
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	4413      	add	r3, r2
 800023c:	4619      	mov	r1, r3
 800023e:	f7ff ffc3 	bl	80001c8 <swap>
    for (int j = low; j <= high- 1; j++)
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	3301      	adds	r3, #1
 8000246:	61bb      	str	r3, [r7, #24]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	69ba      	ldr	r2, [r7, #24]
 800024e:	429a      	cmp	r2, r3
 8000250:	dde1      	ble.n	8000216 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	3301      	adds	r3, #1
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	18d0      	adds	r0, r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	4413      	add	r3, r2
 8000264:	4619      	mov	r1, r3
 8000266:	f7ff ffaf 	bl	80001c8 <swap>
    return (i + 1);
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	3301      	adds	r3, #1
}
 800026e:	4618      	mov	r0, r3
 8000270:	3720      	adds	r7, #32
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	b086      	sub	sp, #24
 800027a:	af00      	add	r7, sp, #0
 800027c:	60f8      	str	r0, [r7, #12]
 800027e:	60b9      	str	r1, [r7, #8]
 8000280:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	da13      	bge.n	80002b2 <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	68f8      	ldr	r0, [r7, #12]
 8000290:	f7ff ffaf 	bl	80001f2 <partition>
 8000294:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	3b01      	subs	r3, #1
 800029a:	461a      	mov	r2, r3
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f7ff ffe9 	bl	8000276 <quickSort>
        quickSort(arr, pi + 1, high);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3301      	adds	r3, #1
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4619      	mov	r1, r3
 80002ac:	68f8      	ldr	r0, [r7, #12]
 80002ae:	f7ff ffe2 	bl	8000276 <quickSort>
    }
}
 80002b2:	bf00      	nop
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <get_median>:

int get_median(int *values){
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 80002c2:	2301      	movs	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	461a      	mov	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ffd1 	bl	8000276 <quickSort>
    return values[SIZE/2];
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68db      	ldr	r3, [r3, #12]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <HAL_TIM_PeriodElapsedCallback>:
// End code from https://www.geeksforgeeks.org/quick-sort/

// Interruption routine 10kHz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80002e4:	b09a      	sub	sp, #104	; 0x68
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	4b8f      	ldr	r3, [pc, #572]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	f040 818f 	bne.w	8000616 <HAL_TIM_PeriodElapsedCallback+0x336>
    {
		// Delay before the controller starts operating
		if(iter < 10000){
 80002f8:	4b8d      	ldr	r3, [pc, #564]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000300:	4293      	cmp	r3, r2
 8000302:	d806      	bhi.n	8000312 <HAL_TIM_PeriodElapsedCallback+0x32>
			iter++;
 8000304:	4b8a      	ldr	r3, [pc, #552]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	b29a      	uxth	r2, r3
 800030c:	4b88      	ldr	r3, [pc, #544]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800030e:	801a      	strh	r2, [r3, #0]
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/13197);
		}
	}
	// End timing
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000310:	e181      	b.n	8000616 <HAL_TIM_PeriodElapsedCallback+0x336>
			for(uint8_t i = 0; i<SIZE; i++){
 8000312:	2300      	movs	r3, #0
 8000314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000318:	e01e      	b.n	8000358 <HAL_TIM_PeriodElapsedCallback+0x78>
				value0[i] = (int)adc_buf0[i];
 800031a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800031e:	4a85      	ldr	r2, [pc, #532]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000320:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000324:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800032e:	440b      	add	r3, r1
 8000330:	f843 2c44 	str.w	r2, [r3, #-68]
				value1[i] = (int)adc_buf1[i];
 8000334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000338:	4a7f      	ldr	r2, [pc, #508]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800033a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800033e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000348:	440b      	add	r3, r1
 800034a:	f843 2c60 	str.w	r2, [r3, #-96]
			for(uint8_t i = 0; i<SIZE; i++){
 800034e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000352:	3301      	adds	r3, #1
 8000354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800035c:	2b06      	cmp	r3, #6
 800035e:	d9dc      	bls.n	800031a <HAL_TIM_PeriodElapsedCallback+0x3a>
			y[0] = get_median(value0);   y[0] *= 1075;  y[0] /= 10000;
 8000360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffa8 	bl	80002ba <get_median>
 800036a:	4602      	mov	r2, r0
 800036c:	4b73      	ldr	r3, [pc, #460]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	4b72      	ldr	r3, [pc, #456]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f240 4233 	movw	r2, #1075	; 0x433
 8000378:	fb02 f303 	mul.w	r3, r2, r3
 800037c:	4a6f      	ldr	r2, [pc, #444]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800037e:	6013      	str	r3, [r2, #0]
 8000380:	4b6e      	ldr	r3, [pc, #440]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a6e      	ldr	r2, [pc, #440]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000386:	fb82 1203 	smull	r1, r2, r2, r3
 800038a:	1312      	asrs	r2, r2, #12
 800038c:	17db      	asrs	r3, r3, #31
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	4a6a      	ldr	r2, [pc, #424]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000392:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 28900; y[1] /= 10000;
 8000394:	f107 0308 	add.w	r3, r7, #8
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff8e 	bl	80002ba <get_median>
 800039e:	4602      	mov	r2, r0
 80003a0:	4b66      	ldr	r3, [pc, #408]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	4b65      	ldr	r3, [pc, #404]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f247 02e4 	movw	r2, #28900	; 0x70e4
 80003ac:	fb02 f303 	mul.w	r3, r2, r3
 80003b0:	4a62      	ldr	r2, [pc, #392]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80003b2:	6053      	str	r3, [r2, #4]
 80003b4:	4b61      	ldr	r3, [pc, #388]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a61      	ldr	r2, [pc, #388]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80003ba:	fb82 1203 	smull	r1, r2, r2, r3
 80003be:	1312      	asrs	r2, r2, #12
 80003c0:	17db      	asrs	r3, r3, #31
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	4a5d      	ldr	r2, [pc, #372]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80003c6:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 80003c8:	4b5e      	ldr	r3, [pc, #376]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	65fb      	str	r3, [r7, #92]	; 0x5c
			int x1_prev = x[1];
 80003ce:	4b5d      	ldr	r3, [pc, #372]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	65bb      	str	r3, [r7, #88]	; 0x58
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 80003d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80003d6:	4a5c      	ldr	r2, [pc, #368]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003d8:	fb02 f203 	mul.w	r2, r2, r3
 80003dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003de:	495b      	ldr	r1, [pc, #364]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003e0:	fb01 f303 	mul.w	r3, r1, r3
 80003e4:	441a      	add	r2, r3
 80003e6:	4b5a      	ldr	r3, [pc, #360]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f643 211e 	movw	r1, #14878	; 0x3a1e
 80003ee:	fb01 f303 	mul.w	r3, r1, r3
 80003f2:	4413      	add	r3, r2
 80003f4:	4a57      	ldr	r2, [pc, #348]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003f6:	6013      	str	r3, [r2, #0]
 80003f8:	4b56      	ldr	r3, [pc, #344]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a56      	ldr	r2, [pc, #344]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80003fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000402:	1352      	asrs	r2, r2, #13
 8000404:	17db      	asrs	r3, r3, #31
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	4a52      	ldr	r2, [pc, #328]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800040a:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 800040c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800040e:	4a53      	ldr	r2, [pc, #332]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000410:	fb02 f203 	mul.w	r2, r2, r3
 8000414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000416:	4952      	ldr	r1, [pc, #328]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000418:	fb01 f303 	mul.w	r3, r1, r3
 800041c:	441a      	add	r2, r3
 800041e:	4b4c      	ldr	r3, [pc, #304]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f244 61a3 	movw	r1, #18083	; 0x46a3
 8000426:	fb01 f303 	mul.w	r3, r1, r3
 800042a:	4413      	add	r3, r2
 800042c:	4a49      	ldr	r2, [pc, #292]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800042e:	6053      	str	r3, [r2, #4]
 8000430:	4b48      	ldr	r3, [pc, #288]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a48      	ldr	r2, [pc, #288]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000436:	fb82 1203 	smull	r1, r2, r2, r3
 800043a:	1352      	asrs	r2, r2, #13
 800043c:	17db      	asrs	r3, r3, #31
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	4a44      	ldr	r2, [pc, #272]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000442:	6053      	str	r3, [r2, #4]
			int alpha = 500;         // Measurement contibution = 50 %, Model contribution = 50 %
 8000444:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000448:	657b      	str	r3, [r7, #84]	; 0x54
			int alpha_bar = 1000-alpha;
 800044a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800044c:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000450:	653b      	str	r3, [r7, #80]	; 0x50
			x[0] = alpha*y[0] + alpha_bar*x_est[0]; x[0] /= 1000;
 8000452:	4b3a      	ldr	r3, [pc, #232]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000458:	fb02 f203 	mul.w	r2, r2, r3
 800045c:	4b3d      	ldr	r3, [pc, #244]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000462:	fb01 f303 	mul.w	r3, r1, r3
 8000466:	4413      	add	r3, r2
 8000468:	4a36      	ldr	r2, [pc, #216]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800046a:	6013      	str	r3, [r2, #0]
 800046c:	4b35      	ldr	r3, [pc, #212]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a3c      	ldr	r2, [pc, #240]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000472:	fb82 1203 	smull	r1, r2, r2, r3
 8000476:	1192      	asrs	r2, r2, #6
 8000478:	17db      	asrs	r3, r3, #31
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	4a31      	ldr	r2, [pc, #196]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800047e:	6013      	str	r3, [r2, #0]
			x[1] = alpha*y[1] + alpha_bar*x_est[1]; x[1] /= 1000;
 8000480:	4b2e      	ldr	r3, [pc, #184]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000486:	fb02 f203 	mul.w	r2, r2, r3
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000490:	fb01 f303 	mul.w	r3, r1, r3
 8000494:	4413      	add	r3, r2
 8000496:	4a2b      	ldr	r2, [pc, #172]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000498:	6053      	str	r3, [r2, #4]
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	4a31      	ldr	r2, [pc, #196]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80004a0:	fb82 1203 	smull	r1, r2, r2, r3
 80004a4:	1192      	asrs	r2, r2, #6
 80004a6:	17db      	asrs	r3, r3, #31
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	4a26      	ldr	r2, [pc, #152]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004ac:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2232      	movs	r2, #50	; 0x32
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	64fb      	str	r3, [r7, #76]	; 0x4c
			int dx1 = x[1] - xs1;
 80004b8:	4b22      	ldr	r3, [pc, #136]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80004c0:	1a9b      	subs	r3, r3, r2
 80004c2:	64bb      	str	r3, [r7, #72]	; 0x48
			u = -K[0]*dx0 - K[1]*dx1;
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	425b      	negs	r3, r3
 80004ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80004cc:	fb02 f203 	mul.w	r2, r2, r3
 80004d0:	4b25      	ldr	r3, [pc, #148]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80004d6:	fb01 f303 	mul.w	r3, r1, r3
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004de:	6013      	str	r3, [r2, #0]
			if(!settled){
 80004e0:	4b22      	ldr	r3, [pc, #136]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	f083 0301 	eor.w	r3, r3, #1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d042      	beq.n	8000574 <HAL_TIM_PeriodElapsedCallback+0x294>
				int diff = x[1]-x1_prev;          // difference between 2 consecutive samples
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004f0:	685a      	ldr	r2, [r3, #4]
 80004f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
				if(diff > -100 && diff < 100){    // If |diff| < 100 mV increment counter
 80004f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004fa:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80004fe:	db10      	blt.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x242>
 8000500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000502:	2b63      	cmp	r3, #99	; 0x63
 8000504:	dc0d      	bgt.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x242>
					settling_iter++;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000510:	701a      	strb	r2, [r3, #0]
					if(settling_iter == 100){     // If counter = 100 system settled
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b64      	cmp	r3, #100	; 0x64
 8000518:	d14f      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x2da>
						settled = true;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
					if(settling_iter == 100){     // If counter = 100 system settled
 8000520:	e04b      	b.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x2da>
					settling_iter = 0;          // If |diff| > 100 mV reset counter
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	e047      	b.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x2da>
 800052a:	bf00      	nop
 800052c:	200000e0 	.word	0x200000e0
 8000530:	20000038 	.word	0x20000038
 8000534:	20000264 	.word	0x20000264
 8000538:	20000120 	.word	0x20000120
 800053c:	20000044 	.word	0x20000044
 8000540:	68db8bad 	.word	0x68db8bad
 8000544:	2000003c 	.word	0x2000003c
 8000548:	00017b70 	.word	0x00017b70
 800054c:	fffffc2e 	.word	0xfffffc2e
 8000550:	20000034 	.word	0x20000034
 8000554:	2000004c 	.word	0x2000004c
 8000558:	14f8b589 	.word	0x14f8b589
 800055c:	0002a483 	.word	0x0002a483
 8000560:	00017b16 	.word	0x00017b16
 8000564:	10624dd3 	.word	0x10624dd3
 8000568:	20000000 	.word	0x20000000
 800056c:	20000060 	.word	0x20000060
 8000570:	20000061 	.word	0x20000061
				int error = 5000-y[1];
 8000574:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800057c:	3308      	adds	r3, #8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
				integral += error;
 8000580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000582:	4619      	mov	r1, r3
 8000584:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800058a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800058e:	eb1b 0301 	adds.w	r3, fp, r1
 8000592:	eb4c 0402 	adc.w	r4, ip, r2
 8000596:	4a23      	ldr	r2, [pc, #140]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000598:	e9c2 3400 	strd	r3, r4, [r2]
				u += 10*integral;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800059e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4613      	mov	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80005b8:	601a      	str	r2, [r3, #0]
			u += us;  u /= 1000;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80005c0:	4413      	add	r3, r2
 80005c2:	4a19      	ldr	r2, [pc, #100]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a19      	ldr	r2, [pc, #100]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80005cc:	fb82 1203 	smull	r1, r2, r2, r3
 80005d0:	1192      	asrs	r2, r2, #6
 80005d2:	17db      	asrs	r3, r3, #31
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80005d8:	6013      	str	r3, [r2, #0]
			int input = u*COUNTER_PERIOD/1000;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4613      	mov	r3, r2
 80005e0:	015b      	lsls	r3, r3, #5
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	01da      	lsls	r2, r3, #7
 80005e6:	4413      	add	r3, r2
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80005ea:	fb82 1203 	smull	r1, r2, r2, r3
 80005ee:	1192      	asrs	r2, r2, #6
 80005f0:	17db      	asrs	r3, r3, #31
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	663b      	str	r3, [r7, #96]	; 0x60
			if(input < 0) input = 0;
 80005f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da01      	bge.n	8000600 <HAL_TIM_PeriodElapsedCallback+0x320>
 80005fc:	2300      	movs	r3, #0
 80005fe:	663b      	str	r3, [r7, #96]	; 0x60
			if(input > COUNTER_PERIOD) input = COUNTER_PERIOD;
 8000600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000602:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000606:	db02      	blt.n	800060e <HAL_TIM_PeriodElapsedCallback+0x32e>
 8000608:	f640 739f 	movw	r3, #3999	; 0xf9f
 800060c:	663b      	str	r3, [r7, #96]	; 0x60
			htim2.Instance->CCR2 = input;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000614:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000616:	bf00      	nop
 8000618:	3768      	adds	r7, #104	; 0x68
 800061a:	46bd      	mov	sp, r7
 800061c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000620:	20000044 	.word	0x20000044
 8000624:	20000058 	.word	0x20000058
 8000628:	20000034 	.word	0x20000034
 800062c:	000527ec 	.word	0x000527ec
 8000630:	10624dd3 	.word	0x10624dd3
 8000634:	200001dc 	.word	0x200001dc

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fd7a 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f83a 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 fa9e 	bl	8000b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000648:	f000 fa76 	bl	8000b38 <MX_DMA_Init>
  MX_ADC1_Init();
 800064c:	f000 f8ba 	bl	80007c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000650:	f000 f932 	bl	80008b8 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000654:	f000 f996 	bl	8000984 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000658:	f000 f9c6 	bl	80009e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800065c:	f000 fa1e 	bl	8000a9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Peripherals intialization
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000660:	2100      	movs	r1, #0
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <main+0x64>)
 8000664:	f002 f845 	bl	80026f2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000668:	2110      	movs	r1, #16
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0x64>)
 800066c:	f002 f841 	bl	80026f2 <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 8000670:	2207      	movs	r2, #7
 8000672:	490b      	ldr	r1, [pc, #44]	; (80006a0 <main+0x68>)
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <main+0x6c>)
 8000676:	f001 f913 	bl	80018a0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 800067a:	2207      	movs	r2, #7
 800067c:	490a      	ldr	r1, [pc, #40]	; (80006a8 <main+0x70>)
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <main+0x74>)
 8000680:	f001 f90e 	bl	80018a0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <main+0x78>)
 8000686:	f004 f845 	bl	8004714 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800068a:	2104      	movs	r1, #4
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <main+0x7c>)
 800068e:	f004 f897 	bl	80047c0 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;  // Initial duty cycle = 0
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <main+0x7c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0x62>
 800069c:	20000068 	.word	0x20000068
 80006a0:	20000264 	.word	0x20000264
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	20000120 	.word	0x20000120
 80006ac:	20000130 	.word	0x20000130
 80006b0:	200000e0 	.word	0x200000e0
 80006b4:	200001dc 	.word	0x200001dc

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0b8      	sub	sp, #224	; 0xe0
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 f8e6 	bl	8005898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2288      	movs	r2, #136	; 0x88
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 f8d8 	bl	8005898 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800070e:	230a      	movs	r3, #10
 8000710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000714:	2307      	movs	r3, #7
 8000716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fd64 	bl	80031f8 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000736:	f000 fa8f 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000758:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800075c:	2104      	movs	r1, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f003 f930 	bl	80039c4 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800076a:	f000 fa75 	bl	8000c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800076e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000772:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000778:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000782:	2308      	movs	r3, #8
 8000784:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000796:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fade 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007a6:	f000 fa57 	bl	8000c58 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ae:	f002 fccd 	bl	800314c <HAL_PWREx_ControlVoltageScaling>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x104>
  {
    Error_Handler();
 80007b8:	f000 fa4e 	bl	8000c58 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	37e0      	adds	r7, #224	; 0xe0
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_ADC1_Init+0xe8>)
 80007e8:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <MX_ADC1_Init+0xec>)
 80007ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f8:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000806:	2204      	movs	r2, #4
 8000808:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <MX_ADC1_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000812:	2201      	movs	r2, #1
 8000814:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000818:	2201      	movs	r2, #1
 800081a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_ADC1_Init+0xe8>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000826:	2201      	movs	r2, #1
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_ADC1_Init+0xe8>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000832:	2200      	movs	r2, #0
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000838:	2201      	movs	r2, #1
 800083a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084c:	4817      	ldr	r0, [pc, #92]	; (80008ac <MX_ADC1_Init+0xe8>)
 800084e:	f000 fed3 	bl	80015f8 <HAL_ADC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000858:	f000 f9fe 	bl	8000c58 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000868:	f001 fd64 	bl	8002334 <HAL_ADCEx_MultiModeConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000872:	f000 f9f1 	bl	8000c58 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0xf0>)
 8000878:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087a:	2306      	movs	r3, #6
 800087c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800087e:	2305      	movs	r3, #5
 8000880:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000882:	237f      	movs	r3, #127	; 0x7f
 8000884:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000886:	2304      	movs	r3, #4
 8000888:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000894:	f001 f8d6 	bl	8001a44 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800089e:	f000 f9db 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000130 	.word	0x20000130
 80008b0:	50040000 	.word	0x50040000
 80008b4:	14f00020 	.word	0x14f00020

080008b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008d0:	4a2a      	ldr	r2, [pc, #168]	; (800097c <MX_ADC2_Init+0xc4>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_ADC2_Init+0xc0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_ADC2_Init+0xc0>)
 8000900:	2201      	movs	r2, #1
 8000902:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_ADC2_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_ADC2_Init+0xc0>)
 800090e:	2201      	movs	r2, #1
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_ADC2_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_ADC2_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_ADC2_Init+0xc0>)
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_ADC2_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_ADC2_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000934:	4810      	ldr	r0, [pc, #64]	; (8000978 <MX_ADC2_Init+0xc0>)
 8000936:	f000 fe5f 	bl	80015f8 <HAL_ADC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f98a 	bl	8000c58 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_ADC2_Init+0xc8>)
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000948:	2306      	movs	r3, #6
 800094a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800094c:	2305      	movs	r3, #5
 800094e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000950:	237f      	movs	r3, #127	; 0x7f
 8000952:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000954:	2304      	movs	r3, #4
 8000956:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_ADC2_Init+0xc0>)
 8000962:	f001 f86f 	bl	8001a44 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800096c:	f000 f974 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000007c 	.word	0x2000007c
 800097c:	50040100 	.word	0x50040100
 8000980:	19200040 	.word	0x19200040

08000984 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2224      	movs	r2, #36	; 0x24
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f004 ff81 	bl	8005898 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_DAC1_Init+0x5c>)
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_DAC1_Init+0x60>)
 800099a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800099c:	4810      	ldr	r0, [pc, #64]	; (80009e0 <MX_DAC1_Init+0x5c>)
 800099e:	f001 fe86 	bl	80026ae <HAL_DAC_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009a8:	f000 f956 	bl	8000c58 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_DAC1_Init+0x5c>)
 80009c8:	f001 fee0 	bl	800278c <HAL_DAC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f941 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000068 	.word	0x20000068
 80009e4:	40007400 	.word	0x40007400

080009e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]
 8000a0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a22:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a36:	f003 fe97 	bl	8004768 <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f000 f90a 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a54:	f004 fe56 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a5e:	f000 f8fb 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a62:	2360      	movs	r3, #96	; 0x60
 8000a64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	2204      	movs	r2, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a7a:	f004 f819 	bl	8004ab0 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a84:	f000 f8e8 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MX_TIM2_Init+0xb0>)
 8000a8a:	f000 fa71 	bl	8000f70 <HAL_TIM_MspPostInit>

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001dc 	.word	0x200001dc

08000a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <MX_TIM3_Init+0x98>)
 8000abe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ac2:	224f      	movs	r2, #79	; 0x4f
 8000ac4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ace:	2263      	movs	r2, #99	; 0x63
 8000ad0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ae0:	f003 fdec 	bl	80046bc <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f8b5 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000afc:	f004 f8f0 	bl	8004ce0 <HAL_TIM_ConfigClockSource>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b06:	f000 f8a7 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000b18:	f004 fdf4 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b22:	f000 f899 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000e0 	.word	0x200000e0
 8000b34:	40000400 	.word	0x40000400

08000b38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_DMA_Init+0x48>)
 8000b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <MX_DMA_Init+0x48>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6493      	str	r3, [r2, #72]	; 0x48
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_DMA_Init+0x48>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	200b      	movs	r0, #11
 8000b5c:	f001 fd71 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b60:	200b      	movs	r0, #11
 8000b62:	f001 fd8a 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	f001 fd69 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b70:	200c      	movs	r0, #12
 8000b72:	f001 fd82 	bl	800267a <HAL_NVIC_EnableIRQ>

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f002 fa7c 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_GPIO_Init+0xcc>)
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000c1e:	f002 f8c7 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f002 f8b7 	bl	8002db0 <HAL_GPIO_Init>

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	10210000 	.word	0x10210000
 8000c54:	48000800 	.word	0x48000800

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_MspInit+0x44>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x44>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a5f      	ldr	r2, [pc, #380]	; (8000e4c <HAL_ADC_MspInit+0x19c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d159      	bne.n	8000d86 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000cd2:	4b5f      	ldr	r3, [pc, #380]	; (8000e50 <HAL_ADC_MspInit+0x1a0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a5d      	ldr	r2, [pc, #372]	; (8000e50 <HAL_ADC_MspInit+0x1a0>)
 8000cda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000cdc:	4b5c      	ldr	r3, [pc, #368]	; (8000e50 <HAL_ADC_MspInit+0x1a0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10b      	bne.n	8000cfc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000ce4:	4b5b      	ldr	r3, [pc, #364]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a5a      	ldr	r2, [pc, #360]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b58      	ldr	r3, [pc, #352]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b55      	ldr	r3, [pc, #340]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d08:	4b52      	ldr	r3, [pc, #328]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d18:	230b      	movs	r3, #11
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f002 f841 	bl	8002db0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d2e:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d30:	4a4a      	ldr	r2, [pc, #296]	; (8000e5c <HAL_ADC_MspInit+0x1ac>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d34:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3a:	4b47      	ldr	r3, [pc, #284]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d40:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d46:	4b44      	ldr	r3, [pc, #272]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d4c:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d54:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d5c:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d5e:	2220      	movs	r2, #32
 8000d60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d68:	483b      	ldr	r0, [pc, #236]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d6a:	f001 fe29 	bl	80029c0 <HAL_DMA_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000d74:	f7ff ff70 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a37      	ldr	r2, [pc, #220]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <HAL_ADC_MspInit+0x1a8>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d84:	e05d      	b.n	8000e42 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <HAL_ADC_MspInit+0x1b0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d158      	bne.n	8000e42 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_ADC_MspInit+0x1a0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a2e      	ldr	r2, [pc, #184]	; (8000e50 <HAL_ADC_MspInit+0x1a0>)
 8000d98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_ADC_MspInit+0x1a0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10b      	bne.n	8000dba <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_ADC_MspInit+0x1a4>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f001 ffe2 	bl	8002db0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_ADC_MspInit+0x1b8>)
 8000df0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e10:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e18:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e28:	f001 fdca 	bl	80029c0 <HAL_DMA_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000e32:	f7ff ff11 	bl	8000c58 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e3c:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <HAL_ADC_MspInit+0x1b4>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e42:	bf00      	nop
 8000e44:	3730      	adds	r7, #48	; 0x30
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	50040000 	.word	0x50040000
 8000e50:	20000064 	.word	0x20000064
 8000e54:	40021000 	.word	0x40021000
 8000e58:	20000194 	.word	0x20000194
 8000e5c:	40020008 	.word	0x40020008
 8000e60:	50040100 	.word	0x50040100
 8000e64:	2000021c 	.word	0x2000021c
 8000e68:	4002001c 	.word	0x4002001c

08000e6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <HAL_DAC_MspInit+0x74>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d124      	bne.n	8000ed8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_DAC_MspInit+0x78>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_DAC_MspInit+0x78>)
 8000e94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e98:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_DAC_MspInit+0x78>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_DAC_MspInit+0x78>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_DAC_MspInit+0x78>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_DAC_MspInit+0x78>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f001 ff6c 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40007400 	.word	0x40007400
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d10b      	bne.n	8000f12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_TIM_PWM_MspInit+0x38>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_TIM_PWM_MspInit+0x38>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6593      	str	r3, [r2, #88]	; 0x58
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_PWM_MspInit+0x38>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d113      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_TIM_Base_MspInit+0x48>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <HAL_TIM_Base_MspInit+0x48>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6593      	str	r3, [r2, #88]	; 0x58
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_TIM_Base_MspInit+0x48>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201d      	movs	r0, #29
 8000f54:	f001 fb75 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f58:	201d      	movs	r0, #29
 8000f5a:	f001 fb8e 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f90:	d11b      	bne.n	8000fca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_TIM_MspPostInit+0x64>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_TIM_MspPostInit+0x64>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_TIM_MspPostInit+0x64>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000faa:	2308      	movs	r3, #8
 8000fac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <HAL_TIM_MspPostInit+0x68>)
 8000fc6:	f001 fef3 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f8da 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <DMA1_Channel1_IRQHandler+0x10>)
 800103e:	f001 fdd7 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000194 	.word	0x20000194

0800104c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA1_Channel2_IRQHandler+0x10>)
 8001052:	f001 fdcd 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000021c 	.word	0x2000021c

08001060 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM3_IRQHandler+0x10>)
 8001066:	f003 fc03 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000e0 	.word	0x200000e0

08001074 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <SystemInit+0x64>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <SystemInit+0x64>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <SystemInit+0x68>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a13      	ldr	r2, [pc, #76]	; (80010dc <SystemInit+0x68>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <SystemInit+0x68>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <SystemInit+0x68>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <SystemInit+0x68>)
 80010a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <SystemInit+0x68>)
 80010ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <SystemInit+0x68>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <SystemInit+0x68>)
 80010b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <SystemInit+0x68>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SystemInit+0x64>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	609a      	str	r2, [r3, #8]
#endif
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	40021000 	.word	0x40021000

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010e6:	e003      	b.n	80010f0 <LoopCopyDataInit>

080010e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010ee:	3104      	adds	r1, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010f8:	d3f6      	bcc.n	80010e8 <CopyDataInit>
	ldr	r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010fc:	e002      	b.n	8001104 <LoopFillZerobss>

080010fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001100:	f842 3b04 	str.w	r3, [r2], #4

08001104 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <LoopForever+0x16>)
	cmp	r2, r3
 8001106:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001108:	d3f9      	bcc.n	80010fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110a:	f7ff ffb3 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f004 fb9f 	bl	8005850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fa91 	bl	8000638 <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800111c:	08005908 	.word	0x08005908
	ldr	r0, =_sdata
 8001120:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001124:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001128:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 800112c:	20000278 	.word	0x20000278

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>
	...

08001134 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_Init+0x3c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_Init+0x3c>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114a:	2003      	movs	r0, #3
 800114c:	f001 fa6e 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001150:	2000      	movs	r0, #0
 8001152:	f000 f80f 	bl	8001174 <HAL_InitTick>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	e001      	b.n	8001166 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001162:	f7ff fd81 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001166:	79fb      	ldrb	r3, [r7, #7]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_InitTick+0x68>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d022      	beq.n	80011ce <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_InitTick+0x6c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_InitTick+0x68>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001194:	fbb1 f3f3 	udiv	r3, r1, r3
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fa7a 	bl	8002696 <HAL_SYSTICK_Config>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10f      	bne.n	80011c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d809      	bhi.n	80011c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	2200      	movs	r2, #0
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	f001 fa44 	bl	8002642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_InitTick+0x70>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e007      	b.n	80011d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e004      	b.n	80011d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e001      	b.n	80011d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000010 	.word	0x20000010
 80011e0:	20000008 	.word	0x20000008
 80011e4:	2000000c 	.word	0x2000000c

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x1c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x20>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a03      	ldr	r2, [pc, #12]	; (8001204 <HAL_IncTick+0x1c>)
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000274 	.word	0x20000274
 8001208:	20000010 	.word	0x20000010

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000274 	.word	0x20000274

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d004      	beq.n	8001248 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_Delay+0x40>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4413      	add	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001248:	bf00      	nop
 800124a:	f7ff ffdf 	bl	800120c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	429a      	cmp	r2, r3
 8001258:	d8f7      	bhi.n	800124a <HAL_Delay+0x26>
  {
  }
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000010 	.word	0x20000010

08001268 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012d0:	b490      	push	{r4, r7}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3360      	adds	r3, #96	; 0x60
 80012e2:	461a      	mov	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80012ec:	6822      	ldr	r2, [r4, #0]
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <LL_ADC_SetOffset+0x40>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	4313      	orrs	r3, r2
 80012fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001302:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bc90      	pop	{r4, r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	03fff000 	.word	0x03fff000

08001314 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001314:	b490      	push	{r4, r7}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3360      	adds	r3, #96	; 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bc90      	pop	{r4, r7}
 800133a:	4770      	bx	lr

0800133c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800133c:	b490      	push	{r4, r7}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3360      	adds	r3, #96	; 0x60
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bc90      	pop	{r4, r7}
 800136a:	4770      	bx	lr

0800136c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001392:	b490      	push	{r4, r7}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3330      	adds	r3, #48	; 0x30
 80013a2:	461a      	mov	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	4413      	add	r3, r2
 80013b0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80013b2:	6822      	ldr	r2, [r4, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	211f      	movs	r1, #31
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	401a      	ands	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	0e9b      	lsrs	r3, r3, #26
 80013c8:	f003 011f 	and.w	r1, r3, #31
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc90      	pop	{r4, r7}
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013e4:	b490      	push	{r4, r7}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3314      	adds	r3, #20
 80013f4:	461a      	mov	r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	0e5b      	lsrs	r3, r3, #25
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	0d1b      	lsrs	r3, r3, #20
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2107      	movs	r1, #7
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	401a      	ands	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0d1b      	lsrs	r3, r3, #20
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bc90      	pop	{r4, r7}
 8001432:	4770      	bx	lr

08001434 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0318 	and.w	r3, r3, #24
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001458:	40d9      	lsrs	r1, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	400b      	ands	r3, r1
 800145e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001462:	431a      	orrs	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	0007ffff 	.word	0x0007ffff

0800147c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 031f 	and.w	r3, r3, #31
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6093      	str	r3, [r2, #8]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001520:	d101      	bne.n	8001526 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <LL_ADC_IsEnabled+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_ADC_IsEnabled+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001592:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001596:	f043 0204 	orr.w	r2, r3, #4
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d101      	bne.n	80015c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d101      	bne.n	80015e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e134      	b.n	800187c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fb45 	bl	8000cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff3f 	bl	80014bc <LL_ADC_IsDeepPowerDownEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff25 	bl	8001498 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff5a 	bl	800150c <LL_ADC_IsInternalRegulatorEnabled>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d113      	bne.n	8001686 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff3e 	bl	80014e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001668:	4b86      	ldr	r3, [pc, #536]	; (8001884 <HAL_ADC_Init+0x28c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	4a86      	ldr	r2, [pc, #536]	; (8001888 <HAL_ADC_Init+0x290>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001678:	e002      	b.n	8001680 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3b01      	subs	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f9      	bne.n	800167a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff3e 	bl	800150c <LL_ADC_IsInternalRegulatorEnabled>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff77 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 80016bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80cf 	bne.w	800186a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 80cb 	bne.w	800186a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016dc:	f043 0202 	orr.w	r2, r3, #2
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff37 	bl	800155c <LL_ADC_IsEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d115      	bne.n	8001720 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f4:	4865      	ldr	r0, [pc, #404]	; (800188c <HAL_ADC_Init+0x294>)
 80016f6:	f7ff ff31 	bl	800155c <LL_ADC_IsEnabled>
 80016fa:	4604      	mov	r4, r0
 80016fc:	4864      	ldr	r0, [pc, #400]	; (8001890 <HAL_ADC_Init+0x298>)
 80016fe:	f7ff ff2d 	bl	800155c <LL_ADC_IsEnabled>
 8001702:	4603      	mov	r3, r0
 8001704:	431c      	orrs	r4, r3
 8001706:	4863      	ldr	r0, [pc, #396]	; (8001894 <HAL_ADC_Init+0x29c>)
 8001708:	f7ff ff28 	bl	800155c <LL_ADC_IsEnabled>
 800170c:	4603      	mov	r3, r0
 800170e:	4323      	orrs	r3, r4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4619      	mov	r1, r3
 800171a:	485f      	ldr	r0, [pc, #380]	; (8001898 <HAL_ADC_Init+0x2a0>)
 800171c:	f7ff fda4 	bl	8001268 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e5b      	ldrb	r3, [r3, #25]
 8001724:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001730:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001736:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d106      	bne.n	800175c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	3b01      	subs	r3, #1
 8001754:	045b      	lsls	r3, r3, #17
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_ADC_Init+0x2a4>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	430b      	orrs	r3, r1
 800178a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff0a 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 8001796:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff17 	bl	80015d0 <LL_ADC_INJ_IsConversionOngoing>
 80017a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d13d      	bne.n	8001826 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d13a      	bne.n	8001826 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017cc:	f023 0302 	bic.w	r3, r3, #2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	69b9      	ldr	r1, [r7, #24]
 80017d6:	430b      	orrs	r3, r1
 80017d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d118      	bne.n	8001816 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017fa:	4311      	orrs	r1, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001800:	4311      	orrs	r1, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001806:	430a      	orrs	r2, r1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	e007      	b.n	8001826 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10c      	bne.n	8001848 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f023 010f 	bic.w	r1, r3, #15
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	1e5a      	subs	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
 8001846:	e007      	b.n	8001858 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 020f 	bic.w	r2, r2, #15
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	f023 0303 	bic.w	r3, r3, #3
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
 8001868:	e007      	b.n	800187a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800187a:	7ffb      	ldrb	r3, [r7, #31]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3724      	adds	r7, #36	; 0x24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}
 8001884:	20000008 	.word	0x20000008
 8001888:	053e2d63 	.word	0x053e2d63
 800188c:	50040000 	.word	0x50040000
 8001890:	50040100 	.word	0x50040100
 8001894:	50040200 	.word	0x50040200
 8001898:	50040300 	.word	0x50040300
 800189c:	fff0c007 	.word	0xfff0c007

080018a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018ac:	4850      	ldr	r0, [pc, #320]	; (80019f0 <HAL_ADC_Start_DMA+0x150>)
 80018ae:	f7ff fde5 	bl	800147c <LL_ADC_GetMultimode>
 80018b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fe76 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 808e 	bne.w	80019e2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_Start_DMA+0x34>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e089      	b.n	80019e8 <HAL_ADC_Start_DMA+0x148>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d002      	beq.n	80018ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b09      	cmp	r3, #9
 80018ec:	d172      	bne.n	80019d4 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fc0c 	bl	800210c <ADC_Enable>
 80018f4:	4603      	mov	r3, r0
 80018f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d165      	bne.n	80019ca <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <HAL_ADC_Start_DMA+0x154>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d002      	beq.n	8001922 <HAL_ADC_Start_DMA+0x82>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e000      	b.n	8001924 <HAL_ADC_Start_DMA+0x84>
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_ADC_Start_DMA+0x158>)
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	4293      	cmp	r3, r2
 800192a:	d002      	beq.n	8001932 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f023 0206 	bic.w	r2, r3, #6
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	659a      	str	r2, [r3, #88]	; 0x58
 8001956:	e002      	b.n	800195e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_ADC_Start_DMA+0x15c>)
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_ADC_Start_DMA+0x160>)
 800196c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <HAL_ADC_Start_DMA+0x164>)
 8001974:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	221c      	movs	r2, #28
 800197c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0210 	orr.w	r2, r2, #16
 8001994:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3340      	adds	r3, #64	; 0x40
 80019b0:	4619      	mov	r1, r3
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f001 f8bb 	bl	8002b30 <HAL_DMA_Start_IT>
 80019ba:	4603      	mov	r3, r0
 80019bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fddd 	bl	8001582 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019c8:	e00d      	b.n	80019e6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80019d2:	e008      	b.n	80019e6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019e0:	e001      	b.n	80019e6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
 80019e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	50040300 	.word	0x50040300
 80019f4:	50040100 	.word	0x50040100
 80019f8:	50040000 	.word	0x50040000
 80019fc:	080021c1 	.word	0x080021c1
 8001a00:	08002299 	.word	0x08002299
 8001a04:	080022b5 	.word	0x080022b5

08001a08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0a6      	sub	sp, #152	; 0x98
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x22>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e348      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x6b4>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd99 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8329 	bne.w	80020d2 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d824      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	3b02      	subs	r3, #2
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d81b      	bhi.n	8001aca <HAL_ADC_ConfigChannel+0x86>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <HAL_ADC_ConfigChannel+0x54>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001ab1 	.word	0x08001ab1
 8001aa0:	08001ab9 	.word	0x08001ab9
 8001aa4:	08001ac1 	.word	0x08001ac1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	220c      	movs	r2, #12
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	e011      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2212      	movs	r2, #18
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	e00d      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2218      	movs	r2, #24
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	e009      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	e004      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2206      	movs	r2, #6
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ad2:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f7ff fc56 	bl	8001392 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd5d 	bl	80015aa <LL_ADC_REG_IsConversionOngoing>
 8001af0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fd69 	bl	80015d0 <LL_ADC_INJ_IsConversionOngoing>
 8001afe:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8148 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 8143 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f7ff fc5e 	bl	80013e4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d00a      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6919      	ldr	r1, [r3, #16]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b5a:	f7ff fbb9 	bl	80012d0 <LL_ADC_SetOffset>
 8001b5e:	e11d      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fbd4 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x148>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fbc9 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	f003 021f 	and.w	r2, r3, #31
 8001b8a:	e012      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x16e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fbbe 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x186>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	e00a      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x19c>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fba5 	bl	800133c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb8b 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x1da>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fb80 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	e010      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1fc>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fb75 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x214>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0e9b      	lsrs	r3, r3, #26
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	e00a      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x22a>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d106      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fb5e 	bl	800133c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2102      	movs	r1, #2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fb44 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x268>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fb39 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 021f 	and.w	r2, r3, #31
 8001caa:	e010      	b.n	8001cce <HAL_ADC_ConfigChannel+0x28a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fb2e 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x2a2>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	e00a      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x2b8>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d106      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2102      	movs	r1, #2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fb17 	bl	800133c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2103      	movs	r1, #3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fafd 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x2f6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2103      	movs	r1, #3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff faf2 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	e010      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x318>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2103      	movs	r1, #3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fae7 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x330>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	e00a      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x346>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2103      	movs	r1, #3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fad0 	bl	800133c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fbdb 	bl	800155c <LL_ADC_IsEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 810c 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f7ff fb3a 	bl	8001434 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4aad      	ldr	r2, [pc, #692]	; (800207c <HAL_ADC_ConfigChannel+0x638>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f040 80fd 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x3b0>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e012      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x3d6>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	bf94      	ite	ls
 8001e14:	2301      	movls	r3, #1
 8001e16:	2300      	movhi	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d064      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x3f6>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	0e9b      	lsrs	r3, r3, #26
 8001e30:	3301      	adds	r3, #1
 8001e32:	069b      	lsls	r3, r3, #26
 8001e34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e38:	e00e      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x414>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	069b      	lsls	r3, r3, #26
 8001e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x434>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	e010      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x456>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	ea42 0103 	orr.w	r1, r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x47c>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f003 021f 	and.w	r2, r3, #31
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	051b      	lsls	r3, r3, #20
 8001ebe:	e011      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x4a0>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	e069      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x4c0>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	3301      	adds	r3, #1
 8001efc:	069b      	lsls	r3, r3, #26
 8001efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f02:	e00e      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x4de>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	61fb      	str	r3, [r7, #28]
  return result;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	069b      	lsls	r3, r3, #26
 8001f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x4fe>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	e010      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x520>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  return result;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	ea42 0103 	orr.w	r1, r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x54c>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	3b1e      	subs	r3, #30
 8001f88:	051b      	lsls	r3, r3, #20
 8001f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	e014      	b.n	8001fba <HAL_ADC_ConfigChannel+0x576>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	60fb      	str	r3, [r7, #12]
  return result;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b1e      	subs	r3, #30
 8001fb4:	051b      	lsls	r3, r3, #20
 8001fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	6892      	ldr	r2, [r2, #8]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7ff fa0f 	bl	80013e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_ADC_ConfigChannel+0x63c>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 808c 	beq.w	80020ec <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd4:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_ADC_ConfigChannel+0x640>)
 8001fd6:	f7ff f96d 	bl	80012b4 <LL_ADC_GetCommonPathInternalCh>
 8001fda:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_ADC_ConfigChannel+0x644>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d12b      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x5fc>
 8001fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d125      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <HAL_ADC_ConfigChannel+0x648>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x5c4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a23      	ldr	r2, [pc, #140]	; (8002090 <HAL_ADC_ConfigChannel+0x64c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d16e      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800200c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002010:	4619      	mov	r1, r3
 8002012:	481c      	ldr	r0, [pc, #112]	; (8002084 <HAL_ADC_ConfigChannel+0x640>)
 8002014:	f7ff f93b 	bl	800128e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_ADC_ConfigChannel+0x650>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_ADC_ConfigChannel+0x654>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099a      	lsrs	r2, r3, #6
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002030:	e002      	b.n	8002038 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3b01      	subs	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f9      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800203e:	e052      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_ADC_ConfigChannel+0x658>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12a      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x65c>
 800204a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800204e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d124      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_ADC_ConfigChannel+0x648>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_ADC_ConfigChannel+0x626>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_ADC_ConfigChannel+0x64c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d13f      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800206a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800206e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002072:	4619      	mov	r1, r3
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <HAL_ADC_ConfigChannel+0x640>)
 8002076:	f7ff f90a 	bl	800128e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800207a:	e036      	b.n	80020ea <HAL_ADC_ConfigChannel+0x6a6>
 800207c:	407f0000 	.word	0x407f0000
 8002080:	80080000 	.word	0x80080000
 8002084:	50040300 	.word	0x50040300
 8002088:	c7520000 	.word	0xc7520000
 800208c:	50040000 	.word	0x50040000
 8002090:	50040200 	.word	0x50040200
 8002094:	20000008 	.word	0x20000008
 8002098:	053e2d63 	.word	0x053e2d63
 800209c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_ADC_ConfigChannel+0x6bc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d120      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11a      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <HAL_ADC_ConfigChannel+0x6c0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d115      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c8:	4619      	mov	r1, r3
 80020ca:	480f      	ldr	r0, [pc, #60]	; (8002108 <HAL_ADC_ConfigChannel+0x6c4>)
 80020cc:	f7ff f8df 	bl	800128e <LL_ADC_SetCommonPathInternalCh>
 80020d0:	e00c      	b.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80020e4:	e002      	b.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020e6:	bf00      	nop
 80020e8:	e000      	b.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3798      	adds	r7, #152	; 0x98
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	80000001 	.word	0x80000001
 8002104:	50040000 	.word	0x50040000
 8002108:	50040300 	.word	0x50040300

0800210c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fa1f 	bl	800155c <LL_ADC_IsEnabled>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d146      	bne.n	80021b2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <ADC_Enable+0xb0>)
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00d      	beq.n	800214e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0210 	orr.w	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e032      	b.n	80021b4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f9ee 	bl	8001534 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002158:	f7ff f858 	bl	800120c <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800215e:	e021      	b.n	80021a4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f9f9 	bl	800155c <LL_ADC_IsEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f9dd 	bl	8001534 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800217a:	f7ff f847 	bl	800120c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d90d      	bls.n	80021a4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	f043 0210 	orr.w	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d1d6      	bne.n	8002160 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	8000003f 	.word	0x8000003f

080021c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d14b      	bne.n	8002272 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f8b7 	bl	800136c <LL_ADC_REG_IsTriggerSourceSWStart>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12b      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d11f      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
 8002236:	e018      	b.n	800226a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d111      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7ff fbcc 	bl	8001a08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002270:	e00e      	b.n	8002290 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff fbd6 	bl	8001a30 <HAL_ADC_ErrorCallback>
}
 8002284:	e004      	b.n	8002290 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff fbb8 	bl	8001a1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f043 0204 	orr.w	r2, r3, #4
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff fba8 	bl	8001a30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <LL_ADC_IsEnabled>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <LL_ADC_IsEnabled+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_IsEnabled+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_IsConversionOngoing>:
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d101      	bne.n	8002326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b09f      	sub	sp, #124	; 0x7c
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e08f      	b.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a47      	ldr	r2, [pc, #284]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d102      	bne.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002364:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	e001      	b.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e072      	b.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ffbd 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 8002394:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ffb7 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d154      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d151      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02c      	beq.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ca:	035b      	lsls	r3, r3, #13
 80023cc:	430b      	orrs	r3, r1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d4:	4829      	ldr	r0, [pc, #164]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80023d6:	f7ff ff87 	bl	80022e8 <LL_ADC_IsEnabled>
 80023da:	4604      	mov	r4, r0
 80023dc:	4828      	ldr	r0, [pc, #160]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80023de:	f7ff ff83 	bl	80022e8 <LL_ADC_IsEnabled>
 80023e2:	4603      	mov	r3, r0
 80023e4:	431c      	orrs	r4, r3
 80023e6:	4828      	ldr	r0, [pc, #160]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023e8:	f7ff ff7e 	bl	80022e8 <LL_ADC_IsEnabled>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4323      	orrs	r3, r4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d137      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023fc:	f023 030f 	bic.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	6811      	ldr	r1, [r2, #0]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	6892      	ldr	r2, [r2, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	431a      	orrs	r2, r3
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002410:	e028      	b.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800241a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800241e:	4817      	ldr	r0, [pc, #92]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002420:	f7ff ff62 	bl	80022e8 <LL_ADC_IsEnabled>
 8002424:	4604      	mov	r4, r0
 8002426:	4816      	ldr	r0, [pc, #88]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002428:	f7ff ff5e 	bl	80022e8 <LL_ADC_IsEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	431c      	orrs	r4, r3
 8002430:	4815      	ldr	r0, [pc, #84]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002432:	f7ff ff59 	bl	80022e8 <LL_ADC_IsEnabled>
 8002436:	4603      	mov	r3, r0
 8002438:	4323      	orrs	r3, r4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d112      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002446:	f023 030f 	bic.w	r3, r3, #15
 800244a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800244c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800244e:	e009      	b.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f043 0220 	orr.w	r2, r3, #32
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002462:	e000      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002464:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800246e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002472:	4618      	mov	r0, r3
 8002474:	377c      	adds	r7, #124	; 0x7c
 8002476:	46bd      	mov	sp, r7
 8002478:	bd90      	pop	{r4, r7, pc}
 800247a:	bf00      	nop
 800247c:	50040000 	.word	0x50040000
 8002480:	50040100 	.word	0x50040100
 8002484:	50040300 	.word	0x50040300
 8002488:	50040200 	.word	0x50040200

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f7ff ff8e 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff29 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002654:	f7ff ff3e 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff ff8e 	bl	8002580 <NVIC_EncodePriority>
 8002664:	4602      	mov	r2, r0
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff5d 	bl	800252c <__NVIC_SetPriority>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff31 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffa2 	bl	80025e8 <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e014      	b.n	80026ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	791b      	ldrb	r3, [r3, #4]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7fe fbcb 	bl	8000e6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	795b      	ldrb	r3, [r3, #5]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_DAC_Start+0x16>
 8002704:	2302      	movs	r3, #2
 8002706:	e03b      	b.n	8002780 <HAL_DAC_Start+0x8e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2201      	movs	r2, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800273c:	2b04      	cmp	r3, #4
 800273e:	d118      	bne.n	8002772 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	e00f      	b.n	8002772 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800275c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002760:	d107      	bne.n	8002772 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0202 	orr.w	r2, r2, #2
 8002770:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	795b      	ldrb	r3, [r3, #5]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_DAC_ConfigChannel+0x1c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e107      	b.n	80029b8 <HAL_DAC_ConfigChannel+0x22c>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2202      	movs	r2, #2
 80027b2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d174      	bne.n	80028a6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d137      	bne.n	8002832 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fd23 	bl	800120c <HAL_GetTick>
 80027c6:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027c8:	e011      	b.n	80027ee <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80027ca:	f7fe fd1f 	bl	800120c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d90a      	bls.n	80027ee <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f043 0208 	orr.w	r2, r3, #8
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2203      	movs	r2, #3
 80027e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0e4      	b.n	80029b8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e6      	bne.n	80027ca <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7fe fd11 	bl	8001224 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	6992      	ldr	r2, [r2, #24]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
 800280c:	e01e      	b.n	800284c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800280e:	f7fe fcfd 	bl	800120c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d90a      	bls.n	8002832 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f043 0208 	orr.w	r2, r3, #8
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2203      	movs	r2, #3
 800282c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0c2      	b.n	80029b8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	2b00      	cmp	r3, #0
 800283a:	dbe8      	blt.n	800280e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800283c:	2001      	movs	r0, #1
 800283e:	f7fe fcf1 	bl	8001224 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	6992      	ldr	r2, [r2, #24]
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	ea02 0103 	and.w	r1, r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	21ff      	movs	r1, #255	; 0xff
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	ea02 0103 	and.w	r1, r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d11d      	bne.n	80028ea <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2207      	movs	r2, #7
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	431a      	orrs	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	400a      	ands	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	22c0      	movs	r2, #192	; 0xc0
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43da      	mvns	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	400a      	ands	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e098      	b.n	8002b04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_DMA_Init+0x150>)
 80029da:	429a      	cmp	r2, r3
 80029dc:	d80f      	bhi.n	80029fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <HAL_DMA_Init+0x154>)
 80029e6:	4413      	add	r3, r2
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_DMA_Init+0x158>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	009a      	lsls	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	; (8002b1c <HAL_DMA_Init+0x15c>)
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
 80029fc:	e00e      	b.n	8002a1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_DMA_Init+0x160>)
 8002a06:	4413      	add	r3, r2
 8002a08:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_DMA_Init+0x158>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a42      	ldr	r2, [pc, #264]	; (8002b24 <HAL_DMA_Init+0x164>)
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a76:	d039      	beq.n	8002aec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_DMA_Init+0x15c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11a      	bne.n	8002ab8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f003 031c 	and.w	r3, r3, #28
 8002a8e:	210f      	movs	r1, #15
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4924      	ldr	r1, [pc, #144]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f003 031c 	and.w	r3, r3, #28
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	491d      	ldr	r1, [pc, #116]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
 8002ab6:	e019      	b.n	8002aec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f003 031c 	and.w	r3, r3, #28
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4917      	ldr	r1, [pc, #92]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 031c 	and.w	r3, r3, #28
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	4911      	ldr	r1, [pc, #68]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40020407 	.word	0x40020407
 8002b14:	bffdfff8 	.word	0xbffdfff8
 8002b18:	cccccccd 	.word	0xcccccccd
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	bffdfbf8 	.word	0xbffdfbf8
 8002b24:	40020400 	.word	0x40020400
 8002b28:	400200a8 	.word	0x400200a8
 8002b2c:	400204a8 	.word	0x400204a8

08002b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Start_IT+0x20>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e04b      	b.n	8002be8 <HAL_DMA_Start_IT+0xb8>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d13a      	bne.n	8002bda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f8e0 	bl	8002d4e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 020e 	orr.w	r2, r2, #14
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0204 	bic.w	r2, r2, #4
 8002bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 020a 	orr.w	r2, r2, #10
 8002bc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e005      	b.n	8002be6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
 8002be4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f003 031c 	and.w	r3, r3, #28
 8002c10:	2204      	movs	r2, #4
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d026      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x7a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d021      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f003 021c 	and.w	r2, r3, #28
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2104      	movs	r1, #4
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d071      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	e06c      	b.n	8002d44 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 031c 	and.w	r3, r3, #28
 8002c72:	2202      	movs	r2, #2
 8002c74:	409a      	lsls	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02e      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xec>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d029      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020a 	bic.w	r2, r2, #10
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f003 021c 	and.w	r2, r3, #28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2102      	movs	r1, #2
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d038      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cda:	e033      	b.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	f003 031c 	and.w	r3, r3, #28
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d02a      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d025      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 020e 	bic.w	r2, r2, #14
 8002d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f003 021c 	and.w	r2, r3, #28
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
}
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f003 021c 	and.w	r2, r3, #28
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d108      	bne.n	8002d92 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d90:	e007      	b.n	8002da2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	e17f      	b.n	80030c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8171 	beq.w	80030ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d00b      	beq.n	8002df8 <HAL_GPIO_Init+0x48>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d007      	beq.n	8002df8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dec:	2b11      	cmp	r3, #17
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b12      	cmp	r3, #18
 8002df6:	d130      	bne.n	8002e5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e2e:	2201      	movs	r2, #1
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 0201 	and.w	r2, r3, #1
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d118      	bne.n	8002e98 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	08db      	lsrs	r3, r3, #3
 8002e82:	f003 0201 	and.w	r2, r3, #1
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x128>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b12      	cmp	r3, #18
 8002ed6:	d123      	bne.n	8002f20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	6939      	ldr	r1, [r7, #16]
 8002f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80ac 	beq.w	80030ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f62:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_GPIO_Init+0x32c>)
 8002f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f66:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_GPIO_Init+0x32c>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_GPIO_Init+0x32c>)
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f7a:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <HAL_GPIO_Init+0x330>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fa4:	d025      	beq.n	8002ff2 <HAL_GPIO_Init+0x242>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4e      	ldr	r2, [pc, #312]	; (80030e4 <HAL_GPIO_Init+0x334>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01f      	beq.n	8002fee <HAL_GPIO_Init+0x23e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4d      	ldr	r2, [pc, #308]	; (80030e8 <HAL_GPIO_Init+0x338>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d019      	beq.n	8002fea <HAL_GPIO_Init+0x23a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_GPIO_Init+0x33c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0x236>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a4b      	ldr	r2, [pc, #300]	; (80030f0 <HAL_GPIO_Init+0x340>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_GPIO_Init+0x232>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <HAL_GPIO_Init+0x344>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <HAL_GPIO_Init+0x22e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a49      	ldr	r2, [pc, #292]	; (80030f8 <HAL_GPIO_Init+0x348>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_GPIO_Init+0x22a>
 8002fd6:	2306      	movs	r3, #6
 8002fd8:	e00c      	b.n	8002ff4 <HAL_GPIO_Init+0x244>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e00a      	b.n	8002ff4 <HAL_GPIO_Init+0x244>
 8002fde:	2305      	movs	r3, #5
 8002fe0:	e008      	b.n	8002ff4 <HAL_GPIO_Init+0x244>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x244>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e004      	b.n	8002ff4 <HAL_GPIO_Init+0x244>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_Init+0x244>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_Init+0x244>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	f002 0203 	and.w	r2, r2, #3
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	4093      	lsls	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003004:	4936      	ldr	r1, [pc, #216]	; (80030e0 <HAL_GPIO_Init+0x330>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_GPIO_Init+0x34c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003036:	4a31      	ldr	r2, [pc, #196]	; (80030fc <HAL_GPIO_Init+0x34c>)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800303c:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_GPIO_Init+0x34c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	43db      	mvns	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003060:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_GPIO_Init+0x34c>)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_GPIO_Init+0x34c>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_GPIO_Init+0x34c>)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_GPIO_Init+0x34c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030b4:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_GPIO_Init+0x34c>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f47f ae78 	bne.w	8002dc0 <HAL_GPIO_Init+0x10>
  }
}
 80030d0:	bf00      	nop
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40010000 	.word	0x40010000
 80030e4:	48000400 	.word	0x48000400
 80030e8:	48000800 	.word	0x48000800
 80030ec:	48000c00 	.word	0x48000c00
 80030f0:	48001000 	.word	0x48001000
 80030f4:	48001400 	.word	0x48001400
 80030f8:	48001800 	.word	0x48001800
 80030fc:	40010400 	.word	0x40010400

08003100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
 800310c:	4613      	mov	r3, r2
 800310e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003110:	787b      	ldrb	r3, [r7, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800311c:	e002      	b.n	8003124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <HAL_PWREx_GetVoltageRange+0x18>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40007000 	.word	0x40007000

0800314c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315a:	d130      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800315c:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003168:	d038      	beq.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003172:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2232      	movs	r2, #50	; 0x32
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	3301      	adds	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003190:	e002      	b.n	8003198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3b01      	subs	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a4:	d102      	bne.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f2      	bne.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b8:	d110      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e00f      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ca:	d007      	beq.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d4:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40007000 	.word	0x40007000
 80031f0:	20000008 	.word	0x20000008
 80031f4:	431bde83 	.word	0x431bde83

080031f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e3d4      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320a:	4ba1      	ldr	r3, [pc, #644]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003214:	4b9e      	ldr	r3, [pc, #632]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80e4 	beq.w	80033f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_RCC_OscConfig+0x4a>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b0c      	cmp	r3, #12
 8003236:	f040 808b 	bne.w	8003350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 8087 	bne.w	8003350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003242:	4b93      	ldr	r3, [pc, #588]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x62>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e3ac      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	4b8c      	ldr	r3, [pc, #560]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <HAL_RCC_OscConfig+0x7c>
 800326a:	4b89      	ldr	r3, [pc, #548]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003272:	e005      	b.n	8003280 <HAL_RCC_OscConfig+0x88>
 8003274:	4b86      	ldr	r3, [pc, #536]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003280:	4293      	cmp	r3, r2
 8003282:	d223      	bcs.n	80032cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fd07 	bl	8003c9c <RCC_SetFlashLatencyFromMSIRange>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e38d      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003298:	4b7d      	ldr	r3, [pc, #500]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a7c      	ldr	r2, [pc, #496]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800329e:	f043 0308 	orr.w	r3, r3, #8
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b7a      	ldr	r3, [pc, #488]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4977      	ldr	r1, [pc, #476]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b6:	4b76      	ldr	r3, [pc, #472]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	4972      	ldr	r1, [pc, #456]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
 80032ca:	e025      	b.n	8003318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032cc:	4b70      	ldr	r3, [pc, #448]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6f      	ldr	r2, [pc, #444]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032d2:	f043 0308 	orr.w	r3, r3, #8
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	496a      	ldr	r1, [pc, #424]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ea:	4b69      	ldr	r3, [pc, #420]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	4965      	ldr	r1, [pc, #404]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fcc7 	bl	8003c9c <RCC_SetFlashLatencyFromMSIRange>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e34d      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003318:	f000 fc36 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 800331c:	4601      	mov	r1, r0
 800331e:	4b5c      	ldr	r3, [pc, #368]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	4a5a      	ldr	r2, [pc, #360]	; (8003494 <HAL_RCC_OscConfig+0x29c>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	fa21 f303 	lsr.w	r3, r1, r3
 8003334:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_RCC_OscConfig+0x2a0>)
 8003336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003338:	4b58      	ldr	r3, [pc, #352]	; (800349c <HAL_RCC_OscConfig+0x2a4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd ff19 	bl	8001174 <HAL_InitTick>
 8003342:	4603      	mov	r3, r0
 8003344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d052      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	e331      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d032      	beq.n	80033be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003364:	f7fd ff52 	bl	800120c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800336c:	f7fd ff4e 	bl	800120c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e31a      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800337e:	4b44      	ldr	r3, [pc, #272]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a40      	ldr	r2, [pc, #256]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	493b      	ldr	r1, [pc, #236]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a8:	4b39      	ldr	r3, [pc, #228]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	4936      	ldr	r1, [pc, #216]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	e01a      	b.n	80033f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033be:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a33      	ldr	r2, [pc, #204]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ca:	f7fd ff1f 	bl	800120c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d2:	f7fd ff1b 	bl	800120c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e2e7      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033e4:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x1da>
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d074      	beq.n	80034ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b08      	cmp	r3, #8
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x21a>
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	d10e      	bne.n	800342a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d10b      	bne.n	800342a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d064      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d160      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e2c4      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x24a>
 8003434:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800343a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e01d      	b.n	800347e <HAL_RCC_OscConfig+0x286>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x26e>
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800345e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x286>
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 800346c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a06      	ldr	r2, [pc, #24]	; (8003490 <HAL_RCC_OscConfig+0x298>)
 8003478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd fec1 	bl	800120c <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348c:	e011      	b.n	80034b2 <HAL_RCC_OscConfig+0x2ba>
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	080058c0 	.word	0x080058c0
 8003498:	20000008 	.word	0x20000008
 800349c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fd feb4 	bl	800120c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e280      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b2:	4baf      	ldr	r3, [pc, #700]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x2a8>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fd fea4 	bl	800120c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fd fea0 	bl	800120c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e26c      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034da:	4ba5      	ldr	r3, [pc, #660]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2d0>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d060      	beq.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_OscConfig+0x310>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d119      	bne.n	8003536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d116      	bne.n	8003536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003508:	4b99      	ldr	r3, [pc, #612]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_OscConfig+0x328>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e249      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b93      	ldr	r3, [pc, #588]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	4990      	ldr	r1, [pc, #576]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003534:	e040      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d023      	beq.n	8003586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353e:	4b8c      	ldr	r3, [pc, #560]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a8b      	ldr	r2, [pc, #556]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fd fe5f 	bl	800120c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7fd fe5b 	bl	800120c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e227      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003564:	4b82      	ldr	r3, [pc, #520]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b7f      	ldr	r3, [pc, #508]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	497c      	ldr	r1, [pc, #496]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	e018      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b7a      	ldr	r3, [pc, #488]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a79      	ldr	r2, [pc, #484]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800358c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fd fe3b 	bl	800120c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359a:	f7fd fe37 	bl	800120c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e203      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ac:	4b70      	ldr	r3, [pc, #448]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03c      	beq.n	800363e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01c      	beq.n	8003606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035cc:	4b68      	ldr	r3, [pc, #416]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d2:	4a67      	ldr	r2, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fd fe16 	bl	800120c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fd fe12 	bl	800120c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1de      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035f6:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <HAL_RCC_OscConfig+0x3ec>
 8003604:	e01b      	b.n	800363e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003606:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360c:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fd fdf9 	bl	800120c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361e:	f7fd fdf5 	bl	800120c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1c1      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003630:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ef      	bne.n	800361e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80a6 	beq.w	8003798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003650:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	4a43      	ldr	r2, [pc, #268]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	6593      	str	r3, [r2, #88]	; 0x58
 8003668:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003674:	2301      	movs	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d118      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003684:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a3a      	ldr	r2, [pc, #232]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003690:	f7fd fdbc 	bl	800120c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fd fdb8 	bl	800120c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e184      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036aa:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <HAL_RCC_OscConfig+0x4d8>
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ce:	e024      	b.n	800371a <HAL_RCC_OscConfig+0x522>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d110      	bne.n	80036fa <HAL_RCC_OscConfig+0x502>
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	4a24      	ldr	r2, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036f8:	e00f      	b.n	800371a <HAL_RCC_OscConfig+0x522>
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fd fd73 	bl	800120c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd fd6f 	bl	800120c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e139      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ed      	beq.n	800372a <HAL_RCC_OscConfig+0x532>
 800374e:	e01a      	b.n	8003786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fd5c 	bl	800120c <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003756:	e00f      	b.n	8003778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fd fd58 	bl	800120c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d906      	bls.n	8003778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e122      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003778:	4b90      	ldr	r3, [pc, #576]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e8      	bne.n	8003758 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003786:	7ffb      	ldrb	r3, [r7, #31]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b8b      	ldr	r3, [pc, #556]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	4a8a      	ldr	r2, [pc, #552]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8108 	beq.w	80039b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	f040 80d0 	bne.w	800394c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037ac:	4b83      	ldr	r3, [pc, #524]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0203 	and.w	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d130      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	3b01      	subs	r3, #1
 80037cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d127      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d11f      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037ec:	2a07      	cmp	r2, #7
 80037ee:	bf14      	ite	ne
 80037f0:	2201      	movne	r2, #1
 80037f2:	2200      	moveq	r2, #0
 80037f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d113      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d109      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d06e      	beq.n	8003900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d069      	beq.n	80038fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003828:	4b64      	ldr	r3, [pc, #400]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003834:	4b61      	ldr	r3, [pc, #388]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b7      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003844:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5c      	ldr	r2, [pc, #368]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800384a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003850:	f7fd fcdc 	bl	800120c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fcd8 	bl	800120c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0a4      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003876:	4b51      	ldr	r3, [pc, #324]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	4b51      	ldr	r3, [pc, #324]	; (80039c0 <HAL_RCC_OscConfig+0x7c8>)
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003886:	3a01      	subs	r2, #1
 8003888:	0112      	lsls	r2, r2, #4
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003890:	0212      	lsls	r2, r2, #8
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003898:	0852      	lsrs	r2, r2, #1
 800389a:	3a01      	subs	r2, #1
 800389c:	0552      	lsls	r2, r2, #21
 800389e:	4311      	orrs	r1, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038a4:	0852      	lsrs	r2, r2, #1
 80038a6:	3a01      	subs	r2, #1
 80038a8:	0652      	lsls	r2, r2, #25
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b0:	0912      	lsrs	r2, r2, #4
 80038b2:	0452      	lsls	r2, r2, #17
 80038b4:	430a      	orrs	r2, r1
 80038b6:	4941      	ldr	r1, [pc, #260]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038bc:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a3e      	ldr	r2, [pc, #248]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c8:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a3b      	ldr	r2, [pc, #236]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80038ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d4:	f7fd fc9a 	bl	800120c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fc96 	bl	800120c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e062      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ee:	4b33      	ldr	r3, [pc, #204]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038fa:	e05a      	b.n	80039b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e059      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003900:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d152      	bne.n	80039b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003918:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800391e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003924:	f7fd fc72 	bl	800120c <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd fc6e 	bl	800120c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e03a      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393e:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x734>
 800394a:	e032      	b.n	80039b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d02d      	beq.n	80039ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003970:	f023 0303 	bic.w	r3, r3, #3
 8003974:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a10      	ldr	r2, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 800397c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003984:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fc41 	bl	800120c <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd fc3d 	bl	800120c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e009      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_RCC_OscConfig+0x7c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x796>
 80039ac:	e001      	b.n	80039b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	f99d808c 	.word	0xf99d808c

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0c8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d910      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 0207 	bic.w	r2, r3, #7
 80039ee:	4961      	ldr	r1, [pc, #388]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b0      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d04c      	beq.n	8003aae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1c:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d121      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e09e      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d115      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e092      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e086      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5c:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e07e      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 0203 	bic.w	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	493f      	ldr	r1, [pc, #252]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7e:	f7fd fbc5 	bl	800120c <HAL_GetTick>
 8003a82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a86:	f7fd fbc1 	bl	800120c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e066      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 020c 	and.w	r2, r3, #12
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d1eb      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aba:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	492c      	ldr	r1, [pc, #176]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d210      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 0207 	bic.w	r2, r3, #7
 8003ae2:	4924      	ldr	r1, [pc, #144]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_RCC_ClockConfig+0x1b0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e036      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4918      	ldr	r1, [pc, #96]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4910      	ldr	r1, [pc, #64]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3a:	f000 f825 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4601      	mov	r1, r0
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_ClockConfig+0x1b4>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	5cd3      	ldrb	r3, [r2, r3]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	fa21 f303 	lsr.w	r3, r1, r3
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fb08 	bl	8001174 <HAL_InitTick>
 8003b64:	4603      	mov	r3, r0
 8003b66:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b68:	7afb      	ldrb	r3, [r7, #11]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	080058c0 	.word	0x080058c0
 8003b80:	20000008 	.word	0x20000008
 8003b84:	2000000c 	.word	0x2000000c

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b96:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x34>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d121      	bne.n	8003bfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d11e      	bne.n	8003bfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bbc:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	e005      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bd8:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10d      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	e004      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c0c:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d133      	bne.n	8003c7e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d002      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0xa4>
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0xaa>
 8003c2a:	e005      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c2e:	617b      	str	r3, [r7, #20]
      break;
 8003c30:	e005      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c34:	617b      	str	r3, [r7, #20]
      break;
 8003c36:	e002      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	617b      	str	r3, [r7, #20]
      break;
 8003c3c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	3301      	adds	r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	fb02 f203 	mul.w	r2, r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0e5b      	lsrs	r3, r3, #25
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3724      	adds	r7, #36	; 0x24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	080058d0 	.word	0x080058d0
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	007a1200 	.word	0x007a1200

08003c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cb4:	f7ff fa3c 	bl	8003130 <HAL_PWREx_GetVoltageRange>
 8003cb8:	6178      	str	r0, [r7, #20]
 8003cba:	e014      	b.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc8:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cd4:	f7ff fa2c 	bl	8003130 <HAL_PWREx_GetVoltageRange>
 8003cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cec:	d10b      	bne.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d919      	bls.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8003cf8:	d902      	bls.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e013      	b.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d00:	2301      	movs	r3, #1
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e010      	b.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d902      	bls.n	8003d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	e00a      	b.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b80      	cmp	r3, #128	; 0x80
 8003d16:	d102      	bne.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d18:	2302      	movs	r3, #2
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e004      	b.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b70      	cmp	r3, #112	; 0x70
 8003d22:	d101      	bne.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d24:	2301      	movs	r3, #1
 8003d26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 0207 	bic.w	r2, r3, #7
 8003d30:	4909      	ldr	r1, [pc, #36]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d001      	beq.n	8003d4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40022000 	.word	0x40022000

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d64:	2300      	movs	r3, #0
 8003d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d68:	2300      	movs	r3, #0
 8003d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03f      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d80:	d01c      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d86:	d802      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d8c:	e01f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003d94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d98:	d01c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003d9a:	e018      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d9c:	4b85      	ldr	r3, [pc, #532]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4a84      	ldr	r2, [pc, #528]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da8:	e015      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2100      	movs	r1, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fab9 	bl	8004328 <RCCEx_PLLSAI1_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dba:	e00c      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3320      	adds	r3, #32
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fba0 	bl	8004508 <RCCEx_PLLSAI2_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dcc:	e003      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	74fb      	strb	r3, [r7, #19]
      break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ddc:	4b75      	ldr	r3, [pc, #468]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dea:	4972      	ldr	r1, [pc, #456]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03f      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e0c:	d01c      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e12:	d802      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00e      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003e18:	e01f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003e20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e24:	d01c      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003e26:	e018      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e28:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a61      	ldr	r2, [pc, #388]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e34:	e015      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fa73 	bl	8004328 <RCCEx_PLLSAI1_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e46:	e00c      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3320      	adds	r3, #32
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb5a 	bl	8004508 <RCCEx_PLLSAI2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e58:	e003      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10b      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e68:	4b52      	ldr	r3, [pc, #328]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e76:	494f      	ldr	r1, [pc, #316]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e7e:	e001      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a0 	beq.w	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eac:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	4a40      	ldr	r2, [pc, #256]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb8:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3a      	ldr	r2, [pc, #232]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed4:	f7fd f99a 	bl	800120c <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eda:	e009      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003edc:	f7fd f996 	bl	800120c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d902      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	74fb      	strb	r3, [r7, #19]
        break;
 8003eee:	e005      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ef      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d15c      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f02:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01f      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d019      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f20:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f2c:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fd f955 	bl	800120c <HAL_GetTick>
 8003f62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f64:	e00b      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f7fd f951 	bl	800120c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d902      	bls.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f7c:	e006      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ec      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10c      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa2:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003faa:	e009      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	74bb      	strb	r3, [r7, #18]
 8003fb0:	e006      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc0:	7c7b      	ldrb	r3, [r7, #17]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4b9e      	ldr	r3, [pc, #632]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	4a9d      	ldr	r2, [pc, #628]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fde:	4b98      	ldr	r3, [pc, #608]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f023 0203 	bic.w	r2, r3, #3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	4994      	ldr	r1, [pc, #592]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004000:	4b8f      	ldr	r3, [pc, #572]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	f023 020c 	bic.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	498c      	ldr	r1, [pc, #560]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004022:	4b87      	ldr	r3, [pc, #540]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	4983      	ldr	r1, [pc, #524]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004044:	4b7e      	ldr	r3, [pc, #504]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	497b      	ldr	r1, [pc, #492]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004066:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	4972      	ldr	r1, [pc, #456]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004088:	4b6d      	ldr	r3, [pc, #436]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	496a      	ldr	r1, [pc, #424]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040aa:	4b65      	ldr	r3, [pc, #404]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	4961      	ldr	r1, [pc, #388]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040cc:	4b5c      	ldr	r3, [pc, #368]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	4959      	ldr	r1, [pc, #356]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ee:	4b54      	ldr	r3, [pc, #336]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	4950      	ldr	r1, [pc, #320]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004110:	4b4b      	ldr	r3, [pc, #300]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	4948      	ldr	r1, [pc, #288]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004132:	4b43      	ldr	r3, [pc, #268]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	493f      	ldr	r1, [pc, #252]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d028      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004154:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004162:	4937      	ldr	r1, [pc, #220]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004172:	d106      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b32      	ldr	r3, [pc, #200]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a31      	ldr	r2, [pc, #196]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
 8004180:	e011      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004186:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418a:	d10c      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f8c8 	bl	8004328 <RCCEx_PLLSAI1_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d028      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	491f      	ldr	r1, [pc, #124]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d0:	d106      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a1a      	ldr	r2, [pc, #104]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041dc:	60d3      	str	r3, [r2, #12]
 80041de:	e011      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f899 	bl	8004328 <RCCEx_PLLSAI1_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02b      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421e:	4908      	ldr	r1, [pc, #32]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800422e:	d109      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a02      	ldr	r2, [pc, #8]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423a:	60d3      	str	r3, [r2, #12]
 800423c:	e014      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800424c:	d10c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	2101      	movs	r1, #1
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f867 	bl	8004328 <RCCEx_PLLSAI1_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004274:	4b2b      	ldr	r3, [pc, #172]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004282:	4928      	ldr	r1, [pc, #160]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004292:	d10d      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f844 	bl	8004328 <RCCEx_PLLSAI1_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d014      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	74bb      	strb	r3, [r7, #18]
 80042ae:	e011      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3320      	adds	r3, #32
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f921 	bl	8004508 <RCCEx_PLLSAI2_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ee:	490d      	ldr	r1, [pc, #52]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004312:	4904      	ldr	r1, [pc, #16]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800431a:	7cbb      	ldrb	r3, [r7, #18]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000

08004328 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004336:	4b73      	ldr	r3, [pc, #460]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d018      	beq.n	8004374 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004342:	4b70      	ldr	r3, [pc, #448]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0203 	and.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d10d      	bne.n	800436e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
       ||
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800435a:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
       ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d044      	beq.n	80043f8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e041      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d00c      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0x6e>
 800437c:	2b03      	cmp	r3, #3
 800437e:	d013      	beq.n	80043a8 <RCCEx_PLLSAI1_Config+0x80>
 8004380:	2b01      	cmp	r3, #1
 8004382:	d120      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004384:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11d      	bne.n	80043cc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004394:	e01a      	b.n	80043cc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004396:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d116      	bne.n	80043d0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a6:	e013      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043a8:	4b56      	ldr	r3, [pc, #344]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10f      	bne.n	80043d4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043c4:	e006      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      break;
 80043ca:	e004      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043cc:	bf00      	nop
 80043ce:	e002      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043d4:	bf00      	nop
    }

    if(status == HAL_OK)
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043dc:	4b49      	ldr	r3, [pc, #292]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	430b      	orrs	r3, r1
 80043f2:	4944      	ldr	r1, [pc, #272]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d17d      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a40      	ldr	r2, [pc, #256]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004404:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440a:	f7fc feff 	bl	800120c <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004410:	e009      	b.n	8004426 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004412:	f7fc fefb 	bl	800120c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d902      	bls.n	8004426 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	73fb      	strb	r3, [r7, #15]
        break;
 8004424:	e005      	b.n	8004432 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1ef      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d160      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d111      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6892      	ldr	r2, [r2, #8]
 800444e:	0211      	lsls	r1, r2, #8
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68d2      	ldr	r2, [r2, #12]
 8004454:	0912      	lsrs	r2, r2, #4
 8004456:	0452      	lsls	r2, r2, #17
 8004458:	430a      	orrs	r2, r1
 800445a:	492a      	ldr	r1, [pc, #168]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	610b      	str	r3, [r1, #16]
 8004460:	e027      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d112      	bne.n	800448e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004468:	4b26      	ldr	r3, [pc, #152]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6892      	ldr	r2, [r2, #8]
 8004478:	0211      	lsls	r1, r2, #8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6912      	ldr	r2, [r2, #16]
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0552      	lsls	r2, r2, #21
 8004484:	430a      	orrs	r2, r1
 8004486:	491f      	ldr	r1, [pc, #124]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]
 800448c:	e011      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004496:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6892      	ldr	r2, [r2, #8]
 800449e:	0211      	lsls	r1, r2, #8
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6952      	ldr	r2, [r2, #20]
 80044a4:	0852      	lsrs	r2, r2, #1
 80044a6:	3a01      	subs	r2, #1
 80044a8:	0652      	lsls	r2, r2, #25
 80044aa:	430a      	orrs	r2, r1
 80044ac:	4915      	ldr	r1, [pc, #84]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a13      	ldr	r2, [pc, #76]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fc fea5 	bl	800120c <HAL_GetTick>
 80044c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044c4:	e009      	b.n	80044da <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c6:	f7fc fea1 	bl	800120c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d902      	bls.n	80044da <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	73fb      	strb	r3, [r7, #15]
          break;
 80044d8:	e005      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000

08004508 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004516:	4b68      	ldr	r3, [pc, #416]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004522:	4b65      	ldr	r3, [pc, #404]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0203 	and.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d10d      	bne.n	800454e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
       ||
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800453a:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
       ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d044      	beq.n	80045d8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e041      	b.n	80045d8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d00c      	beq.n	8004576 <RCCEx_PLLSAI2_Config+0x6e>
 800455c:	2b03      	cmp	r3, #3
 800455e:	d013      	beq.n	8004588 <RCCEx_PLLSAI2_Config+0x80>
 8004560:	2b01      	cmp	r3, #1
 8004562:	d120      	bne.n	80045a6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004564:	4b54      	ldr	r3, [pc, #336]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11d      	bne.n	80045ac <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004574:	e01a      	b.n	80045ac <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004576:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457e:	2b00      	cmp	r3, #0
 8004580:	d116      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004586:	e013      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004588:	4b4b      	ldr	r3, [pc, #300]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10f      	bne.n	80045b4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004594:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045a4:	e006      	b.n	80045b4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      break;
 80045aa:	e004      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80045ac:	bf00      	nop
 80045ae:	e002      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80045b4:	bf00      	nop
    }

    if(status == HAL_OK)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045bc:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6819      	ldr	r1, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	430b      	orrs	r3, r1
 80045d2:	4939      	ldr	r1, [pc, #228]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d167      	bne.n	80046ae <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a35      	ldr	r2, [pc, #212]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ea:	f7fc fe0f 	bl	800120c <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045f0:	e009      	b.n	8004606 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045f2:	f7fc fe0b 	bl	800120c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d902      	bls.n	8004606 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	73fb      	strb	r3, [r7, #15]
        break;
 8004604:	e005      	b.n	8004612 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004606:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ef      	bne.n	80045f2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d14a      	bne.n	80046ae <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d111      	bne.n	8004642 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800461e:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6892      	ldr	r2, [r2, #8]
 800462e:	0211      	lsls	r1, r2, #8
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68d2      	ldr	r2, [r2, #12]
 8004634:	0912      	lsrs	r2, r2, #4
 8004636:	0452      	lsls	r2, r2, #17
 8004638:	430a      	orrs	r2, r1
 800463a:	491f      	ldr	r1, [pc, #124]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	614b      	str	r3, [r1, #20]
 8004640:	e011      	b.n	8004666 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800464a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	0211      	lsls	r1, r2, #8
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6912      	ldr	r2, [r2, #16]
 8004658:	0852      	lsrs	r2, r2, #1
 800465a:	3a01      	subs	r2, #1
 800465c:	0652      	lsls	r2, r2, #25
 800465e:	430a      	orrs	r2, r1
 8004660:	4915      	ldr	r1, [pc, #84]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fc fdcb 	bl	800120c <HAL_GetTick>
 8004676:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004678:	e009      	b.n	800468e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800467a:	f7fc fdc7 	bl	800120c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d902      	bls.n	800468e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	73fb      	strb	r3, [r7, #15]
          break;
 800468c:	e005      	b.n	800469a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ef      	beq.n	800467a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	4903      	ldr	r1, [pc, #12]	; (80046b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000

080046bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01d      	b.n	800470a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fc1e 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f000 fbd2 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_TIM_Base_Start_IT+0x50>)
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b06      	cmp	r3, #6
 800473c:	d00b      	beq.n	8004756 <HAL_TIM_Base_Start_IT+0x42>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d007      	beq.n	8004756 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	00010007 	.word	0x00010007

08004768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e01d      	b.n	80047b6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc fbaa 	bl	8000ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fb7c 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 ff70 	bl	80056b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <HAL_TIM_PWM_Start+0x98>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_TIM_PWM_Start+0x4a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1d      	ldr	r2, [pc, #116]	; (800485c <HAL_TIM_PWM_Start+0x9c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_TIM_PWM_Start+0x4a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <HAL_TIM_PWM_Start+0xa0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_TIM_PWM_Start+0x4a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1a      	ldr	r2, [pc, #104]	; (8004864 <HAL_TIM_PWM_Start+0xa4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_TIM_PWM_Start+0x4a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_TIM_PWM_Start+0xa8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_TIM_PWM_Start+0x4e>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_TIM_PWM_Start+0x50>
 800480e:	2300      	movs	r3, #0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <HAL_TIM_PWM_Start+0xac>)
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b06      	cmp	r3, #6
 8004834:	d00b      	beq.n	800484e <HAL_TIM_PWM_Start+0x8e>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d007      	beq.n	800484e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0201 	orr.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800
 800486c:	00010007 	.word	0x00010007

08004870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0202 	mvn.w	r2, #2
 800489c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fad7 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fac9 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fada 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0204 	mvn.w	r2, #4
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 faad 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa9f 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fab0 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b08      	cmp	r3, #8
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0208 	mvn.w	r2, #8
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2204      	movs	r2, #4
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa83 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa75 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa86 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b10      	cmp	r3, #16
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b10      	cmp	r3, #16
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0210 	mvn.w	r2, #16
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2208      	movs	r2, #8
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa59 	bl	8004e66 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa4b 	bl	8004e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fa5c 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0201 	mvn.w	r2, #1
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fb fc76 	bl	80002e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d10e      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d107      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 ff04 	bl	8005828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2e:	d10e      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fef7 	bl	800583c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d10e      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d107      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa0a 	bl	8004e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d10e      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d107      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0220 	mvn.w	r2, #32
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 feb7 	bl	8005814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e105      	b.n	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b14      	cmp	r3, #20
 8004ade:	f200 80f0 	bhi.w	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b3d 	.word	0x08004b3d
 8004aec:	08004cc3 	.word	0x08004cc3
 8004af0:	08004cc3 	.word	0x08004cc3
 8004af4:	08004cc3 	.word	0x08004cc3
 8004af8:	08004b7d 	.word	0x08004b7d
 8004afc:	08004cc3 	.word	0x08004cc3
 8004b00:	08004cc3 	.word	0x08004cc3
 8004b04:	08004cc3 	.word	0x08004cc3
 8004b08:	08004bbf 	.word	0x08004bbf
 8004b0c:	08004cc3 	.word	0x08004cc3
 8004b10:	08004cc3 	.word	0x08004cc3
 8004b14:	08004cc3 	.word	0x08004cc3
 8004b18:	08004bff 	.word	0x08004bff
 8004b1c:	08004cc3 	.word	0x08004cc3
 8004b20:	08004cc3 	.word	0x08004cc3
 8004b24:	08004cc3 	.word	0x08004cc3
 8004b28:	08004c41 	.word	0x08004c41
 8004b2c:	08004cc3 	.word	0x08004cc3
 8004b30:	08004cc3 	.word	0x08004cc3
 8004b34:	08004cc3 	.word	0x08004cc3
 8004b38:	08004c81 	.word	0x08004c81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fa48 	bl	8004fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0208 	orr.w	r2, r2, #8
 8004b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0204 	bic.w	r2, r2, #4
 8004b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6999      	ldr	r1, [r3, #24]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	619a      	str	r2, [r3, #24]
      break;
 8004b7a:	e0a3      	b.n	8004cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fab8 	bl	80050f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	619a      	str	r2, [r3, #24]
      break;
 8004bbc:	e082      	b.n	8004cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fb21 	bl	800520c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0208 	orr.w	r2, r2, #8
 8004bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0204 	bic.w	r2, r2, #4
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69d9      	ldr	r1, [r3, #28]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	61da      	str	r2, [r3, #28]
      break;
 8004bfc:	e062      	b.n	8004cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fb89 	bl	800531c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69d9      	ldr	r1, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	021a      	lsls	r2, r3, #8
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	61da      	str	r2, [r3, #28]
      break;
 8004c3e:	e041      	b.n	8004cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fbd2 	bl	80053f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0208 	orr.w	r2, r2, #8
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0204 	bic.w	r2, r2, #4
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c7e:	e021      	b.n	8004cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fc16 	bl	80054b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cc0:	e000      	b.n	8004cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004cc2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop

08004ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_ConfigClockSource+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e0a8      	b.n	8004e4a <HAL_TIM_ConfigClockSource+0x16a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d067      	beq.n	8004e04 <HAL_TIM_ConfigClockSource+0x124>
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d80b      	bhi.n	8004d50 <HAL_TIM_ConfigClockSource+0x70>
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d073      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0x144>
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d802      	bhi.n	8004d46 <HAL_TIM_ConfigClockSource+0x66>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d06f      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004d44:	e078      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d06c      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0x144>
 8004d4a:	2b30      	cmp	r3, #48	; 0x30
 8004d4c:	d06a      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004d4e:	e073      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004d50:	2b70      	cmp	r3, #112	; 0x70
 8004d52:	d00d      	beq.n	8004d70 <HAL_TIM_ConfigClockSource+0x90>
 8004d54:	2b70      	cmp	r3, #112	; 0x70
 8004d56:	d804      	bhi.n	8004d62 <HAL_TIM_ConfigClockSource+0x82>
 8004d58:	2b50      	cmp	r3, #80	; 0x50
 8004d5a:	d033      	beq.n	8004dc4 <HAL_TIM_ConfigClockSource+0xe4>
 8004d5c:	2b60      	cmp	r3, #96	; 0x60
 8004d5e:	d041      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004d60:	e06a      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d066      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x156>
 8004d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6c:	d017      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004d6e:	e063      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	6899      	ldr	r1, [r3, #8]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f000 fc7a 	bl	8005678 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	609a      	str	r2, [r3, #8]
      break;
 8004d9c:	e04c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6899      	ldr	r1, [r3, #8]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f000 fc63 	bl	8005678 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc0:	609a      	str	r2, [r3, #8]
      break;
 8004dc2:	e039      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f000 fbd7 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2150      	movs	r1, #80	; 0x50
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fc30 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004de2:	e029      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	461a      	mov	r2, r3
 8004df2:	f000 fbf6 	bl	80055e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2160      	movs	r1, #96	; 0x60
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fc20 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004e02:	e019      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	461a      	mov	r2, r3
 8004e12:	f000 fbb7 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2140      	movs	r1, #64	; 0x40
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fc10 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004e22:	e009      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f000 fc07 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004e34:	e000      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a40      	ldr	r2, [pc, #256]	; (8004fb8 <TIM_Base_SetConfig+0x114>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a3d      	ldr	r2, [pc, #244]	; (8004fbc <TIM_Base_SetConfig+0x118>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <TIM_Base_SetConfig+0x11c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <TIM_Base_SetConfig+0x120>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3a      	ldr	r2, [pc, #232]	; (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <TIM_Base_SetConfig+0x114>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d01b      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <TIM_Base_SetConfig+0x118>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d017      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2b      	ldr	r2, [pc, #172]	; (8004fc0 <TIM_Base_SetConfig+0x11c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <TIM_Base_SetConfig+0x120>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00f      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a28      	ldr	r2, [pc, #160]	; (8004fcc <TIM_Base_SetConfig+0x128>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <TIM_Base_SetConfig+0x12c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x9a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <TIM_Base_SetConfig+0x130>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <TIM_Base_SetConfig+0x114>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00f      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a12      	ldr	r2, [pc, #72]	; (8004fc8 <TIM_Base_SetConfig+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a11      	ldr	r2, [pc, #68]	; (8004fcc <TIM_Base_SetConfig+0x128>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d007      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <TIM_Base_SetConfig+0x12c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_Base_SetConfig+0xf8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <TIM_Base_SetConfig+0x130>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d103      	bne.n	8004fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	615a      	str	r2, [r3, #20]
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 0302 	bic.w	r3, r3, #2
 8005024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <TIM_OC1_SetConfig+0x10c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00f      	beq.n	8005058 <TIM_OC1_SetConfig+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <TIM_OC1_SetConfig+0x110>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_OC1_SetConfig+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <TIM_OC1_SetConfig+0x114>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC1_SetConfig+0x80>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <TIM_OC1_SetConfig+0x118>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC1_SetConfig+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <TIM_OC1_SetConfig+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10c      	bne.n	8005072 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0308 	bic.w	r3, r3, #8
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <TIM_OC1_SetConfig+0x10c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00f      	beq.n	800509a <TIM_OC1_SetConfig+0xc2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1a      	ldr	r2, [pc, #104]	; (80050e8 <TIM_OC1_SetConfig+0x110>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_OC1_SetConfig+0xc2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a19      	ldr	r2, [pc, #100]	; (80050ec <TIM_OC1_SetConfig+0x114>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_OC1_SetConfig+0xc2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <TIM_OC1_SetConfig+0x118>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_OC1_SetConfig+0xc2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <TIM_OC1_SetConfig+0x11c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d111      	bne.n	80050be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	621a      	str	r2, [r3, #32]
}
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40013400 	.word	0x40013400
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800

080050f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f023 0210 	bic.w	r2, r3, #16
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0320 	bic.w	r3, r3, #32
 8005146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a28      	ldr	r2, [pc, #160]	; (80051f8 <TIM_OC2_SetConfig+0x100>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC2_SetConfig+0x6c>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a27      	ldr	r2, [pc, #156]	; (80051fc <TIM_OC2_SetConfig+0x104>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10d      	bne.n	8005180 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a1d      	ldr	r2, [pc, #116]	; (80051f8 <TIM_OC2_SetConfig+0x100>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00f      	beq.n	80051a8 <TIM_OC2_SetConfig+0xb0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <TIM_OC2_SetConfig+0x104>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_OC2_SetConfig+0xb0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <TIM_OC2_SetConfig+0x108>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_OC2_SetConfig+0xb0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <TIM_OC2_SetConfig+0x10c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC2_SetConfig+0xb0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_OC2_SetConfig+0x110>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d113      	bne.n	80051d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40013400 	.word	0x40013400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800

0800520c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0303 	bic.w	r3, r3, #3
 8005246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a27      	ldr	r2, [pc, #156]	; (8005308 <TIM_OC3_SetConfig+0xfc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_OC3_SetConfig+0x6a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a26      	ldr	r2, [pc, #152]	; (800530c <TIM_OC3_SetConfig+0x100>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10d      	bne.n	8005292 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <TIM_OC3_SetConfig+0xfc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00f      	beq.n	80052ba <TIM_OC3_SetConfig+0xae>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <TIM_OC3_SetConfig+0x100>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00b      	beq.n	80052ba <TIM_OC3_SetConfig+0xae>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <TIM_OC3_SetConfig+0x104>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_OC3_SetConfig+0xae>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a19      	ldr	r2, [pc, #100]	; (8005314 <TIM_OC3_SetConfig+0x108>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC3_SetConfig+0xae>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <TIM_OC3_SetConfig+0x10c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d113      	bne.n	80052e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40013400 	.word	0x40013400
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800534a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800536a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <TIM_OC4_SetConfig+0xc0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00f      	beq.n	80053a0 <TIM_OC4_SetConfig+0x84>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <TIM_OC4_SetConfig+0xc4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_OC4_SetConfig+0x84>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <TIM_OC4_SetConfig+0xc8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_OC4_SetConfig+0x84>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <TIM_OC4_SetConfig+0xcc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC4_SetConfig+0x84>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <TIM_OC4_SetConfig+0xd0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40013400 	.word	0x40013400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <TIM_OC5_SetConfig+0xb4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00f      	beq.n	800546a <TIM_OC5_SetConfig+0x7a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <TIM_OC5_SetConfig+0xb8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <TIM_OC5_SetConfig+0x7a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <TIM_OC5_SetConfig+0xbc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <TIM_OC5_SetConfig+0x7a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <TIM_OC5_SetConfig+0xc0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_OC5_SetConfig+0x7a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <TIM_OC5_SetConfig+0xc4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d109      	bne.n	800547e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40013400 	.word	0x40013400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800

080054b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	051b      	lsls	r3, r3, #20
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <TIM_OC6_SetConfig+0xb8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_OC6_SetConfig+0x7c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a17      	ldr	r2, [pc, #92]	; (8005574 <TIM_OC6_SetConfig+0xbc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_OC6_SetConfig+0x7c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <TIM_OC6_SetConfig+0xc0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_OC6_SetConfig+0x7c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <TIM_OC6_SetConfig+0xc4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC6_SetConfig+0x7c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a14      	ldr	r2, [pc, #80]	; (8005580 <TIM_OC6_SetConfig+0xc8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d109      	bne.n	8005548 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0210 	bic.w	r2, r3, #16
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800561e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	f043 0307 	orr.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	431a      	orrs	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2201      	movs	r2, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1a      	ldr	r2, [r3, #32]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	431a      	orrs	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e068      	b.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2e      	ldr	r2, [pc, #184]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d108      	bne.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005756:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005768:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01d      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578e:	d018      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1b      	ldr	r2, [pc, #108]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1a      	ldr	r2, [pc, #104]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a13      	ldr	r2, [pc, #76]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a14      	ldr	r2, [pc, #80]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10c      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40013400 	.word	0x40013400
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40000c00 	.word	0x40000c00
 8005810:	40014000 	.word	0x40014000

08005814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <__libc_init_array>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4e0d      	ldr	r6, [pc, #52]	; (8005888 <__libc_init_array+0x38>)
 8005854:	4c0d      	ldr	r4, [pc, #52]	; (800588c <__libc_init_array+0x3c>)
 8005856:	1ba4      	subs	r4, r4, r6
 8005858:	10a4      	asrs	r4, r4, #2
 800585a:	2500      	movs	r5, #0
 800585c:	42a5      	cmp	r5, r4
 800585e:	d109      	bne.n	8005874 <__libc_init_array+0x24>
 8005860:	4e0b      	ldr	r6, [pc, #44]	; (8005890 <__libc_init_array+0x40>)
 8005862:	4c0c      	ldr	r4, [pc, #48]	; (8005894 <__libc_init_array+0x44>)
 8005864:	f000 f820 	bl	80058a8 <_init>
 8005868:	1ba4      	subs	r4, r4, r6
 800586a:	10a4      	asrs	r4, r4, #2
 800586c:	2500      	movs	r5, #0
 800586e:	42a5      	cmp	r5, r4
 8005870:	d105      	bne.n	800587e <__libc_init_array+0x2e>
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005878:	4798      	blx	r3
 800587a:	3501      	adds	r5, #1
 800587c:	e7ee      	b.n	800585c <__libc_init_array+0xc>
 800587e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005882:	4798      	blx	r3
 8005884:	3501      	adds	r5, #1
 8005886:	e7f2      	b.n	800586e <__libc_init_array+0x1e>
 8005888:	08005900 	.word	0x08005900
 800588c:	08005900 	.word	0x08005900
 8005890:	08005900 	.word	0x08005900
 8005894:	08005904 	.word	0x08005904

08005898 <memset>:
 8005898:	4402      	add	r2, r0
 800589a:	4603      	mov	r3, r0
 800589c:	4293      	cmp	r3, r2
 800589e:	d100      	bne.n	80058a2 <memset+0xa>
 80058a0:	4770      	bx	lr
 80058a2:	f803 1b01 	strb.w	r1, [r3], #1
 80058a6:	e7f9      	b.n	800589c <memset+0x4>

080058a8 <_init>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr

080058b4 <_fini>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr
