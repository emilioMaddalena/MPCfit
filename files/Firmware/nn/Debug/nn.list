
nn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007818  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e8  080079e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f0  080079f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080079f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000010  08007a04  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08007a04  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002362  00000000  00000000  00033d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  000373d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029219  00000000  00000000  00038618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e01e  00000000  00000000  00061831  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010792a  00000000  00000000  0006f84f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005424  00000000  00000000  001771f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007988 	.word	0x08007988

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007988 	.word	0x08007988

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <swap>:

//  Begin code from https://www.geeksforgeeks.org/quick-sort/
/* Functions of the quick sort algorithm.
 * Once the values have been sorted the median value is returned */
void swap(int* a, int* b)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	int t = *a;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]
    *b = t;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <partition>:

int partition (int arr[], int low, int high)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b088      	sub	sp, #32
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	e018      	b.n	8000d34 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dd0d      	ble.n	8000d2e <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	18d0      	adds	r0, r2, r3
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f7ff ffc3 	bl	8000cb4 <swap>
    for (int j = low; j <= high- 1; j++)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	3301      	adds	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dde1      	ble.n	8000d02 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3301      	adds	r3, #1
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	18d0      	adds	r0, r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff ffaf 	bl	8000cb4 <swap>
    return (i + 1);
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	da13      	bge.n	8000d9e <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ffaf 	bl	8000cde <partition>
 8000d80:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	461a      	mov	r2, r3
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff ffe9 	bl	8000d62 <quickSort>
        quickSort(arr, pi + 1, high);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4619      	mov	r1, r3
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff ffe2 	bl	8000d62 <quickSort>
    }
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <get_median>:

int get_median(int *values){
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 8000dae:	2301      	movs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	461a      	mov	r2, r3
 8000db8:	2100      	movs	r1, #0
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffd1 	bl	8000d62 <quickSort>
    return values[SIZE/2];
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <HAL_TIM_PeriodElapsedCallback>:
// End code from https://www.geeksforgeeks.org/quick-sort/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	b0bd      	sub	sp, #244	; 0xf4
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	// Delay before the controller starts operating
	if (htim->Instance == htim3.Instance)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 86ad 	bne.w	8001b40 <HAL_TIM_PeriodElapsedCallback+0xd70>
    {
		if(iter < 10000){
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d807      	bhi.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x32>
			iter++;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dfc:	801a      	strh	r2, [r3, #0]
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/13197);
		}
	}
	// End Timing
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000dfe:	f000 be9f 	b.w	8001b40 <HAL_TIM_PeriodElapsedCallback+0xd70>
			for(uint8_t i = 0; i<SIZE; i++){
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000e08:	e023      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x82>
 8000e0a:	bf00      	nop
 8000e0c:	200000d8 	.word	0x200000d8
 8000e10:	20000030 	.word	0x20000030
				value0[i] = (int)adc_buf0[i];
 8000e14:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e18:	4ac8      	ldr	r2, [pc, #800]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000e1a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e1e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000e28:	440b      	add	r3, r1
 8000e2a:	f843 2cc8 	str.w	r2, [r3, #-200]
				value1[i] = (int)adc_buf1[i];
 8000e2e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e32:	4ac3      	ldr	r2, [pc, #780]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000e34:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e38:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000e42:	440b      	add	r3, r1
 8000e44:	f843 2ce4 	str.w	r2, [r3, #-228]
			for(uint8_t i = 0; i<SIZE; i++){
 8000e48:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000e52:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d9dc      	bls.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x44>
			y[0] = get_median(value0); y[0] *= 1075; y[0] /= 10000;
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffa1 	bl	8000da6 <get_median>
 8000e64:	4602      	mov	r2, r0
 8000e66:	4bb7      	ldr	r3, [pc, #732]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	4bb6      	ldr	r3, [pc, #728]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f240 4233 	movw	r2, #1075	; 0x433
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	4ab3      	ldr	r2, [pc, #716]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4bb2      	ldr	r3, [pc, #712]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4ab2      	ldr	r2, [pc, #712]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000e80:	fb82 1203 	smull	r1, r2, r2, r3
 8000e84:	1312      	asrs	r2, r2, #12
 8000e86:	17db      	asrs	r3, r3, #31
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	4aae      	ldr	r2, [pc, #696]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000e8c:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 28900; y[1] /= 10000;
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff87 	bl	8000da6 <get_median>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4baa      	ldr	r3, [pc, #680]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	4ba9      	ldr	r3, [pc, #676]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f247 02e4 	movw	r2, #28900	; 0x70e4
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	4aa6      	ldr	r2, [pc, #664]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000eac:	6053      	str	r3, [r2, #4]
 8000eae:	4ba5      	ldr	r3, [pc, #660]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4aa5      	ldr	r2, [pc, #660]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb8:	1312      	asrs	r2, r2, #12
 8000eba:	17db      	asrs	r3, r3, #31
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	4aa1      	ldr	r2, [pc, #644]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000ec0:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 8000ec2:	4ba2      	ldr	r3, [pc, #648]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			int x1_prev = x[1];
 8000eca:	4ba0      	ldr	r3, [pc, #640]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 8000ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ed6:	4a9e      	ldr	r2, [pc, #632]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000ed8:	fb02 f203 	mul.w	r2, r2, r3
 8000edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ee0:	499c      	ldr	r1, [pc, #624]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	441a      	add	r2, r3
 8000ee8:	4b9b      	ldr	r3, [pc, #620]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f643 211e 	movw	r1, #14878	; 0x3a1e
 8000ef0:	fb01 f303 	mul.w	r3, r1, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a99      	ldr	r2, [pc, #612]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b98      	ldr	r3, [pc, #608]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a98      	ldr	r2, [pc, #608]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	1352      	asrs	r2, r2, #13
 8000f06:	17db      	asrs	r3, r3, #31
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	4a94      	ldr	r2, [pc, #592]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f0c:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 8000f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f12:	4a94      	ldr	r2, [pc, #592]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000f14:	fb02 f203 	mul.w	r2, r2, r3
 8000f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f1c:	4992      	ldr	r1, [pc, #584]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	441a      	add	r2, r3
 8000f24:	4b8c      	ldr	r3, [pc, #560]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f244 61a3 	movw	r1, #18083	; 0x46a3
 8000f2c:	fb01 f303 	mul.w	r3, r1, r3
 8000f30:	4413      	add	r3, r2
 8000f32:	4a8a      	ldr	r2, [pc, #552]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f34:	6053      	str	r3, [r2, #4]
 8000f36:	4b89      	ldr	r3, [pc, #548]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a89      	ldr	r2, [pc, #548]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f40:	1352      	asrs	r2, r2, #13
 8000f42:	17db      	asrs	r3, r3, #31
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a85      	ldr	r2, [pc, #532]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f48:	6053      	str	r3, [r2, #4]
			int alpha = 250;              // Measurement contibution = 25 %, Model contribution = 75 %
 8000f4a:	23fa      	movs	r3, #250	; 0xfa
 8000f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			int alpha_bar = 1000-alpha;
 8000f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f54:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			x[0] = alpha*y[0] + alpha_bar*x_est[0]; x[0] /= 1000;
 8000f5c:	4b79      	ldr	r3, [pc, #484]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f64:	fb02 f203 	mul.w	r2, r2, r3
 8000f68:	4b7c      	ldr	r3, [pc, #496]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000f70:	fb01 f303 	mul.w	r3, r1, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	4a75      	ldr	r2, [pc, #468]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b74      	ldr	r3, [pc, #464]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a7b      	ldr	r2, [pc, #492]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f80:	fb82 1203 	smull	r1, r2, r2, r3
 8000f84:	1192      	asrs	r2, r2, #6
 8000f86:	17db      	asrs	r3, r3, #31
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	4a70      	ldr	r2, [pc, #448]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000f8c:	6013      	str	r3, [r2, #0]
			x[1] = alpha*y[1] + alpha_bar*x_est[1]; x[1] /= 1000;
 8000f8e:	4b6d      	ldr	r3, [pc, #436]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f96:	fb02 f203 	mul.w	r2, r2, r3
 8000f9a:	4b70      	ldr	r3, [pc, #448]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000fa2:	fb01 f303 	mul.w	r3, r1, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a68      	ldr	r2, [pc, #416]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000faa:	6053      	str	r3, [r2, #4]
 8000fac:	4b67      	ldr	r3, [pc, #412]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4a6e      	ldr	r2, [pc, #440]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb6:	1192      	asrs	r2, r2, #6
 8000fb8:	17db      	asrs	r3, r3, #31
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	4a63      	ldr	r2, [pc, #396]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000fbe:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 8000fc0:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2232      	movs	r2, #50	; 0x32
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			int dx1 = x[1] - xs1;
 8000fcc:	4b5f      	ldr	r3, [pc, #380]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			dx0 -= X0_MIN;  dx0 *= 1000; dx0 /= DELTA_X0;
 8000fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000fde:	3332      	adds	r3, #50	; 0x32
 8000fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ff8:	4a5d      	ldr	r2, [pc, #372]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffe:	1192      	asrs	r2, r2, #6
 8001000:	17db      	asrs	r3, r3, #31
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			dx1 -= X1_MIN;  dx1 *= 1000; dx1 /= DELTA_X1;
 8001008:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800100c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001010:	3308      	adds	r3, #8
 8001012:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001016:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800101a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101e:	fb02 f303 	mul.w	r3, r2, r3
 8001022:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001026:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800102a:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800102c:	fb82 1203 	smull	r1, r2, r2, r3
 8001030:	1292      	asrs	r2, r2, #10
 8001032:	17db      	asrs	r3, r3, #31
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			int H11 = -84*dx0+996*dx1-357663;       H11 = H11<=0;
 800103a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800103e:	f06f 0253 	mvn.w	r2, #83	; 0x53
 8001042:	fb02 f203 	mul.w	r2, r2, r3
 8001046:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800104a:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 800104e:	fb01 f303 	mul.w	r3, r1, r3
 8001052:	4413      	add	r3, r2
 8001054:	f5a3 23ae 	sub.w	r3, r3, #356352	; 0x57000
 8001058:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 800105c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001064:	2b00      	cmp	r3, #0
 8001066:	bfd4      	ite	le
 8001068:	2301      	movle	r3, #1
 800106a:	2300      	movgt	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			int H12 = 1000*dx0-1000000;             H12 = H12<=0;
 8001072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8001082:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800108a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800108e:	2b00      	cmp	r3, #0
 8001090:	bfd4      	ite	le
 8001092:	2301      	movle	r3, #1
 8001094:	2300      	movgt	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			int H13 = -1000*dx1;                    H13 = H13<=0;
 800109c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010a0:	4a35      	ldr	r2, [pc, #212]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80010aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bfd4      	ite	le
 80010b2:	2301      	movle	r3, #1
 80010b4:	2300      	movgt	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			int H14 = -1000*dx0;                    H14 = H14<=0;
 80010bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010c0:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80010ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bfd4      	ite	le
 80010d2:	2301      	movle	r3, #1
 80010d4:	2300      	movgt	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			int H15 = 948*dx0-317*dx1-939649;       H15 = H15<=0;
 80010dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010e0:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 80010e4:	fb02 f203 	mul.w	r2, r2, r3
 80010e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010ec:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	f5a3 2365 	sub.w	r3, r3, #937984	; 0xe5000
 80010fa:	f2a3 6381 	subw	r3, r3, #1665	; 0x681
 80010fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001102:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001106:	2b00      	cmp	r3, #0
 8001108:	bfd4      	ite	le
 800110a:	2301      	movle	r3, #1
 800110c:	2300      	movgt	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			if(H11 && H12 && H13 && H14 && H15){
 8001114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 8088 	beq.w	800122e <HAL_TIM_PeriodElapsedCallback+0x45e>
 800111e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8083 	beq.w	800122e <HAL_TIM_PeriodElapsedCallback+0x45e>
 8001128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d07e      	beq.n	800122e <HAL_TIM_PeriodElapsedCallback+0x45e>
 8001130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d07a      	beq.n	800122e <HAL_TIM_PeriodElapsedCallback+0x45e>
 8001138:	e020      	b.n	800117c <HAL_TIM_PeriodElapsedCallback+0x3ac>
 800113a:	bf00      	nop
 800113c:	200002dc 	.word	0x200002dc
 8001140:	20000118 	.word	0x20000118
 8001144:	2000003c 	.word	0x2000003c
 8001148:	68db8bad 	.word	0x68db8bad
 800114c:	20000034 	.word	0x20000034
 8001150:	00017b70 	.word	0x00017b70
 8001154:	fffffc2e 	.word	0xfffffc2e
 8001158:	2000002c 	.word	0x2000002c
 800115c:	20000044 	.word	0x20000044
 8001160:	14f8b589 	.word	0x14f8b589
 8001164:	0002a483 	.word	0x0002a483
 8001168:	00017b16 	.word	0x00017b16
 800116c:	10624dd3 	.word	0x10624dd3
 8001170:	51eb851f 	.word	0x51eb851f
 8001174:	2572fb07 	.word	0x2572fb07
 8001178:	fffffc18 	.word	0xfffffc18
 800117c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001180:	2b00      	cmp	r3, #0
 8001182:	d054      	beq.n	800122e <HAL_TIM_PeriodElapsedCallback+0x45e>
				n1 = -1*dx0-276*dx1+1048587;
 8001184:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001188:	4acb      	ldr	r2, [pc, #812]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800118a:	fb02 f203 	mul.w	r2, r2, r3
 800118e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001198:	330b      	adds	r3, #11
 800119a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				n2 = -1238*dx0+414*dx1+1226741;
 800119e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011a2:	4ac6      	ldr	r2, [pc, #792]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 80011a4:	fb02 f203 	mul.w	r2, r2, r3
 80011a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011ac:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80011b0:	fb01 f303 	mul.w	r3, r1, r3
 80011b4:	441a      	add	r2, r3
 80011b6:	4bc2      	ldr	r3, [pc, #776]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80011b8:	4413      	add	r3, r2
 80011ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				int u_temp = -0.0959*n1+1.0614*n2+141619;
 80011be:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80011c2:	f7ff f953 	bl	800046c <__aeabi_i2d>
 80011c6:	a3b4      	add	r3, pc, #720	; (adr r3, 8001498 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f9b8 	bl	8000540 <__aeabi_dmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4625      	mov	r5, r4
 80011d6:	461c      	mov	r4, r3
 80011d8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80011dc:	f7ff f946 	bl	800046c <__aeabi_i2d>
 80011e0:	a3af      	add	r3, pc, #700	; (adr r3, 80014a0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff f9ab 	bl	8000540 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7fe ffef 	bl	80001d4 <__adddf3>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	4618      	mov	r0, r3
 80011fc:	4621      	mov	r1, r4
 80011fe:	a3aa      	add	r3, pc, #680	; (adr r3, 80014a8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7fe ffe6 	bl	80001d4 <__adddf3>
 8001208:	4603      	mov	r3, r0
 800120a:	460c      	mov	r4, r1
 800120c:	4618      	mov	r0, r3
 800120e:	4621      	mov	r1, r4
 8001210:	f7ff fba8 	bl	8000964 <__aeabi_d2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				u = u_temp+U_MIN;
 800121a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800121e:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 8001222:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001226:	4aa7      	ldr	r2, [pc, #668]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001228:	6013      	str	r3, [r2, #0]
			if(H11 && H12 && H13 && H14 && H15){
 800122a:	f000 bc55 	b.w	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
				int H21 = 1000*dx0-1000000;          H21 = H21<=0;
 800122e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800123e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800124a:	2b00      	cmp	r3, #0
 800124c:	bfd4      	ite	le
 800124e:	2301      	movle	r3, #1
 8001250:	2300      	movgt	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				int H22 = -1000*dx0;                 H22 = H22<=0;
 8001258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800125c:	4a9a      	ldr	r2, [pc, #616]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfd4      	ite	le
 800126e:	2301      	movle	r3, #1
 8001270:	2300      	movgt	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				int H23 = -73*dx0+997*dx1-784222;    H23 = H23<=0;
 8001278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800127c:	f06f 0248 	mvn.w	r2, #72	; 0x48
 8001280:	fb02 f203 	mul.w	r2, r2, r3
 8001284:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001288:	f240 31e5 	movw	r1, #997	; 0x3e5
 800128c:	fb01 f303 	mul.w	r3, r1, r3
 8001290:	4413      	add	r3, r2
 8001292:	f5a3 233f 	sub.w	r3, r3, #782336	; 0xbf000
 8001296:	f2a3 735e 	subw	r3, r3, #1886	; 0x75e
 800129a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800129e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bfd4      	ite	le
 80012a6:	2301      	movle	r3, #1
 80012a8:	2300      	movgt	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				int H24 = 674*dx0+738*dx1-1106412;   H24 = H24<=0;
 80012b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012b4:	f240 22a2 	movw	r2, #674	; 0x2a2
 80012b8:	fb02 f203 	mul.w	r2, r2, r3
 80012bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012c0:	f240 21e2 	movw	r1, #738	; 0x2e2
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	f5a3 1387 	sub.w	r3, r3, #1105920	; 0x10e000
 80012ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80012d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80012d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bfd4      	ite	le
 80012de:	2301      	movle	r3, #1
 80012e0:	2300      	movgt	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				int H25 = 84*dx0-996*dx1+357663;     H25 = H25<=0;
 80012e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012ec:	2254      	movs	r2, #84	; 0x54
 80012ee:	fb02 f203 	mul.w	r2, r2, r3
 80012f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012f6:	4975      	ldr	r1, [pc, #468]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 23ae 	add.w	r3, r3, #356352	; 0x57000
 8001302:	f203 531f 	addw	r3, r3, #1311	; 0x51f
 8001306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800130a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800130e:	2b00      	cmp	r3, #0
 8001310:	bfd4      	ite	le
 8001312:	2301      	movle	r3, #1
 8001314:	2300      	movgt	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				if(H21 && H22 && H23 && H24 && H25){
 800131c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8109 	beq.w	8001538 <HAL_TIM_PeriodElapsedCallback+0x768>
 8001326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8104 	beq.w	8001538 <HAL_TIM_PeriodElapsedCallback+0x768>
 8001330:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80ff 	beq.w	8001538 <HAL_TIM_PeriodElapsedCallback+0x768>
 800133a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80fa 	beq.w	8001538 <HAL_TIM_PeriodElapsedCallback+0x768>
 8001344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80f5 	beq.w	8001538 <HAL_TIM_PeriodElapsedCallback+0x768>
					n1 = 163*dx0-2222*dx1+1747205;
 800134e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001352:	22a3      	movs	r2, #163	; 0xa3
 8001354:	fb02 f203 	mul.w	r2, r2, r3
 8001358:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800135c:	495c      	ldr	r1, [pc, #368]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	4413      	add	r3, r2
 8001364:	f503 13d5 	add.w	r3, r3, #1744896	; 0x1aa000
 8001368:	f603 1305 	addw	r3, r3, #2309	; 0x905
 800136c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					n2 = -1102*dx0-1207*dx1+1808427;
 8001370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001374:	4a57      	ldr	r2, [pc, #348]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001376:	fb02 f203 	mul.w	r2, r2, r3
 800137a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800137e:	4956      	ldr	r1, [pc, #344]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	441a      	add	r2, r3
 8001386:	4b55      	ldr	r3, [pc, #340]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001388:	4413      	add	r3, r2
 800138a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					n3 = -220*dx0+2620*dx1-940435;
 800138e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001392:	f06f 02db 	mvn.w	r2, #219	; 0xdb
 8001396:	fb02 f203 	mul.w	r2, r2, r3
 800139a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800139e:	f640 213c 	movw	r1, #2620	; 0xa3c
 80013a2:	fb01 f303 	mul.w	r3, r1, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	f5a3 2365 	sub.w	r3, r3, #937984	; 0xe5000
 80013ac:	f6a3 1393 	subw	r3, r3, #2451	; 0x993
 80013b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					int u_temp = -0.0959*n1+1.0614*n2-0.5676*n3+141619;
 80013b4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80013b8:	f7ff f858 	bl	800046c <__aeabi_i2d>
 80013bc:	a336      	add	r3, pc, #216	; (adr r3, 8001498 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f8bd 	bl	8000540 <__aeabi_dmul>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4625      	mov	r5, r4
 80013cc:	461c      	mov	r4, r3
 80013ce:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80013d2:	f7ff f84b 	bl	800046c <__aeabi_i2d>
 80013d6:	a332      	add	r3, pc, #200	; (adr r3, 80014a0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f8b0 	bl	8000540 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7fe fef4 	bl	80001d4 <__adddf3>
 80013ec:	4603      	mov	r3, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4625      	mov	r5, r4
 80013f2:	461c      	mov	r4, r3
 80013f4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80013f8:	f7ff f838 	bl	800046c <__aeabi_i2d>
 80013fc:	a32c      	add	r3, pc, #176	; (adr r3, 80014b0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f89d 	bl	8000540 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7fe fedf 	bl	80001d0 <__aeabi_dsub>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	4618      	mov	r0, r3
 8001418:	4621      	mov	r1, r4
 800141a:	a323      	add	r3, pc, #140	; (adr r3, 80014a8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7fe fed8 	bl	80001d4 <__adddf3>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4618      	mov	r0, r3
 800142a:	4621      	mov	r1, r4
 800142c:	f7ff fa9a 	bl	8000964 <__aeabi_d2iz>
 8001430:	4603      	mov	r3, r0
 8001432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					u = u_temp+U_MIN;
 8001436:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800143a:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 800143e:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001444:	6013      	str	r3, [r2, #0]
					if(!settled){
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d04b      	beq.n	80014ec <HAL_TIM_PeriodElapsedCallback+0x71c>
						int diff = x[1]-x1_prev;        // difference between 2 consecutive samples
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						if(diff > -100 && diff < 100){  // If |diff| < 100 mV increment counter
 8001462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001466:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800146a:	db11      	blt.n	8001490 <HAL_TIM_PeriodElapsedCallback+0x6c0>
 800146c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001470:	2b63      	cmp	r3, #99	; 0x63
 8001472:	dc0d      	bgt.n	8001490 <HAL_TIM_PeriodElapsedCallback+0x6c0>
							settling_iter++;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 800147e:	701a      	strb	r2, [r3, #0]
							if(settling_iter == 100){   // If counter = 100 system settled
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d156      	bne.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x766>
								settled = true;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
							if(settling_iter == 100){   // If counter = 100 system settled
 800148e:	e052      	b.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x766>
							settling_iter = 0;          // If |diff| > 100 mV reset counter
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
				if(H21 && H22 && H23 && H24 && H25){
 8001496:	e31f      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
 8001498:	03afb7e9 	.word	0x03afb7e9
 800149c:	bfb88ce7 	.word	0xbfb88ce7
 80014a0:	90ff9724 	.word	0x90ff9724
 80014a4:	3ff0fb7e 	.word	0x3ff0fb7e
 80014a8:	00000000 	.word	0x00000000
 80014ac:	41014998 	.word	0x41014998
 80014b0:	79a6b50b 	.word	0x79a6b50b
 80014b4:	3fe229c7 	.word	0x3fe229c7
 80014b8:	fffffeec 	.word	0xfffffeec
 80014bc:	fffffb2a 	.word	0xfffffb2a
 80014c0:	0012b7f5 	.word	0x0012b7f5
 80014c4:	2000002c 	.word	0x2000002c
 80014c8:	fffffc18 	.word	0xfffffc18
 80014cc:	fffffc1c 	.word	0xfffffc1c
 80014d0:	fffff752 	.word	0xfffff752
 80014d4:	fffffbb2 	.word	0xfffffbb2
 80014d8:	fffffb49 	.word	0xfffffb49
 80014dc:	001b982b 	.word	0x001b982b
 80014e0:	20000058 	.word	0x20000058
 80014e4:	20000034 	.word	0x20000034
 80014e8:	20000059 	.word	0x20000059
						int error = 5000-y[1];
 80014ec:	4bb8      	ldr	r3, [pc, #736]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 80014f4:	3308      	adds	r3, #8
 80014f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						integral += error;
 80014fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014fe:	4619      	mov	r1, r3
 8001500:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001504:	4bb3      	ldr	r3, [pc, #716]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001506:	e9d3 5600 	ldrd	r5, r6, [r3]
 800150a:	186b      	adds	r3, r5, r1
 800150c:	eb46 0402 	adc.w	r4, r6, r2
 8001510:	4ab0      	ldr	r2, [pc, #704]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001512:	e9c2 3400 	strd	r3, r4, [r2]
						u += 40*integral;
 8001516:	4baf      	ldr	r3, [pc, #700]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800151c:	461a      	mov	r2, r3
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	461a      	mov	r2, r3
 8001528:	4bab      	ldr	r3, [pc, #684]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	461a      	mov	r2, r3
 8001530:	4ba9      	ldr	r3, [pc, #676]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8001532:	601a      	str	r2, [r3, #0]
				if(H21 && H22 && H23 && H24 && H25){
 8001534:	e2d0      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
 8001536:	e2cf      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
					int H31 = -948*dx0+317*dx1+939649;    H31 = H31<=0;
 8001538:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800153c:	4aa7      	ldr	r2, [pc, #668]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800153e:	fb02 f203 	mul.w	r2, r2, r3
 8001542:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001546:	f240 113d 	movw	r1, #317	; 0x13d
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	f503 2365 	add.w	r3, r3, #937984	; 0xe5000
 8001554:	f203 6381 	addw	r3, r3, #1665	; 0x681
 8001558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800155c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001560:	2b00      	cmp	r3, #0
 8001562:	bfd4      	ite	le
 8001564:	2301      	movle	r3, #1
 8001566:	2300      	movgt	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					int H32 = 1000*dx0-1000000;           H32 = H32<=0;
 800156e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800157e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158a:	2b00      	cmp	r3, #0
 800158c:	bfd4      	ite	le
 800158e:	2301      	movle	r3, #1
 8001590:	2300      	movgt	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					int H33 = -1000*dx1;                  H33 = H33<=0;
 8001598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800159c:	4a90      	ldr	r2, [pc, #576]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bfd4      	ite	le
 80015ae:	2301      	movle	r3, #1
 80015b0:	2300      	movgt	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if(H31 && H32 && H33){
 80015b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d03c      	beq.n	800163a <HAL_TIM_PeriodElapsedCallback+0x86a>
 80015c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d038      	beq.n	800163a <HAL_TIM_PeriodElapsedCallback+0x86a>
 80015c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d034      	beq.n	800163a <HAL_TIM_PeriodElapsedCallback+0x86a>
						n1 = 614*dx0-481*dx1+439588;
 80015d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80015d4:	f240 2266 	movw	r2, #614	; 0x266
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015e0:	f46f 71f0 	mvn.w	r1, #480	; 0x1e0
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 23d6 	add.w	r3, r3, #438272	; 0x6b000
 80015ee:	f203 5324 	addw	r3, r3, #1316	; 0x524
 80015f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						int u_temp = -0.0959*n1+141619;
 80015f6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80015fa:	f7fe ff37 	bl	800046c <__aeabi_i2d>
 80015fe:	a36c      	add	r3, pc, #432	; (adr r3, 80017b0 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe ff9c 	bl	8000540 <__aeabi_dmul>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	4618      	mov	r0, r3
 800160e:	4621      	mov	r1, r4
 8001610:	a369      	add	r3, pc, #420	; (adr r3, 80017b8 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fddd 	bl	80001d4 <__adddf3>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	4618      	mov	r0, r3
 8001620:	4621      	mov	r1, r4
 8001622:	f7ff f99f 	bl	8000964 <__aeabi_d2iz>
 8001626:	4603      	mov	r3, r0
 8001628:	67fb      	str	r3, [r7, #124]	; 0x7c
						u = u_temp+U_MIN;
 800162a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800162c:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 8001630:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001634:	4a68      	ldr	r2, [pc, #416]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8001636:	6013      	str	r3, [r2, #0]
					if(H31 && H32 && H33){
 8001638:	e24e      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
						int H41 = 73*dx0-997*dx1+784222;       H41 = H41<=0;
 800163a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	441a      	add	r2, r3
 8001648:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800164c:	f46f 7179 	mvn.w	r1, #996	; 0x3e4
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	f503 233f 	add.w	r3, r3, #782336	; 0xbf000
 800165a:	f203 735e 	addw	r3, r3, #1886	; 0x75e
 800165e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfd4      	ite	le
 8001666:	2301      	movle	r3, #1
 8001668:	2300      	movgt	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	67bb      	str	r3, [r7, #120]	; 0x78
						int H42 = 1000*dx1-1000000;            H42 = H42<=0;
 800166e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800167e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001682:	677b      	str	r3, [r7, #116]	; 0x74
 8001684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001686:	2b00      	cmp	r3, #0
 8001688:	bfd4      	ite	le
 800168a:	2301      	movle	r3, #1
 800168c:	2300      	movgt	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	677b      	str	r3, [r7, #116]	; 0x74
						int H43 = -1000*dx0;                   H43 = H43<=0;
 8001692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001696:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	673b      	str	r3, [r7, #112]	; 0x70
 800169e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bfd4      	ite	le
 80016a4:	2301      	movle	r3, #1
 80016a6:	2300      	movgt	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	673b      	str	r3, [r7, #112]	; 0x70
						int H44 = 907*dx0-422*dx1-300125;      H44 = H44<=0;
 80016ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016b0:	f240 328b 	movw	r2, #907	; 0x38b
 80016b4:	fb02 f203 	mul.w	r2, r2, r3
 80016b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016bc:	4949      	ldr	r1, [pc, #292]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	f5a3 2392 	sub.w	r3, r3, #299008	; 0x49000
 80016c8:	f2a3 435d 	subw	r3, r3, #1117	; 0x45d
 80016cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bfd4      	ite	le
 80016d4:	2301      	movle	r3, #1
 80016d6:	2300      	movgt	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	66fb      	str	r3, [r7, #108]	; 0x6c
						if(H41 && H42 && H43 && H44){
 80016dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8082 	beq.w	80017e8 <HAL_TIM_PeriodElapsedCallback+0xa18>
 80016e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d07e      	beq.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xa18>
 80016ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d07b      	beq.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xa18>
 80016f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d078      	beq.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xa18>
							n2 = -1233*dx0+574*dx1+408098;
 80016f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016fa:	f46f 629a 	mvn.w	r2, #1232	; 0x4d0
 80016fe:	fb02 f203 	mul.w	r2, r2, r3
 8001702:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001706:	f240 213e 	movw	r1, #574	; 0x23e
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4413      	add	r3, r2
 8001710:	f503 23c7 	add.w	r3, r3, #407552	; 0x63800
 8001714:	f203 2322 	addw	r3, r3, #546	; 0x222
 8001718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
							n3 = -124*dx0+1305*dx1+93435;
 800171c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001720:	4613      	mov	r3, r2
 8001722:	0152      	lsls	r2, r2, #5
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4619      	mov	r1, r3
 800172a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800172e:	f240 5219 	movw	r2, #1305	; 0x519
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	440b      	add	r3, r1
 8001738:	f503 33b6 	add.w	r3, r3, #93184	; 0x16c00
 800173c:	33fb      	adds	r3, #251	; 0xfb
 800173e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
							int u_temp = 1.0614*n2-0.5676*n3+141619;
 8001742:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001746:	f7fe fe91 	bl	800046c <__aeabi_i2d>
 800174a:	a31d      	add	r3, pc, #116	; (adr r3, 80017c0 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fef6 	bl	8000540 <__aeabi_dmul>
 8001754:	4603      	mov	r3, r0
 8001756:	460c      	mov	r4, r1
 8001758:	4625      	mov	r5, r4
 800175a:	461c      	mov	r4, r3
 800175c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001760:	f7fe fe84 	bl	800046c <__aeabi_i2d>
 8001764:	a318      	add	r3, pc, #96	; (adr r3, 80017c8 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe fee9 	bl	8000540 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe fd2b 	bl	80001d0 <__aeabi_dsub>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	4618      	mov	r0, r3
 8001780:	4621      	mov	r1, r4
 8001782:	a30d      	add	r3, pc, #52	; (adr r3, 80017b8 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe fd24 	bl	80001d4 <__adddf3>
 800178c:	4603      	mov	r3, r0
 800178e:	460c      	mov	r4, r1
 8001790:	4618      	mov	r0, r3
 8001792:	4621      	mov	r1, r4
 8001794:	f7ff f8e6 	bl	8000964 <__aeabi_d2iz>
 8001798:	4603      	mov	r3, r0
 800179a:	66bb      	str	r3, [r7, #104]	; 0x68
							u = u_temp+U_MIN;
 800179c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800179e:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 80017a2:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 80017a8:	6013      	str	r3, [r2, #0]
						if(H41 && H42 && H43 && H44){
 80017aa:	e195      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
 80017ac:	f3af 8000 	nop.w
 80017b0:	03afb7e9 	.word	0x03afb7e9
 80017b4:	bfb88ce7 	.word	0xbfb88ce7
 80017b8:	00000000 	.word	0x00000000
 80017bc:	41014998 	.word	0x41014998
 80017c0:	90ff9724 	.word	0x90ff9724
 80017c4:	3ff0fb7e 	.word	0x3ff0fb7e
 80017c8:	79a6b50b 	.word	0x79a6b50b
 80017cc:	3fe229c7 	.word	0x3fe229c7
 80017d0:	2000003c 	.word	0x2000003c
 80017d4:	20000050 	.word	0x20000050
 80017d8:	2000002c 	.word	0x2000002c
 80017dc:	fffffc4c 	.word	0xfffffc4c
 80017e0:	fffffc18 	.word	0xfffffc18
 80017e4:	fffffe5a 	.word	0xfffffe5a
							int H51 = -674*dx0-738*dx1+1106412;     H51 = H51<=0;
 80017e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017ec:	4aa4      	ldr	r2, [pc, #656]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 80017ee:	fb02 f203 	mul.w	r2, r2, r3
 80017f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017f6:	49a3      	ldr	r1, [pc, #652]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 1387 	add.w	r3, r3, #1105920	; 0x10e000
 8001802:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001806:	667b      	str	r3, [r7, #100]	; 0x64
 8001808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800180a:	2b00      	cmp	r3, #0
 800180c:	bfd4      	ite	le
 800180e:	2301      	movle	r3, #1
 8001810:	2300      	movgt	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	667b      	str	r3, [r7, #100]	; 0x64
							int H52 = 1000*dx0-1000000;             H52 = H52<=0;
 8001816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800181a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8001826:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800182a:	663b      	str	r3, [r7, #96]	; 0x60
 800182c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800182e:	2b00      	cmp	r3, #0
 8001830:	bfd4      	ite	le
 8001832:	2301      	movle	r3, #1
 8001834:	2300      	movgt	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	663b      	str	r3, [r7, #96]	; 0x60
							int H53 = 1000*dx1-1000000;             H53 = H53<=0;
 800183a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800183e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800184a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800184e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	2b00      	cmp	r3, #0
 8001854:	bfd4      	ite	le
 8001856:	2301      	movle	r3, #1
 8001858:	2300      	movgt	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	65fb      	str	r3, [r7, #92]	; 0x5c
							int H54 = -544*dx0+839*dx1-311384;      H54 = H54<=0;
 800185e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001862:	4613      	mov	r3, r2
 8001864:	05db      	lsls	r3, r3, #23
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	4619      	mov	r1, r3
 8001870:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001874:	f240 3247 	movw	r2, #839	; 0x347
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	440b      	add	r3, r1
 800187e:	f5a3 2398 	sub.w	r3, r3, #311296	; 0x4c000
 8001882:	3b58      	subs	r3, #88	; 0x58
 8001884:	65bb      	str	r3, [r7, #88]	; 0x58
 8001886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfd4      	ite	le
 800188c:	2301      	movle	r3, #1
 800188e:	2300      	movgt	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	65bb      	str	r3, [r7, #88]	; 0x58
							if(H51 && H52 && H53 && H54){
 8001894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001896:	2b00      	cmp	r3, #0
 8001898:	d060      	beq.n	800195c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 800189a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05d      	beq.n	800195c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 80018a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d05a      	beq.n	800195c <HAL_TIM_PeriodElapsedCallback+0xb8c>
 80018a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d057      	beq.n	800195c <HAL_TIM_PeriodElapsedCallback+0xb8c>
								n1 = 910*dx0-1404*dx1+520906;
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018b0:	f240 328e 	movw	r2, #910	; 0x38e
 80018b4:	fb02 f203 	mul.w	r2, r2, r3
 80018b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018bc:	4972      	ldr	r1, [pc, #456]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 23fe 	add.w	r3, r3, #520192	; 0x7f000
 80018c8:	f203 23ca 	addw	r3, r3, #714	; 0x2ca
 80018cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
								n3 = -679*dx0+2117*dx1-186592;
 80018d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018d4:	4a6d      	ldr	r2, [pc, #436]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 80018d6:	fb02 f203 	mul.w	r2, r2, r3
 80018da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018de:	f640 0145 	movw	r1, #2117	; 0x845
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	f5a3 3336 	sub.w	r3, r3, #186368	; 0x2d800
 80018ec:	3be0      	subs	r3, #224	; 0xe0
 80018ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
								int u_temp = -0.0959*n1-0.5676*n3+141619;
 80018f2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80018f6:	f7fe fdb9 	bl	800046c <__aeabi_i2d>
 80018fa:	a359      	add	r3, pc, #356	; (adr r3, 8001a60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fe1e 	bl	8000540 <__aeabi_dmul>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	4625      	mov	r5, r4
 800190a:	461c      	mov	r4, r3
 800190c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001910:	f7fe fdac 	bl	800046c <__aeabi_i2d>
 8001914:	a354      	add	r3, pc, #336	; (adr r3, 8001a68 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fe11 	bl	8000540 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe fc53 	bl	80001d0 <__aeabi_dsub>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	4618      	mov	r0, r3
 8001930:	4621      	mov	r1, r4
 8001932:	a34f      	add	r3, pc, #316	; (adr r3, 8001a70 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fc4c 	bl	80001d4 <__adddf3>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	4618      	mov	r0, r3
 8001942:	4621      	mov	r1, r4
 8001944:	f7ff f80e 	bl	8000964 <__aeabi_d2iz>
 8001948:	4603      	mov	r3, r0
 800194a:	657b      	str	r3, [r7, #84]	; 0x54
								u = u_temp+U_MIN;
 800194c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194e:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 8001952:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001956:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 8001958:	6013      	str	r3, [r2, #0]
							if(H51 && H52 && H53 && H54){
 800195a:	e0bd      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
								int H61 = 544*dx0-839*dx1+311384;     H61 = H61<=0;
 800195c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	015b      	lsls	r3, r3, #5
 8001968:	4619      	mov	r1, r3
 800196a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800196e:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	440b      	add	r3, r1
 8001976:	f503 2398 	add.w	r3, r3, #311296	; 0x4c000
 800197a:	3358      	adds	r3, #88	; 0x58
 800197c:	653b      	str	r3, [r7, #80]	; 0x50
 800197e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001980:	2b00      	cmp	r3, #0
 8001982:	bfd4      	ite	le
 8001984:	2301      	movle	r3, #1
 8001986:	2300      	movgt	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	653b      	str	r3, [r7, #80]	; 0x50
								int H62 = -907*dx0+422*dx1+300125;    H62 = H62<=0;
 800198c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001990:	4a41      	ldr	r2, [pc, #260]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 8001992:	fb02 f203 	mul.w	r2, r2, r3
 8001996:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800199a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80019a8:	f203 435d 	addw	r3, r3, #1117	; 0x45d
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bfd4      	ite	le
 80019b4:	2301      	movle	r3, #1
 80019b6:	2300      	movgt	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
								int H63 = 1000*dx1-1000000;           H63 = H63<=0;
 80019bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 80019cc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bfd4      	ite	le
 80019d8:	2301      	movle	r3, #1
 80019da:	2300      	movgt	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
								if(H61 && H62 && H63){
 80019e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d05a      	beq.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0xccc>
 80019e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d057      	beq.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0xccc>
 80019ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d054      	beq.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0xccc>
									n3 = -166*dx0+1325*dx1+107379;
 80019f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019f6:	f06f 02a5 	mvn.w	r2, #165	; 0xa5
 80019fa:	fb02 f203 	mul.w	r2, r2, r3
 80019fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a02:	f240 512d 	movw	r1, #1325	; 0x52d
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 33d1 	add.w	r3, r3, #107008	; 0x1a200
 8001a10:	f203 1373 	addw	r3, r3, #371	; 0x173
 8001a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
									int u_temp = -0.5676*n3+141619;
 8001a18:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001a1c:	f7fe fd26 	bl	800046c <__aeabi_i2d>
 8001a20:	a315      	add	r3, pc, #84	; (adr r3, 8001a78 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fd8b 	bl	8000540 <__aeabi_dmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4621      	mov	r1, r4
 8001a32:	a30f      	add	r3, pc, #60	; (adr r3, 8001a70 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fbcc 	bl	80001d4 <__adddf3>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	4618      	mov	r0, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	f7fe ff8e 	bl	8000964 <__aeabi_d2iz>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
									u = u_temp+U_MIN;
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4e:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 8001a52:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 8001a58:	6013      	str	r3, [r2, #0]
								if(H61 && H62 && H63){
 8001a5a:	e03d      	b.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>
 8001a5c:	f3af 8000 	nop.w
 8001a60:	03afb7e9 	.word	0x03afb7e9
 8001a64:	bfb88ce7 	.word	0xbfb88ce7
 8001a68:	79a6b50b 	.word	0x79a6b50b
 8001a6c:	3fe229c7 	.word	0x3fe229c7
 8001a70:	00000000 	.word	0x00000000
 8001a74:	41014998 	.word	0x41014998
 8001a78:	79a6b50b 	.word	0x79a6b50b
 8001a7c:	bfe229c7 	.word	0xbfe229c7
 8001a80:	fffffd5e 	.word	0xfffffd5e
 8001a84:	fffffd1e 	.word	0xfffffd1e
 8001a88:	fffffa84 	.word	0xfffffa84
 8001a8c:	fffffd59 	.word	0xfffffd59
 8001a90:	2000002c 	.word	0x2000002c
 8001a94:	fffffcb9 	.word	0xfffffcb9
 8001a98:	fffffc75 	.word	0xfffffc75
									dx0 = x[0] - xs0;
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0xd78>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2232      	movs	r2, #50	; 0x32
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
									dx1 = x[1] - xs1;
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0xd78>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
									u = -4854*dx0; u += 53*dx1;
 8001ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0xd7c>)
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ac8:	2235      	movs	r2, #53	; 0x35
 8001aca:	fb02 f203 	mul.w	r2, r2, r3
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001ad6:	6013      	str	r3, [r2, #0]
			u += us;  u /= 1000;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001aea:	fb82 1203 	smull	r1, r2, r2, r3
 8001aee:	1192      	asrs	r2, r2, #6
 8001af0:	17db      	asrs	r3, r3, #31
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001af6:	6013      	str	r3, [r2, #0]
			int input = u*COUNTER_PERIOD/1000;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	01da      	lsls	r2, r3, #7
 8001b04:	4413      	add	r3, r2
 8001b06:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001b08:	fb82 1203 	smull	r1, r2, r2, r3
 8001b0c:	1192      	asrs	r2, r2, #6
 8001b0e:	17db      	asrs	r3, r3, #31
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			if(input < 0) input = 0;
 8001b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da02      	bge.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0xd54>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			if(input > COUNTER_PERIOD) input = COUNTER_PERIOD;
 8001b24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b28:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b2c:	db03      	blt.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0xd66>
 8001b2e:	f640 739f 	movw	r3, #3999	; 0xf9f
 8001b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			htim2.Instance->CCR2 = input;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b40:	bf00      	nop
 8001b42:	37f4      	adds	r7, #244	; 0xf4
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b48:	20000034 	.word	0x20000034
 8001b4c:	ffffed0a 	.word	0xffffed0a
 8001b50:	2000002c 	.word	0x2000002c
 8001b54:	000527ec 	.word	0x000527ec
 8001b58:	10624dd3 	.word	0x10624dd3
 8001b5c:	200001d4 	.word	0x200001d4

08001b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b64:	f000 fdfc 	bl	8002760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b68:	f000 f83c 	bl	8001be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6c:	f000 fade 	bl	800212c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b70:	f000 fab6 	bl	80020e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b74:	f000 fa84 	bl	8002080 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b78:	f000 f8bc 	bl	8001cf4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b7c:	f000 f934 	bl	8001de8 <MX_ADC2_Init>
  MX_DAC1_Init();
 8001b80:	f000 f998 	bl	8001eb4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001b84:	f000 f9d4 	bl	8001f30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b88:	f000 fa2c 	bl	8001fe4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <main+0x68>)
 8001b90:	f002 f8c5 	bl	8003d1e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001b94:	2110      	movs	r1, #16
 8001b96:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <main+0x68>)
 8001b98:	f002 f8c1 	bl	8003d1e <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	490b      	ldr	r1, [pc, #44]	; (8001bcc <main+0x6c>)
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <main+0x70>)
 8001ba2:	f001 f993 	bl	8002ecc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <main+0x74>)
 8001baa:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <main+0x78>)
 8001bac:	f001 f98e 	bl	8002ecc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8001bb0:	480a      	ldr	r0, [pc, #40]	; (8001bdc <main+0x7c>)
 8001bb2:	f004 f8fd 	bl	8005db0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	4809      	ldr	r0, [pc, #36]	; (8001be0 <main+0x80>)
 8001bba:	f004 f94f 	bl	8005e5c <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <main+0x80>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <main+0x66>
 8001bc8:	20000060 	.word	0x20000060
 8001bcc:	200002dc 	.word	0x200002dc
 8001bd0:	20000074 	.word	0x20000074
 8001bd4:	20000118 	.word	0x20000118
 8001bd8:	20000128 	.word	0x20000128
 8001bdc:	200000d8 	.word	0x200000d8
 8001be0:	200001d4 	.word	0x200001d4

08001be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0b8      	sub	sp, #224	; 0xe0
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bee:	2244      	movs	r2, #68	; 0x44
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 fec0 	bl	8007978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2288      	movs	r2, #136	; 0x88
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 feb2 	bl	8007978 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c22:	2310      	movs	r3, #16
 8001c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c40:	2307      	movs	r3, #7
 8001c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 fde4 	bl	8004824 <HAL_RCC_OscConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c62:	f000 facd 	bl	8002200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c66:	230f      	movs	r3, #15
 8001c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c88:	2104      	movs	r1, #4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 f9b0 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001c96:	f000 fab3 	bl	8002200 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001c9a:	f244 0302 	movw	r3, #16386	; 0x4002
 8001c9e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ca8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001caa:	2302      	movs	r3, #2
 8001cac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fb94 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001cd6:	f000 fa93 	bl	8002200 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cde:	f002 fd4b 	bl	8004778 <HAL_PWREx_ControlVoltageScaling>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001ce8:	f000 fa8a 	bl	8002200 <Error_Handler>
  }
}
 8001cec:	bf00      	nop
 8001cee:	37e0      	adds	r7, #224	; 0xe0
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <MX_ADC1_Init+0xec>)
 8001d1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d28:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d36:	2204      	movs	r2, #4
 8001d38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d7c:	4817      	ldr	r0, [pc, #92]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d7e:	f000 ff51 	bl	8002c24 <HAL_ADC_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001d88:	f000 fa3a 	bl	8002200 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4811      	ldr	r0, [pc, #68]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d98:	f001 fde2 	bl	8003960 <HAL_ADCEx_MultiModeConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001da2:	f000 fa2d 	bl	8002200 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <MX_ADC1_Init+0xf0>)
 8001da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001daa:	2306      	movs	r3, #6
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001dae:	2305      	movs	r3, #5
 8001db0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001db2:	237f      	movs	r3, #127	; 0x7f
 8001db4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001db6:	2304      	movs	r3, #4
 8001db8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001dc4:	f001 f954 	bl	8003070 <HAL_ADC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001dce:	f000 fa17 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000128 	.word	0x20000128
 8001de0:	50040000 	.word	0x50040000
 8001de4:	14f00020 	.word	0x14f00020

08001de8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dee:	463b      	mov	r3, r7
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e00:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <MX_ADC2_Init+0xc4>)
 8001e02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e0a:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e1e:	2204      	movs	r2, #4
 8001e20:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e66:	f000 fedd 	bl	8002c24 <HAL_ADC_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001e70:	f000 f9c6 	bl	8002200 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_ADC2_Init+0xc8>)
 8001e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e78:	2306      	movs	r3, #6
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e80:	237f      	movs	r3, #127	; 0x7f
 8001e82:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e84:	2304      	movs	r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_ADC2_Init+0xc0>)
 8001e92:	f001 f8ed 	bl	8003070 <HAL_ADC_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001e9c:	f000 f9b0 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000074 	.word	0x20000074
 8001eac:	50040100 	.word	0x50040100
 8001eb0:	19200040 	.word	0x19200040

08001eb4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2224      	movs	r2, #36	; 0x24
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f005 fd59 	bl	8007978 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_DAC1_Init+0x74>)
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <MX_DAC1_Init+0x78>)
 8001eca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ecc:	4816      	ldr	r0, [pc, #88]	; (8001f28 <MX_DAC1_Init+0x74>)
 8001ece:	f001 ff04 	bl	8003cda <HAL_DAC_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001ed8:	f000 f992 	bl	8002200 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_DAC1_Init+0x74>)
 8001ef8:	f001 ff5e 	bl	8003db8 <HAL_DAC_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001f02:	f000 f97d 	bl	8002200 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_DAC1_Init+0x74>)
 8001f12:	f001 ff51 	bl	8003db8 <HAL_DAC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001f1c:	f000 f970 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000060 	.word	0x20000060
 8001f2c:	40007400 	.word	0x40007400

08001f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f42:	463b      	mov	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	615a      	str	r2, [r3, #20]
 8001f52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f6a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f7c:	4818      	ldr	r0, [pc, #96]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f7e:	f003 ff41 	bl	8005e04 <HAL_TIM_PWM_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001f88:	f000 f93a 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001f9c:	f004 ff00 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001fa6:	f000 f92b 	bl	8002200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001faa:	2360      	movs	r3, #96	; 0x60
 8001fac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001fc2:	f004 f8c3 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001fcc:	f000 f918 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fd0:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <MX_TIM2_Init+0xb0>)
 8001fd2:	f000 faa1 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200001d4 	.word	0x200001d4

08001fe4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <MX_TIM3_Init+0x94>)
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <MX_TIM3_Init+0x98>)
 8002006:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MX_TIM3_Init+0x94>)
 800200a:	224f      	movs	r2, #79	; 0x4f
 800200c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_TIM3_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_TIM3_Init+0x94>)
 8002016:	2263      	movs	r2, #99	; 0x63
 8002018:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <MX_TIM3_Init+0x94>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_TIM3_Init+0x94>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002026:	4814      	ldr	r0, [pc, #80]	; (8002078 <MX_TIM3_Init+0x94>)
 8002028:	f003 fe96 	bl	8005d58 <HAL_TIM_Base_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002032:	f000 f8e5 	bl	8002200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4619      	mov	r1, r3
 8002042:	480d      	ldr	r0, [pc, #52]	; (8002078 <MX_TIM3_Init+0x94>)
 8002044:	f004 f99a 	bl	800637c <HAL_TIM_ConfigClockSource>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800204e:	f000 f8d7 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <MX_TIM3_Init+0x94>)
 8002060:	f004 fe9e 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800206a:	f000 f8c9 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000d8 	.word	0x200000d8
 800207c:	40000400 	.word	0x40000400

08002080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART2_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 800208c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART2_UART_Init+0x58>)
 80020c4:	f004 ff12 	bl	8006eec <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f000 f897 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000214 	.word	0x20000214
 80020dc:	40004400 	.word	0x40004400

080020e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_DMA_Init+0x48>)
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <MX_DMA_Init+0x48>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6493      	str	r3, [r2, #72]	; 0x48
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <MX_DMA_Init+0x48>)
 80020f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	200b      	movs	r0, #11
 8002104:	f001 fdb3 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002108:	200b      	movs	r0, #11
 800210a:	f001 fdcc 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	200c      	movs	r0, #12
 8002114:	f001 fdab 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002118:	200c      	movs	r0, #12
 800211a:	f001 fdc4 	bl	8003ca6 <HAL_NVIC_EnableIRQ>

}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <MX_GPIO_Init+0xc8>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_GPIO_Init+0xc8>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <MX_GPIO_Init+0xc8>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f002 fabe 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_GPIO_Init+0xcc>)
 80021b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_GPIO_Init+0xd0>)
 80021c6:	f002 f909 	bl	80043dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e6:	f002 f8f9 	bl	80043dc <HAL_GPIO_Init>

}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	10210000 	.word	0x10210000
 80021fc:	48000800 	.word	0x48000800

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_MspInit+0x44>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_MspInit+0x44>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6613      	str	r3, [r2, #96]	; 0x60
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <HAL_MspInit+0x44>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_MspInit+0x44>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_MspInit+0x44>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_MspInit+0x44>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a5f      	ldr	r2, [pc, #380]	; (80023f4 <HAL_ADC_MspInit+0x19c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d159      	bne.n	800232e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800227a:	4b5f      	ldr	r3, [pc, #380]	; (80023f8 <HAL_ADC_MspInit+0x1a0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	4a5d      	ldr	r2, [pc, #372]	; (80023f8 <HAL_ADC_MspInit+0x1a0>)
 8002282:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002284:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <HAL_ADC_MspInit+0x1a0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10b      	bne.n	80022a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800228c:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	4a5a      	ldr	r2, [pc, #360]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 8002292:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002298:	4b58      	ldr	r3, [pc, #352]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 800229a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	4b55      	ldr	r3, [pc, #340]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	4a54      	ldr	r2, [pc, #336]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b0:	4b52      	ldr	r3, [pc, #328]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022bc:	2301      	movs	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022c0:	230b      	movs	r3, #11
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f002 f883 	bl	80043dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 80022d8:	4a4a      	ldr	r2, [pc, #296]	; (8002404 <HAL_ADC_MspInit+0x1ac>)
 80022da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022dc:	4b48      	ldr	r3, [pc, #288]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e8:	4b45      	ldr	r3, [pc, #276]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022ee:	4b44      	ldr	r3, [pc, #272]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022f4:	4b42      	ldr	r3, [pc, #264]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 80022f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 80022fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002302:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 8002306:	2220      	movs	r2, #32
 8002308:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002310:	483b      	ldr	r0, [pc, #236]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 8002312:	f001 fe6b 	bl	8003fec <HAL_DMA_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800231c:	f7ff ff70 	bl	8002200 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a37      	ldr	r2, [pc, #220]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 8002324:	64da      	str	r2, [r3, #76]	; 0x4c
 8002326:	4a36      	ldr	r2, [pc, #216]	; (8002400 <HAL_ADC_MspInit+0x1a8>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800232c:	e05d      	b.n	80023ea <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_ADC_MspInit+0x1b0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d158      	bne.n	80023ea <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_ADC_MspInit+0x1a0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_ADC_MspInit+0x1a0>)
 8002340:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_ADC_MspInit+0x1a0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10b      	bne.n	8002362 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 8002350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236e:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_ADC_MspInit+0x1a4>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800237a:	2302      	movs	r3, #2
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800237e:	230b      	movs	r3, #11
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f002 f824 	bl	80043dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 8002396:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_ADC_MspInit+0x1b8>)
 8002398:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023c4:	2220      	movs	r2, #32
 80023c6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80023ce:	480f      	ldr	r0, [pc, #60]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023d0:	f001 fe0c 	bl	8003fec <HAL_DMA_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80023da:	f7ff ff11 	bl	8002200 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_ADC_MspInit+0x1b4>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80023ea:	bf00      	nop
 80023ec:	3730      	adds	r7, #48	; 0x30
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	50040000 	.word	0x50040000
 80023f8:	2000005c 	.word	0x2000005c
 80023fc:	40021000 	.word	0x40021000
 8002400:	2000018c 	.word	0x2000018c
 8002404:	40020008 	.word	0x40020008
 8002408:	50040100 	.word	0x50040100
 800240c:	20000294 	.word	0x20000294
 8002410:	4002001c 	.word	0x4002001c

08002414 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a15      	ldr	r2, [pc, #84]	; (8002488 <HAL_DAC_MspInit+0x74>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d124      	bne.n	8002480 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_DAC_MspInit+0x78>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4a14      	ldr	r2, [pc, #80]	; (800248c <HAL_DAC_MspInit+0x78>)
 800243c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_DAC_MspInit+0x78>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_DAC_MspInit+0x78>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_DAC_MspInit+0x78>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_DAC_MspInit+0x78>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002466:	2330      	movs	r3, #48	; 0x30
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246a:	2303      	movs	r3, #3
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247c:	f001 ffae 	bl	80043dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002480:	bf00      	nop
 8002482:	3728      	adds	r7, #40	; 0x28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40007400 	.word	0x40007400
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d10b      	bne.n	80024ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_TIM_PWM_MspInit+0x38>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_TIM_PWM_MspInit+0x38>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_TIM_PWM_MspInit+0x38>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_TIM_Base_MspInit+0x44>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d113      	bne.n	8002506 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_TIM_Base_MspInit+0x48>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_TIM_Base_MspInit+0x48>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_TIM_Base_MspInit+0x48>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	201d      	movs	r0, #29
 80024fc:	f001 fbb7 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002500:	201d      	movs	r0, #29
 8002502:	f001 fbd0 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40000400 	.word	0x40000400
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d11b      	bne.n	8002572 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_TIM_MspPostInit+0x64>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	4a0f      	ldr	r2, [pc, #60]	; (800257c <HAL_TIM_MspPostInit+0x64>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_TIM_MspPostInit+0x64>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002552:	2308      	movs	r3, #8
 8002554:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002562:	2301      	movs	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <HAL_TIM_MspPostInit+0x68>)
 800256e:	f001 ff35 	bl	80043dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002572:	bf00      	nop
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	48000400 	.word	0x48000400

08002584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_UART_MspInit+0x7c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d128      	bne.n	80025f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_UART_MspInit+0x80>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_UART_MspInit+0x80>)
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	6593      	str	r3, [r2, #88]	; 0x58
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_UART_MspInit+0x80>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_UART_MspInit+0x80>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_UART_MspInit+0x80>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_UART_MspInit+0x80>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025d6:	230c      	movs	r3, #12
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e6:	2307      	movs	r3, #7
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f4:	f001 fef2 	bl	80043dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40004400 	.word	0x40004400
 8002604:	40021000 	.word	0x40021000

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <MemManage_Handler+0x4>

08002622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler+0x4>

0800262e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f000 f8da 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <DMA1_Channel1_IRQHandler+0x10>)
 800266a:	f001 fdd7 	bl	800421c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000018c 	.word	0x2000018c

08002678 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <DMA1_Channel2_IRQHandler+0x10>)
 800267e:	f001 fdcd 	bl	800421c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000294 	.word	0x20000294

0800268c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <TIM3_IRQHandler+0x10>)
 8002692:	f003 fc3b 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200000d8 	.word	0x200000d8

080026a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <SystemInit+0x64>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <SystemInit+0x64>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <SystemInit+0x68>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <SystemInit+0x68>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <SystemInit+0x68>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <SystemInit+0x68>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <SystemInit+0x68>)
 80026cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <SystemInit+0x68>)
 80026d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <SystemInit+0x68>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <SystemInit+0x68>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <SystemInit+0x68>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <SystemInit+0x64>)
 80026f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f6:	609a      	str	r2, [r3, #8]
#endif
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00
 8002708:	40021000 	.word	0x40021000

0800270c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800270c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002744 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002710:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002712:	e003      	b.n	800271c <LoopCopyDataInit>

08002714 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002716:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002718:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800271a:	3104      	adds	r1, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <LoopForever+0xa>)
	ldr	r3, =_edata
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002720:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002722:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002724:	d3f6      	bcc.n	8002714 <CopyDataInit>
	ldr	r2, =_sbss
 8002726:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002728:	e002      	b.n	8002730 <LoopFillZerobss>

0800272a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800272a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800272c:	f842 3b04 	str.w	r3, [r2], #4

08002730 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <LoopForever+0x16>)
	cmp	r2, r3
 8002732:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002734:	d3f9      	bcc.n	800272a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002736:	f7ff ffb3 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273a:	f005 f8f9 	bl	8007930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800273e:	f7ff fa0f 	bl	8001b60 <main>

08002742 <LoopForever>:

LoopForever:
    b LoopForever
 8002742:	e7fe      	b.n	8002742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002744:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002748:	080079f8 	.word	0x080079f8
	ldr	r0, =_sdata
 800274c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002750:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002754:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002758:	200002f0 	.word	0x200002f0

0800275c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC1_2_IRQHandler>
	...

08002760 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_Init+0x3c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_Init+0x3c>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002776:	2003      	movs	r0, #3
 8002778:	f001 fa6e 	bl	8003c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277c:	2000      	movs	r0, #0
 800277e:	f000 f80f 	bl	80027a0 <HAL_InitTick>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	71fb      	strb	r3, [r7, #7]
 800278c:	e001      	b.n	8002792 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800278e:	f7ff fd3f 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002792:	79fb      	ldrb	r3, [r7, #7]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_InitTick+0x68>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d022      	beq.n	80027fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_InitTick+0x6c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_InitTick+0x68>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 fa7a 	bl	8003cc2 <HAL_SYSTICK_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	d809      	bhi.n	80027ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027da:	2200      	movs	r2, #0
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	f04f 30ff 	mov.w	r0, #4294967295
 80027e2:	f001 fa44 	bl	8003c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_InitTick+0x70>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e007      	b.n	80027fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e004      	b.n	80027fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e001      	b.n	80027fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000008 	.word	0x20000008
 800280c:	20000000 	.word	0x20000000
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_IncTick+0x1c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_IncTick+0x20>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4413      	add	r3, r2
 8002822:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_IncTick+0x1c>)
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	200002ec 	.word	0x200002ec
 8002834:	20000008 	.word	0x20000008

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_GetTick+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	200002ec 	.word	0x200002ec

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffee 	bl	8002838 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d004      	beq.n	8002874 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_Delay+0x40>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002874:	bf00      	nop
 8002876:	f7ff ffdf 	bl	8002838 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	d8f7      	bhi.n	8002876 <HAL_Delay+0x26>
  {
  }
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000008 	.word	0x20000008

08002894 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028fc:	b490      	push	{r4, r7}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3360      	adds	r3, #96	; 0x60
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <LL_ADC_SetOffset+0x40>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	4313      	orrs	r3, r2
 800292a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800292e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bc90      	pop	{r4, r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	03fff000 	.word	0x03fff000

08002940 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002940:	b490      	push	{r4, r7}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	461a      	mov	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bc90      	pop	{r4, r7}
 8002966:	4770      	bx	lr

08002968 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002968:	b490      	push	{r4, r7}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3360      	adds	r3, #96	; 0x60
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4313      	orrs	r3, r2
 800298c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bc90      	pop	{r4, r7}
 8002996:	4770      	bx	lr

08002998 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029be:	b490      	push	{r4, r7}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3330      	adds	r3, #48	; 0x30
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	4413      	add	r3, r2
 80029dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	211f      	movs	r1, #31
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 011f 	and.w	r1, r3, #31
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc90      	pop	{r4, r7}
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a10:	b490      	push	{r4, r7}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3314      	adds	r3, #20
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0e5b      	lsrs	r3, r3, #25
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	0d1b      	lsrs	r3, r3, #20
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2107      	movs	r1, #7
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	401a      	ands	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	0d1b      	lsrs	r3, r3, #20
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc90      	pop	{r4, r7}
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0318 	and.w	r3, r3, #24
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a84:	40d9      	lsrs	r1, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	400b      	ands	r3, r1
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	0007ffff 	.word	0x0007ffff

08002aa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6093      	str	r3, [r2, #8]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afc:	d101      	bne.n	8002b02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4c:	d101      	bne.n	8002b52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <LL_ADC_IsEnabled+0x18>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <LL_ADC_IsEnabled+0x1a>
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc2:	f043 0204 	orr.w	r2, r3, #4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d101      	bne.n	8002bee <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d101      	bne.n	8002c14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e134      	b.n	8002ea8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fb03 	bl	8002258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff3f 	bl	8002ae8 <LL_ADC_IsDeepPowerDownEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff25 	bl	8002ac4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff5a 	bl	8002b38 <LL_ADC_IsInternalRegulatorEnabled>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d113      	bne.n	8002cb2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff3e 	bl	8002b10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c94:	4b86      	ldr	r3, [pc, #536]	; (8002eb0 <HAL_ADC_Init+0x28c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	4a86      	ldr	r2, [pc, #536]	; (8002eb4 <HAL_ADC_Init+0x290>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff3e 	bl	8002b38 <LL_ADC_IsInternalRegulatorEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff77 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80cf 	bne.w	8002e96 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80cb 	bne.w	8002e96 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff37 	bl	8002b88 <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d115      	bne.n	8002d4c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d20:	4865      	ldr	r0, [pc, #404]	; (8002eb8 <HAL_ADC_Init+0x294>)
 8002d22:	f7ff ff31 	bl	8002b88 <LL_ADC_IsEnabled>
 8002d26:	4604      	mov	r4, r0
 8002d28:	4864      	ldr	r0, [pc, #400]	; (8002ebc <HAL_ADC_Init+0x298>)
 8002d2a:	f7ff ff2d 	bl	8002b88 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	431c      	orrs	r4, r3
 8002d32:	4863      	ldr	r0, [pc, #396]	; (8002ec0 <HAL_ADC_Init+0x29c>)
 8002d34:	f7ff ff28 	bl	8002b88 <LL_ADC_IsEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4323      	orrs	r3, r4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4619      	mov	r1, r3
 8002d46:	485f      	ldr	r0, [pc, #380]	; (8002ec4 <HAL_ADC_Init+0x2a0>)
 8002d48:	f7ff fda4 	bl	8002894 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e5b      	ldrb	r3, [r3, #25]
 8002d50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	045b      	lsls	r3, r3, #17
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_ADC_Init+0x2a4>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff0a 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8002dc2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff17 	bl	8002bfc <LL_ADC_INJ_IsConversionOngoing>
 8002dce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d13d      	bne.n	8002e52 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d13a      	bne.n	8002e52 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df8:	f023 0302 	bic.w	r3, r3, #2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	430b      	orrs	r3, r1
 8002e04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d118      	bne.n	8002e42 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e32:	430a      	orrs	r2, r1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	611a      	str	r2, [r3, #16]
 8002e40:	e007      	b.n	8002e52 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10c      	bne.n	8002e74 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	f023 010f 	bic.w	r1, r3, #15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
 8002e72:	e007      	b.n	8002e84 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020f 	bic.w	r2, r2, #15
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
 8002e94:	e007      	b.n	8002ea6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3724      	adds	r7, #36	; 0x24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	053e2d63 	.word	0x053e2d63
 8002eb8:	50040000 	.word	0x50040000
 8002ebc:	50040100 	.word	0x50040100
 8002ec0:	50040200 	.word	0x50040200
 8002ec4:	50040300 	.word	0x50040300
 8002ec8:	fff0c007 	.word	0xfff0c007

08002ecc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed8:	4850      	ldr	r0, [pc, #320]	; (800301c <HAL_ADC_Start_DMA+0x150>)
 8002eda:	f7ff fde5 	bl	8002aa8 <LL_ADC_GetMultimode>
 8002ede:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fe76 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 808e 	bne.w	800300e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x34>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e089      	b.n	8003014 <HAL_ADC_Start_DMA+0x148>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d002      	beq.n	8002f1a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	d172      	bne.n	8003000 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fc0c 	bl	8003738 <ADC_Enable>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d165      	bne.n	8002ff6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a37      	ldr	r2, [pc, #220]	; (8003020 <HAL_ADC_Start_DMA+0x154>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d002      	beq.n	8002f4e <HAL_ADC_Start_DMA+0x82>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	e000      	b.n	8002f50 <HAL_ADC_Start_DMA+0x84>
 8002f4e:	4b35      	ldr	r3, [pc, #212]	; (8003024 <HAL_ADC_Start_DMA+0x158>)
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d002      	beq.n	8002f5e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f023 0206 	bic.w	r2, r3, #6
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	659a      	str	r2, [r3, #88]	; 0x58
 8002f82:	e002      	b.n	8002f8a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <HAL_ADC_Start_DMA+0x15c>)
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	4a25      	ldr	r2, [pc, #148]	; (800302c <HAL_ADC_Start_DMA+0x160>)
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_ADC_Start_DMA+0x164>)
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	221c      	movs	r2, #28
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0210 	orr.w	r2, r2, #16
 8002fc0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3340      	adds	r3, #64	; 0x40
 8002fdc:	4619      	mov	r1, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f001 f8bb 	bl	800415c <HAL_DMA_Start_IT>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fddd 	bl	8002bae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ff4:	e00d      	b.n	8003012 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002ffe:	e008      	b.n	8003012 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800300c:	e001      	b.n	8003012 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800300e:	2302      	movs	r3, #2
 8003010:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	50040300 	.word	0x50040300
 8003020:	50040100 	.word	0x50040100
 8003024:	50040000 	.word	0x50040000
 8003028:	080037ed 	.word	0x080037ed
 800302c:	080038c5 	.word	0x080038c5
 8003030:	080038e1 	.word	0x080038e1

08003034 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0a6      	sub	sp, #152	; 0x98
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x22>
 800308e:	2302      	movs	r3, #2
 8003090:	e348      	b.n	8003724 <HAL_ADC_ConfigChannel+0x6b4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fd99 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 8329 	bne.w	80036fe <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d824      	bhi.n	80030fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	3b02      	subs	r3, #2
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d81b      	bhi.n	80030f6 <HAL_ADC_ConfigChannel+0x86>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_ADC_ConfigChannel+0x54>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030d5 	.word	0x080030d5
 80030c8:	080030dd 	.word	0x080030dd
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030ed 	.word	0x080030ed
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	220c      	movs	r2, #12
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e011      	b.n	8003100 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2212      	movs	r2, #18
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e00d      	b.n	8003100 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2218      	movs	r2, #24
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	e009      	b.n	8003100 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	e004      	b.n	8003100 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2206      	movs	r2, #6
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	e000      	b.n	8003100 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80030fe:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	f7ff fc56 	bl	80029be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fd5d 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 800311c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fd69 	bl	8002bfc <LL_ADC_INJ_IsConversionOngoing>
 800312a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800312e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 8148 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 8143 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	461a      	mov	r2, r3
 8003150:	f7ff fc5e 	bl	8002a10 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	08db      	lsrs	r3, r3, #3
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d00a      	beq.n	800318c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6919      	ldr	r1, [r3, #16]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003186:	f7ff fbb9 	bl	80028fc <LL_ADC_SetOffset>
 800318a:	e11d      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fbd4 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x148>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fbc9 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	f003 021f 	and.w	r2, r3, #31
 80031b6:	e012      	b.n	80031de <HAL_ADC_ConfigChannel+0x16e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fbbe 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d105      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x186>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	e00a      	b.n	800320c <HAL_ADC_ConfigChannel+0x19c>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8003204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	429a      	cmp	r2, r3
 800320e:	d106      	bne.n	800321e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fba5 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fb8b 	bl	8002940 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <HAL_ADC_ConfigChannel+0x1da>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fb80 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	e010      	b.n	800326c <HAL_ADC_ConfigChannel+0x1fc>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fb75 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x214>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0e9b      	lsrs	r3, r3, #26
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	e00a      	b.n	800329a <HAL_ADC_ConfigChannel+0x22a>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	429a      	cmp	r2, r3
 800329c:	d106      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fb5e 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2102      	movs	r1, #2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fb44 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x268>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fb39 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 021f 	and.w	r2, r3, #31
 80032d6:	e010      	b.n	80032fa <HAL_ADC_ConfigChannel+0x28a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fb2e 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80032f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x2a2>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	e00a      	b.n	8003328 <HAL_ADC_ConfigChannel+0x2b8>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	2102      	movs	r1, #2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fb17 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2103      	movs	r1, #3
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fafd 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x2f6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2103      	movs	r1, #3
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff faf2 	bl	8002940 <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	e010      	b.n	8003388 <HAL_ADC_ConfigChannel+0x318>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2103      	movs	r1, #3
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fae7 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x330>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	e00a      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x346>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80033ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d106      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	2103      	movs	r1, #3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fad0 	bl	8002968 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fbdb 	bl	8002b88 <LL_ADC_IsEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 810c 	bne.w	80035f2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7ff fb3a 	bl	8002a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4aad      	ldr	r2, [pc, #692]	; (80036a8 <HAL_ADC_ConfigChannel+0x638>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f040 80fd 	bne.w	80035f2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x3b0>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	3301      	adds	r3, #1
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2b09      	cmp	r3, #9
 8003416:	bf94      	ite	ls
 8003418:	2301      	movls	r3, #1
 800341a:	2300      	movhi	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e012      	b.n	8003446 <HAL_ADC_ConfigChannel+0x3d6>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800342e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2b09      	cmp	r3, #9
 800343e:	bf94      	ite	ls
 8003440:	2301      	movls	r3, #1
 8003442:	2300      	movhi	r3, #0
 8003444:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003446:	2b00      	cmp	r3, #0
 8003448:	d064      	beq.n	8003514 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x3f6>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0e9b      	lsrs	r3, r3, #26
 800345c:	3301      	adds	r3, #1
 800345e:	069b      	lsls	r3, r3, #26
 8003460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003464:	e00e      	b.n	8003484 <HAL_ADC_ConfigChannel+0x414>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	069b      	lsls	r3, r3, #26
 8003480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x434>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	3301      	adds	r3, #1
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	e010      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x456>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	ea42 0103 	orr.w	r1, r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x47c>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 021f 	and.w	r2, r3, #31
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	051b      	lsls	r3, r3, #20
 80034ea:	e011      	b.n	8003510 <HAL_ADC_ConfigChannel+0x4a0>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003510:	430b      	orrs	r3, r1
 8003512:	e069      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x4c0>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0e9b      	lsrs	r3, r3, #26
 8003526:	3301      	adds	r3, #1
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352e:	e00e      	b.n	800354e <HAL_ADC_ConfigChannel+0x4de>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	61fb      	str	r3, [r7, #28]
  return result;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	069b      	lsls	r3, r3, #26
 800354a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_ADC_ConfigChannel+0x4fe>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0e9b      	lsrs	r3, r3, #26
 8003560:	3301      	adds	r3, #1
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	e010      	b.n	8003590 <HAL_ADC_ConfigChannel+0x520>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	617b      	str	r3, [r7, #20]
  return result;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	ea42 0103 	orr.w	r1, r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x54c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	3301      	adds	r3, #1
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	3b1e      	subs	r3, #30
 80035b4:	051b      	lsls	r3, r3, #20
 80035b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035ba:	e014      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x576>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	60fb      	str	r3, [r7, #12]
  return result;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	f003 021f 	and.w	r2, r3, #31
 80035d8:	4613      	mov	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	3b1e      	subs	r3, #30
 80035e0:	051b      	lsls	r3, r3, #20
 80035e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e6:	430b      	orrs	r3, r1
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	6892      	ldr	r2, [r2, #8]
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7ff fa0f 	bl	8002a10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_ADC_ConfigChannel+0x63c>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 808c 	beq.w	8003718 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003600:	482b      	ldr	r0, [pc, #172]	; (80036b0 <HAL_ADC_ConfigChannel+0x640>)
 8003602:	f7ff f96d 	bl	80028e0 <LL_ADC_GetCommonPathInternalCh>
 8003606:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <HAL_ADC_ConfigChannel+0x644>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d12b      	bne.n	800366c <HAL_ADC_ConfigChannel+0x5fc>
 8003614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d125      	bne.n	800366c <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <HAL_ADC_ConfigChannel+0x648>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_ADC_ConfigChannel+0x5c4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_ADC_ConfigChannel+0x64c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d16e      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003638:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800363c:	4619      	mov	r1, r3
 800363e:	481c      	ldr	r0, [pc, #112]	; (80036b0 <HAL_ADC_ConfigChannel+0x640>)
 8003640:	f7ff f93b 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003644:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_ADC_ConfigChannel+0x650>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_ADC_ConfigChannel+0x654>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	099a      	lsrs	r2, r3, #6
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800365c:	e002      	b.n	8003664 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3b01      	subs	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f9      	bne.n	800365e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800366a:	e052      	b.n	8003712 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <HAL_ADC_ConfigChannel+0x658>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12a      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x65c>
 8003676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d124      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a0c      	ldr	r2, [pc, #48]	; (80036b8 <HAL_ADC_ConfigChannel+0x648>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x626>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <HAL_ADC_ConfigChannel+0x64c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d13f      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800369a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800369e:	4619      	mov	r1, r3
 80036a0:	4803      	ldr	r0, [pc, #12]	; (80036b0 <HAL_ADC_ConfigChannel+0x640>)
 80036a2:	f7ff f90a 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036a6:	e036      	b.n	8003716 <HAL_ADC_ConfigChannel+0x6a6>
 80036a8:	407f0000 	.word	0x407f0000
 80036ac:	80080000 	.word	0x80080000
 80036b0:	50040300 	.word	0x50040300
 80036b4:	c7520000 	.word	0xc7520000
 80036b8:	50040000 	.word	0x50040000
 80036bc:	50040200 	.word	0x50040200
 80036c0:	20000000 	.word	0x20000000
 80036c4:	053e2d63 	.word	0x053e2d63
 80036c8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_ADC_ConfigChannel+0x6bc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d120      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_ADC_ConfigChannel+0x6c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d115      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036f4:	4619      	mov	r1, r3
 80036f6:	480f      	ldr	r0, [pc, #60]	; (8003734 <HAL_ADC_ConfigChannel+0x6c4>)
 80036f8:	f7ff f8df 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
 80036fc:	e00c      	b.n	8003718 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003710:	e002      	b.n	8003718 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003716:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003720:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003724:	4618      	mov	r0, r3
 8003726:	3798      	adds	r7, #152	; 0x98
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	80000001 	.word	0x80000001
 8003730:	50040000 	.word	0x50040000
 8003734:	50040300 	.word	0x50040300

08003738 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fa1f 	bl	8002b88 <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d146      	bne.n	80037de <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <ADC_Enable+0xb0>)
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	f043 0210 	orr.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	f043 0201 	orr.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e032      	b.n	80037e0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f9ee 	bl	8002b60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003784:	f7ff f858 	bl	8002838 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800378a:	e021      	b.n	80037d0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f9f9 	bl	8002b88 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff f9dd 	bl	8002b60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037a6:	f7ff f847 	bl	8002838 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d90d      	bls.n	80037d0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f043 0210 	orr.w	r2, r3, #16
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d1d6      	bne.n	800378c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	8000003f 	.word	0x8000003f

080037ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003802:	2b00      	cmp	r3, #0
 8003804:	d14b      	bne.n	800389e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d021      	beq.n	8003864 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f8b7 	bl	8002998 <LL_ADC_REG_IsTriggerSourceSWStart>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d032      	beq.n	8003896 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d12b      	bne.n	8003896 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11f      	bne.n	8003896 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
 8003862:	e018      	b.n	8003896 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d111      	bne.n	8003896 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	f043 0201 	orr.w	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7ff fbcc 	bl	8003034 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800389c:	e00e      	b.n	80038bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7ff fbd6 	bl	800305c <HAL_ADC_ErrorCallback>
}
 80038b0:	e004      	b.n	80038bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fbb8 	bl	8003048 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff fba8 	bl	800305c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <LL_ADC_IsEnabled>:
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <LL_ADC_IsEnabled+0x18>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <LL_ADC_IsEnabled+0x1a>
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <LL_ADC_REG_IsConversionOngoing>:
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d101      	bne.n	8003952 <LL_ADC_REG_IsConversionOngoing+0x18>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b09f      	sub	sp, #124	; 0x7c
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800397a:	2302      	movs	r3, #2
 800397c:	e08f      	b.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a47      	ldr	r2, [pc, #284]	; (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d102      	bne.n	8003996 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	e001      	b.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e072      	b.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ffbd 	bl	800393a <LL_ADC_REG_IsConversionOngoing>
 80039c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ffb7 	bl	800393a <LL_ADC_REG_IsConversionOngoing>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d154      	bne.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d151      	bne.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d02c      	beq.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039f6:	035b      	lsls	r3, r3, #13
 80039f8:	430b      	orrs	r3, r1
 80039fa:	431a      	orrs	r2, r3
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a00:	4829      	ldr	r0, [pc, #164]	; (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003a02:	f7ff ff87 	bl	8003914 <LL_ADC_IsEnabled>
 8003a06:	4604      	mov	r4, r0
 8003a08:	4828      	ldr	r0, [pc, #160]	; (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003a0a:	f7ff ff83 	bl	8003914 <LL_ADC_IsEnabled>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	431c      	orrs	r4, r3
 8003a12:	4828      	ldr	r0, [pc, #160]	; (8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a14:	f7ff ff7e 	bl	8003914 <LL_ADC_IsEnabled>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4323      	orrs	r3, r4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d137      	bne.n	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a28:	f023 030f 	bic.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	6811      	ldr	r1, [r2, #0]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	431a      	orrs	r2, r3
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a3c:	e028      	b.n	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a4a:	4817      	ldr	r0, [pc, #92]	; (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003a4c:	f7ff ff62 	bl	8003914 <LL_ADC_IsEnabled>
 8003a50:	4604      	mov	r4, r0
 8003a52:	4816      	ldr	r0, [pc, #88]	; (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003a54:	f7ff ff5e 	bl	8003914 <LL_ADC_IsEnabled>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	431c      	orrs	r4, r3
 8003a5c:	4815      	ldr	r0, [pc, #84]	; (8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a5e:	f7ff ff59 	bl	8003914 <LL_ADC_IsEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4323      	orrs	r3, r4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d112      	bne.n	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a72:	f023 030f 	bic.w	r3, r3, #15
 8003a76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a7a:	e009      	b.n	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003a8e:	e000      	b.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	377c      	adds	r7, #124	; 0x7c
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd90      	pop	{r4, r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	50040000 	.word	0x50040000
 8003aac:	50040100 	.word	0x50040100
 8003ab0:	50040300 	.word	0x50040300
 8003ab4:	50040200 	.word	0x50040200

08003ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <__NVIC_GetPriorityGrouping+0x18>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 0307 	and.w	r3, r3, #7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db0b      	blt.n	8003b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	4907      	ldr	r1, [pc, #28]	; (8003b54 <__NVIC_EnableIRQ+0x38>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	; (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f1c3 0307 	rsb	r3, r3, #7
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf28      	it	cs
 8003bca:	2304      	movcs	r3, #4
 8003bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d902      	bls.n	8003bdc <NVIC_EncodePriority+0x30>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	e000      	b.n	8003bde <NVIC_EncodePriority+0x32>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	4313      	orrs	r3, r2
         );
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c24:	d301      	bcc.n	8003c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c26:	2301      	movs	r3, #1
 8003c28:	e00f      	b.n	8003c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <SysTick_Config+0x40>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c32:	210f      	movs	r1, #15
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	f7ff ff8e 	bl	8003b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <SysTick_Config+0x40>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <SysTick_Config+0x40>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000e010 	.word	0xe000e010

08003c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff29 	bl	8003ab8 <__NVIC_SetPriorityGrouping>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff3e 	bl	8003b00 <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff8e 	bl	8003bac <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5d 	bl	8003b58 <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff31 	bl	8003b1c <__NVIC_EnableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffa2 	bl	8003c14 <SysTick_Config>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e014      	b.n	8003d16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	791b      	ldrb	r3, [r3, #4]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fe fb89 	bl	8002414 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	795b      	ldrb	r3, [r3, #5]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_DAC_Start+0x16>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e03b      	b.n	8003dac <HAL_DAC_Start+0x8e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10f      	bne.n	8003d7e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d118      	bne.n	8003d9e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	e00f      	b.n	8003d9e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d8c:	d107      	bne.n	8003d9e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0202 	orr.w	r2, r2, #2
 8003d9c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	795b      	ldrb	r3, [r3, #5]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_DAC_ConfigChannel+0x1c>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e107      	b.n	8003fe4 <HAL_DAC_ConfigChannel+0x22c>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d174      	bne.n	8003ed2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d137      	bne.n	8003e5e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fd23 	bl	8002838 <HAL_GetTick>
 8003df2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003df4:	e011      	b.n	8003e1a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003df6:	f7fe fd1f 	bl	8002838 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d90a      	bls.n	8003e1a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f043 0208 	orr.w	r2, r3, #8
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2203      	movs	r2, #3
 8003e14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0e4      	b.n	8003fe4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e6      	bne.n	8003df6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f7fe fd11 	bl	8002850 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	6992      	ldr	r2, [r2, #24]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
 8003e38:	e01e      	b.n	8003e78 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e3a:	f7fe fcfd 	bl	8002838 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d90a      	bls.n	8003e5e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f043 0208 	orr.w	r2, r3, #8
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2203      	movs	r2, #3
 8003e58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0c2      	b.n	8003fe4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dbe8      	blt.n	8003e3a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003e68:	2001      	movs	r0, #1
 8003e6a:	f7fe fcf1 	bl	8002850 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	6992      	ldr	r2, [r2, #24]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	ea02 0103 	and.w	r1, r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	21ff      	movs	r1, #255	; 0xff
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	ea02 0103 	and.w	r1, r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d11d      	bne.n	8003f16 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	221f      	movs	r2, #31
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2207      	movs	r2, #7
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	400a      	ands	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	22c0      	movs	r2, #192	; 0xc0
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e098      	b.n	8004130 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	4b4d      	ldr	r3, [pc, #308]	; (800413c <HAL_DMA_Init+0x150>)
 8004006:	429a      	cmp	r2, r3
 8004008:	d80f      	bhi.n	800402a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <HAL_DMA_Init+0x154>)
 8004012:	4413      	add	r3, r2
 8004014:	4a4b      	ldr	r2, [pc, #300]	; (8004144 <HAL_DMA_Init+0x158>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a48      	ldr	r2, [pc, #288]	; (8004148 <HAL_DMA_Init+0x15c>)
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
 8004028:	e00e      	b.n	8004048 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	4b46      	ldr	r3, [pc, #280]	; (800414c <HAL_DMA_Init+0x160>)
 8004032:	4413      	add	r3, r2
 8004034:	4a43      	ldr	r2, [pc, #268]	; (8004144 <HAL_DMA_Init+0x158>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	009a      	lsls	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a42      	ldr	r2, [pc, #264]	; (8004150 <HAL_DMA_Init+0x164>)
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a2:	d039      	beq.n	8004118 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <HAL_DMA_Init+0x15c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d11a      	bne.n	80040e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040ae:	4b29      	ldr	r3, [pc, #164]	; (8004154 <HAL_DMA_Init+0x168>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f003 031c 	and.w	r3, r3, #28
 80040ba:	210f      	movs	r1, #15
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	4924      	ldr	r1, [pc, #144]	; (8004154 <HAL_DMA_Init+0x168>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040c8:	4b22      	ldr	r3, [pc, #136]	; (8004154 <HAL_DMA_Init+0x168>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f003 031c 	and.w	r3, r3, #28
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	491d      	ldr	r1, [pc, #116]	; (8004154 <HAL_DMA_Init+0x168>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
 80040e2:	e019      	b.n	8004118 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_DMA_Init+0x16c>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f003 031c 	and.w	r3, r3, #28
 80040f0:	210f      	movs	r1, #15
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_DMA_Init+0x16c>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040fe:	4b16      	ldr	r3, [pc, #88]	; (8004158 <HAL_DMA_Init+0x16c>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f003 031c 	and.w	r3, r3, #28
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	4911      	ldr	r1, [pc, #68]	; (8004158 <HAL_DMA_Init+0x16c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40020407 	.word	0x40020407
 8004140:	bffdfff8 	.word	0xbffdfff8
 8004144:	cccccccd 	.word	0xcccccccd
 8004148:	40020000 	.word	0x40020000
 800414c:	bffdfbf8 	.word	0xbffdfbf8
 8004150:	40020400 	.word	0x40020400
 8004154:	400200a8 	.word	0x400200a8
 8004158:	400204a8 	.word	0x400204a8

0800415c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_DMA_Start_IT+0x20>
 8004178:	2302      	movs	r3, #2
 800417a:	e04b      	b.n	8004214 <HAL_DMA_Start_IT+0xb8>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d13a      	bne.n	8004206 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f8e0 	bl	800437a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 020e 	orr.w	r2, r2, #14
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e00f      	b.n	80041f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 020a 	orr.w	r2, r2, #10
 80041f2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e005      	b.n	8004212 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800420e:	2302      	movs	r3, #2
 8004210:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004212:	7dfb      	ldrb	r3, [r7, #23]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004238:	f003 031c 	and.w	r3, r3, #28
 800423c:	2204      	movs	r2, #4
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d026      	beq.n	8004296 <HAL_DMA_IRQHandler+0x7a>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d021      	beq.n	8004296 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	f003 021c 	and.w	r2, r3, #28
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2104      	movs	r1, #4
 800427e:	fa01 f202 	lsl.w	r2, r1, r2
 8004282:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	2b00      	cmp	r3, #0
 800428a:	d071      	beq.n	8004370 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004294:	e06c      	b.n	8004370 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 031c 	and.w	r3, r3, #28
 800429e:	2202      	movs	r2, #2
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02e      	beq.n	8004308 <HAL_DMA_IRQHandler+0xec>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d029      	beq.n	8004308 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 020a 	bic.w	r2, r2, #10
 80042d0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f003 021c 	and.w	r2, r3, #28
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	2102      	movs	r1, #2
 80042e8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d038      	beq.n	8004370 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004306:	e033      	b.n	8004370 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	f003 031c 	and.w	r3, r3, #28
 8004310:	2208      	movs	r2, #8
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02a      	beq.n	8004372 <HAL_DMA_IRQHandler+0x156>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d025      	beq.n	8004372 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 020e 	bic.w	r2, r2, #14
 8004334:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f003 021c 	and.w	r2, r3, #28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2101      	movs	r1, #1
 8004344:	fa01 f202 	lsl.w	r2, r1, r2
 8004348:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004370:	bf00      	nop
 8004372:	bf00      	nop
}
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	f003 021c 	and.w	r2, r3, #28
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f202 	lsl.w	r2, r1, r2
 800439a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d108      	bne.n	80043be <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043bc:	e007      	b.n	80043ce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	60da      	str	r2, [r3, #12]
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ea:	e17f      	b.n	80046ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	2101      	movs	r1, #1
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8171 	beq.w	80046e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d00b      	beq.n	8004424 <HAL_GPIO_Init+0x48>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d007      	beq.n	8004424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004418:	2b11      	cmp	r3, #17
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b12      	cmp	r3, #18
 8004422:	d130      	bne.n	8004486 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445a:	2201      	movs	r2, #1
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0201 	and.w	r2, r3, #1
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b03      	cmp	r3, #3
 8004490:	d118      	bne.n	80044c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004498:	2201      	movs	r2, #1
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f003 0201 	and.w	r2, r3, #1
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x128>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b12      	cmp	r3, #18
 8004502:	d123      	bne.n	800454c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	08da      	lsrs	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3208      	adds	r2, #8
 800450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	220f      	movs	r2, #15
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	08da      	lsrs	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3208      	adds	r2, #8
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	2203      	movs	r2, #3
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0203 	and.w	r2, r3, #3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80ac 	beq.w	80046e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_GPIO_Init+0x32c>)
 8004590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004592:	4a5d      	ldr	r2, [pc, #372]	; (8004708 <HAL_GPIO_Init+0x32c>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6613      	str	r3, [r2, #96]	; 0x60
 800459a:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <HAL_GPIO_Init+0x32c>)
 800459c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045a6:	4a59      	ldr	r2, [pc, #356]	; (800470c <HAL_GPIO_Init+0x330>)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	3302      	adds	r3, #2
 80045ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045d0:	d025      	beq.n	800461e <HAL_GPIO_Init+0x242>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4e      	ldr	r2, [pc, #312]	; (8004710 <HAL_GPIO_Init+0x334>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01f      	beq.n	800461a <HAL_GPIO_Init+0x23e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4d      	ldr	r2, [pc, #308]	; (8004714 <HAL_GPIO_Init+0x338>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d019      	beq.n	8004616 <HAL_GPIO_Init+0x23a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4c      	ldr	r2, [pc, #304]	; (8004718 <HAL_GPIO_Init+0x33c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_GPIO_Init+0x236>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4b      	ldr	r2, [pc, #300]	; (800471c <HAL_GPIO_Init+0x340>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00d      	beq.n	800460e <HAL_GPIO_Init+0x232>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <HAL_GPIO_Init+0x344>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <HAL_GPIO_Init+0x22e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a49      	ldr	r2, [pc, #292]	; (8004724 <HAL_GPIO_Init+0x348>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_GPIO_Init+0x22a>
 8004602:	2306      	movs	r3, #6
 8004604:	e00c      	b.n	8004620 <HAL_GPIO_Init+0x244>
 8004606:	2307      	movs	r3, #7
 8004608:	e00a      	b.n	8004620 <HAL_GPIO_Init+0x244>
 800460a:	2305      	movs	r3, #5
 800460c:	e008      	b.n	8004620 <HAL_GPIO_Init+0x244>
 800460e:	2304      	movs	r3, #4
 8004610:	e006      	b.n	8004620 <HAL_GPIO_Init+0x244>
 8004612:	2303      	movs	r3, #3
 8004614:	e004      	b.n	8004620 <HAL_GPIO_Init+0x244>
 8004616:	2302      	movs	r3, #2
 8004618:	e002      	b.n	8004620 <HAL_GPIO_Init+0x244>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_GPIO_Init+0x244>
 800461e:	2300      	movs	r3, #0
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	f002 0203 	and.w	r2, r2, #3
 8004626:	0092      	lsls	r2, r2, #2
 8004628:	4093      	lsls	r3, r2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004630:	4936      	ldr	r1, [pc, #216]	; (800470c <HAL_GPIO_Init+0x330>)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	3302      	adds	r3, #2
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800463e:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_GPIO_Init+0x34c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	43db      	mvns	r3, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004662:	4a31      	ldr	r2, [pc, #196]	; (8004728 <HAL_GPIO_Init+0x34c>)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004668:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_GPIO_Init+0x34c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	43db      	mvns	r3, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <HAL_GPIO_Init+0x34c>)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004692:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_GPIO_Init+0x34c>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <HAL_GPIO_Init+0x34c>)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <HAL_GPIO_Init+0x34c>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046e0:	4a11      	ldr	r2, [pc, #68]	; (8004728 <HAL_GPIO_Init+0x34c>)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3301      	adds	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f47f ae78 	bne.w	80043ec <HAL_GPIO_Init+0x10>
  }
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40021000 	.word	0x40021000
 800470c:	40010000 	.word	0x40010000
 8004710:	48000400 	.word	0x48000400
 8004714:	48000800 	.word	0x48000800
 8004718:	48000c00 	.word	0x48000c00
 800471c:	48001000 	.word	0x48001000
 8004720:	48001400 	.word	0x48001400
 8004724:	48001800 	.word	0x48001800
 8004728:	40010400 	.word	0x40010400

0800472c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
 8004738:	4613      	mov	r3, r2
 800473a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800473c:	787b      	ldrb	r3, [r7, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004748:	e002      	b.n	8004750 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800474a:	887a      	ldrh	r2, [r7, #2]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <HAL_PWREx_GetVoltageRange+0x18>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40007000 	.word	0x40007000

08004778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004786:	d130      	bne.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004794:	d038      	beq.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800479e:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047a6:	4b1d      	ldr	r3, [pc, #116]	; (800481c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2232      	movs	r2, #50	; 0x32
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0c9b      	lsrs	r3, r3, #18
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047bc:	e002      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047c4:	4b14      	ldr	r3, [pc, #80]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d0:	d102      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f2      	bne.n	80047be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e4:	d110      	bne.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e00f      	b.n	800480a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f6:	d007      	beq.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047f8:	4b07      	ldr	r3, [pc, #28]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004800:	4a05      	ldr	r2, [pc, #20]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004806:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40007000 	.word	0x40007000
 800481c:	20000000 	.word	0x20000000
 8004820:	431bde83 	.word	0x431bde83

08004824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e3d4      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004836:	4ba1      	ldr	r3, [pc, #644]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004840:	4b9e      	ldr	r3, [pc, #632]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80e4 	beq.w	8004a20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_RCC_OscConfig+0x4a>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	f040 808b 	bne.w	800497c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 8087 	bne.w	800497c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800486e:	4b93      	ldr	r3, [pc, #588]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_RCC_OscConfig+0x62>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e3ac      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	4b8c      	ldr	r3, [pc, #560]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <HAL_RCC_OscConfig+0x7c>
 8004896:	4b89      	ldr	r3, [pc, #548]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800489e:	e005      	b.n	80048ac <HAL_RCC_OscConfig+0x88>
 80048a0:	4b86      	ldr	r3, [pc, #536]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d223      	bcs.n	80048f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fd3f 	bl	8005338 <RCC_SetFlashLatencyFromMSIRange>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e38d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c4:	4b7d      	ldr	r3, [pc, #500]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a7c      	ldr	r2, [pc, #496]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048ca:	f043 0308 	orr.w	r3, r3, #8
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b7a      	ldr	r3, [pc, #488]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4977      	ldr	r1, [pc, #476]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e2:	4b76      	ldr	r3, [pc, #472]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	4972      	ldr	r1, [pc, #456]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
 80048f6:	e025      	b.n	8004944 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048f8:	4b70      	ldr	r3, [pc, #448]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a6f      	ldr	r2, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80048fe:	f043 0308 	orr.w	r3, r3, #8
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	496a      	ldr	r1, [pc, #424]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004916:	4b69      	ldr	r3, [pc, #420]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	4965      	ldr	r1, [pc, #404]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d109      	bne.n	8004944 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fcff 	bl	8005338 <RCC_SetFlashLatencyFromMSIRange>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e34d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004944:	f000 fc36 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 8004948:	4601      	mov	r1, r0
 800494a:	4b5c      	ldr	r3, [pc, #368]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	4a5a      	ldr	r2, [pc, #360]	; (8004ac0 <HAL_RCC_OscConfig+0x29c>)
 8004956:	5cd3      	ldrb	r3, [r2, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa21 f303 	lsr.w	r3, r1, r3
 8004960:	4a58      	ldr	r2, [pc, #352]	; (8004ac4 <HAL_RCC_OscConfig+0x2a0>)
 8004962:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004964:	4b58      	ldr	r3, [pc, #352]	; (8004ac8 <HAL_RCC_OscConfig+0x2a4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fd ff19 	bl	80027a0 <HAL_InitTick>
 800496e:	4603      	mov	r3, r0
 8004970:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d052      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	e331      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d032      	beq.n	80049ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004984:	4b4d      	ldr	r3, [pc, #308]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a4c      	ldr	r2, [pc, #304]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004990:	f7fd ff52 	bl	8002838 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004998:	f7fd ff4e 	bl	8002838 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e31a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049aa:	4b44      	ldr	r3, [pc, #272]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049b6:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a40      	ldr	r2, [pc, #256]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b3e      	ldr	r3, [pc, #248]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	493b      	ldr	r1, [pc, #236]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	4936      	ldr	r1, [pc, #216]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
 80049e8:	e01a      	b.n	8004a20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049ea:	4b34      	ldr	r3, [pc, #208]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a33      	ldr	r2, [pc, #204]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049f6:	f7fd ff1f 	bl	8002838 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049fe:	f7fd ff1b 	bl	8002838 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e2e7      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a10:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f0      	bne.n	80049fe <HAL_RCC_OscConfig+0x1da>
 8004a1c:	e000      	b.n	8004a20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d074      	beq.n	8004b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d005      	beq.n	8004a3e <HAL_RCC_OscConfig+0x21a>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	d10e      	bne.n	8004a56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d064      	beq.n	8004b14 <HAL_RCC_OscConfig+0x2f0>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d160      	bne.n	8004b14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e2c4      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x24a>
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e01d      	b.n	8004aaa <HAL_RCC_OscConfig+0x286>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a76:	d10c      	bne.n	8004a92 <HAL_RCC_OscConfig+0x26e>
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e00b      	b.n	8004aaa <HAL_RCC_OscConfig+0x286>
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a09      	ldr	r2, [pc, #36]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a06      	ldr	r2, [pc, #24]	; (8004abc <HAL_RCC_OscConfig+0x298>)
 8004aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01c      	beq.n	8004aec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fd fec1 	bl	8002838 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab8:	e011      	b.n	8004ade <HAL_RCC_OscConfig+0x2ba>
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	080079a0 	.word	0x080079a0
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fd feb4 	bl	8002838 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e280      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ade:	4baf      	ldr	r3, [pc, #700]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x2a8>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fd fea4 	bl	8002838 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fd fea0 	bl	8002838 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	; 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e26c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b06:	4ba5      	ldr	r3, [pc, #660]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2d0>
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d060      	beq.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_OscConfig+0x310>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d119      	bne.n	8004b62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d116      	bne.n	8004b62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b34:	4b99      	ldr	r3, [pc, #612]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_OscConfig+0x328>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e249      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b93      	ldr	r3, [pc, #588]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	4990      	ldr	r1, [pc, #576]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b60:	e040      	b.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d023      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6a:	4b8c      	ldr	r3, [pc, #560]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a8b      	ldr	r2, [pc, #556]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fe5f 	bl	8002838 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fd fe5b 	bl	8002838 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e227      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b90:	4b82      	ldr	r3, [pc, #520]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b7f      	ldr	r3, [pc, #508]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	497c      	ldr	r1, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
 8004bb0:	e018      	b.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b7a      	ldr	r3, [pc, #488]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a79      	ldr	r2, [pc, #484]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fd fe3b 	bl	8002838 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fd fe37 	bl	8002838 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e203      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd8:	4b70      	ldr	r3, [pc, #448]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f0      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d03c      	beq.n	8004c6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01c      	beq.n	8004c32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf8:	4b68      	ldr	r3, [pc, #416]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfe:	4a67      	ldr	r2, [pc, #412]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fd fe16 	bl	8002838 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fd fe12 	bl	8002838 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1de      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c22:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ef      	beq.n	8004c10 <HAL_RCC_OscConfig+0x3ec>
 8004c30:	e01b      	b.n	8004c6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c32:	4b5a      	ldr	r3, [pc, #360]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c38:	4a58      	ldr	r2, [pc, #352]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fd fdf9 	bl	8002838 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7fd fdf5 	bl	8002838 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1c1      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ef      	bne.n	8004c4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80a6 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c7c:	4b47      	ldr	r3, [pc, #284]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c88:	4b44      	ldr	r3, [pc, #272]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	4a43      	ldr	r2, [pc, #268]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6593      	str	r3, [r2, #88]	; 0x58
 8004c94:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca4:	4b3e      	ldr	r3, [pc, #248]	; (8004da0 <HAL_RCC_OscConfig+0x57c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d118      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <HAL_RCC_OscConfig+0x57c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <HAL_RCC_OscConfig+0x57c>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cbc:	f7fd fdbc 	bl	8002838 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc4:	f7fd fdb8 	bl	8002838 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e184      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd6:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <HAL_RCC_OscConfig+0x57c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d108      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4d8>
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cfa:	e024      	b.n	8004d46 <HAL_RCC_OscConfig+0x522>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d110      	bne.n	8004d26 <HAL_RCC_OscConfig+0x502>
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a24      	ldr	r2, [pc, #144]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d14:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d24:	e00f      	b.n	8004d46 <HAL_RCC_OscConfig+0x522>
 8004d26:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d36:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d3e:	f023 0304 	bic.w	r3, r3, #4
 8004d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fd fd73 	bl	8002838 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d54:	e00a      	b.n	8004d6c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fd fd6f 	bl	8002838 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e139      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_RCC_OscConfig+0x578>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0ed      	beq.n	8004d56 <HAL_RCC_OscConfig+0x532>
 8004d7a:	e01a      	b.n	8004db2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd fd5c 	bl	8002838 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d82:	e00f      	b.n	8004da4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd fd58 	bl	8002838 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d906      	bls.n	8004da4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e122      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da4:	4b90      	ldr	r3, [pc, #576]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e8      	bne.n	8004d84 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db2:	7ffb      	ldrb	r3, [r7, #31]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db8:	4b8b      	ldr	r3, [pc, #556]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	4a8a      	ldr	r2, [pc, #552]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8108 	beq.w	8004fde <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	f040 80d0 	bne.w	8004f78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dd8:	4b83      	ldr	r3, [pc, #524]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 0203 	and.w	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d130      	bne.n	8004e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	3b01      	subs	r3, #1
 8004df8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d127      	bne.n	8004e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d11f      	bne.n	8004e4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e18:	2a07      	cmp	r2, #7
 8004e1a:	bf14      	ite	ne
 8004e1c:	2201      	movne	r2, #1
 8004e1e:	2200      	moveq	r2, #0
 8004e20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d113      	bne.n	8004e4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	3b01      	subs	r3, #1
 8004e34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d06e      	beq.n	8004f2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	d069      	beq.n	8004f28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e54:	4b64      	ldr	r3, [pc, #400]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e60:	4b61      	ldr	r3, [pc, #388]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b7      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e70:	4b5d      	ldr	r3, [pc, #372]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5c      	ldr	r2, [pc, #368]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e7c:	f7fd fcdc 	bl	8002838 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd fcd8 	bl	8002838 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e0a4      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e96:	4b54      	ldr	r3, [pc, #336]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea2:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	4b51      	ldr	r3, [pc, #324]	; (8004fec <HAL_RCC_OscConfig+0x7c8>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004eb2:	3a01      	subs	r2, #1
 8004eb4:	0112      	lsls	r2, r2, #4
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ebc:	0212      	lsls	r2, r2, #8
 8004ebe:	4311      	orrs	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ec4:	0852      	lsrs	r2, r2, #1
 8004ec6:	3a01      	subs	r2, #1
 8004ec8:	0552      	lsls	r2, r2, #21
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ed0:	0852      	lsrs	r2, r2, #1
 8004ed2:	3a01      	subs	r2, #1
 8004ed4:	0652      	lsls	r2, r2, #25
 8004ed6:	4311      	orrs	r1, r2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004edc:	0912      	lsrs	r2, r2, #4
 8004ede:	0452      	lsls	r2, r2, #17
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	4941      	ldr	r1, [pc, #260]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ef4:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a3b      	ldr	r2, [pc, #236]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f00:	f7fd fc9a 	bl	8002838 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fd fc96 	bl	8002838 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e062      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1a:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f26:	e05a      	b.n	8004fde <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e059      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2c:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d152      	bne.n	8004fde <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f38:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f44:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f50:	f7fd fc72 	bl	8002838 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fd fc6e 	bl	8002838 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e03a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	4b1f      	ldr	r3, [pc, #124]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x734>
 8004f76:	e032      	b.n	8004fde <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d02d      	beq.n	8004fda <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f88:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004f8a:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f96:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004f9c:	f023 0303 	bic.w	r3, r3, #3
 8004fa0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004fa8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fd fc41 	bl	8002838 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fd fc3d 	bl	8002838 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e009      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_RCC_OscConfig+0x7c4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <HAL_RCC_OscConfig+0x796>
 8004fd8:	e001      	b.n	8004fde <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	f99d808c 	.word	0xf99d808c

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0c8      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b66      	ldr	r3, [pc, #408]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d910      	bls.n	8005034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	4961      	ldr	r1, [pc, #388]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b5f      	ldr	r3, [pc, #380]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0b0      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d04c      	beq.n	80050da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d107      	bne.n	8005058 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005048:	4b56      	ldr	r3, [pc, #344]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d121      	bne.n	8005098 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e09e      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d107      	bne.n	8005070 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005060:	4b50      	ldr	r3, [pc, #320]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d115      	bne.n	8005098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e092      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d107      	bne.n	8005088 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005078:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e086      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005088:	4b46      	ldr	r3, [pc, #280]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e07e      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005098:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 0203 	bic.w	r2, r3, #3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	493f      	ldr	r1, [pc, #252]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fd fbc5 	bl	8002838 <HAL_GetTick>
 80050ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b2:	f7fd fbc1 	bl	8002838 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e066      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c8:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 020c 	and.w	r2, r3, #12
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d1eb      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	492c      	ldr	r1, [pc, #176]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f8:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d210      	bcs.n	8005128 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005106:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f023 0207 	bic.w	r2, r3, #7
 800510e:	4924      	ldr	r1, [pc, #144]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	4313      	orrs	r3, r2
 8005114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <HAL_RCC_ClockConfig+0x1b0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e036      	b.n	8005196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4918      	ldr	r1, [pc, #96]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4910      	ldr	r1, [pc, #64]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005166:	f000 f825 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 800516a:	4601      	mov	r1, r0
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <HAL_RCC_ClockConfig+0x1b4>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	5cd3      	ldrb	r3, [r2, r3]
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	fa21 f303 	lsr.w	r3, r1, r3
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fd fb08 	bl	80027a0 <HAL_InitTick>
 8005190:	4603      	mov	r3, r0
 8005192:	72fb      	strb	r3, [r7, #11]

  return status;
 8005194:	7afb      	ldrb	r3, [r7, #11]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40022000 	.word	0x40022000
 80051a4:	40021000 	.word	0x40021000
 80051a8:	080079a0 	.word	0x080079a0
 80051ac:	20000000 	.word	0x20000000
 80051b0:	20000004 	.word	0x20000004

080051b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c2:	4b3d      	ldr	r3, [pc, #244]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051cc:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x34>
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b0c      	cmp	r3, #12
 80051e0:	d121      	bne.n	8005226 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d11e      	bne.n	8005226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051e8:	4b33      	ldr	r3, [pc, #204]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051f4:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e005      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005204:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005210:	4a2a      	ldr	r2, [pc, #168]	; (80052bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005218:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10d      	bne.n	800523c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005224:	e00a      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d102      	bne.n	8005232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e004      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d101      	bne.n	800523c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005238:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800523a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b0c      	cmp	r3, #12
 8005240:	d133      	bne.n	80052aa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d002      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0xa4>
 8005252:	2b03      	cmp	r3, #3
 8005254:	d003      	beq.n	800525e <HAL_RCC_GetSysClockFreq+0xaa>
 8005256:	e005      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800525a:	617b      	str	r3, [r7, #20]
      break;
 800525c:	e005      	b.n	800526a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005260:	617b      	str	r3, [r7, #20]
      break;
 8005262:	e002      	b.n	800526a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	617b      	str	r3, [r7, #20]
      break;
 8005268:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	3301      	adds	r3, #1
 8005276:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	fb02 f203 	mul.w	r2, r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	fbb2 f3f3 	udiv	r3, r2, r3
 800528e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	0e5b      	lsrs	r3, r3, #25
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052aa:	69bb      	ldr	r3, [r7, #24]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40021000 	.word	0x40021000
 80052bc:	080079b8 	.word	0x080079b8
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	007a1200 	.word	0x007a1200

080052c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b03      	ldr	r3, [pc, #12]	; (80052dc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000000 	.word	0x20000000

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052e4:	f7ff fff0 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e8:	4601      	mov	r1, r0
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4a04      	ldr	r2, [pc, #16]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052f6:	5cd3      	ldrb	r3, [r2, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000
 8005308:	080079b0 	.word	0x080079b0

0800530c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005310:	f7ff ffda 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 8005314:	4601      	mov	r1, r0
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	0adb      	lsrs	r3, r3, #11
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005322:	5cd3      	ldrb	r3, [r2, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000
 8005334:	080079b0 	.word	0x080079b0

08005338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005344:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005350:	f7ff fa04 	bl	800475c <HAL_PWREx_GetVoltageRange>
 8005354:	6178      	str	r0, [r7, #20]
 8005356:	e014      	b.n	8005382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005358:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535c:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005362:	6593      	str	r3, [r2, #88]	; 0x58
 8005364:	4b22      	ldr	r3, [pc, #136]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005370:	f7ff f9f4 	bl	800475c <HAL_PWREx_GetVoltageRange>
 8005374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005388:	d10b      	bne.n	80053a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b80      	cmp	r3, #128	; 0x80
 800538e:	d919      	bls.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2ba0      	cmp	r3, #160	; 0xa0
 8005394:	d902      	bls.n	800539c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005396:	2302      	movs	r3, #2
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e013      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800539c:	2301      	movs	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e010      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d902      	bls.n	80053ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053a8:	2303      	movs	r3, #3
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	e00a      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	d102      	bne.n	80053ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053b4:	2302      	movs	r3, #2
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e004      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d101      	bne.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053c0:	2301      	movs	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 0207 	bic.w	r2, r3, #7
 80053cc:	4909      	ldr	r1, [pc, #36]	; (80053f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d001      	beq.n	80053e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40022000 	.word	0x40022000

080053f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005400:	2300      	movs	r3, #0
 8005402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005404:	2300      	movs	r3, #0
 8005406:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005410:	2b00      	cmp	r3, #0
 8005412:	d03f      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541c:	d01c      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800541e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005422:	d802      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00e      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005428:	e01f      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800542a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800542e:	d003      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005434:	d01c      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005436:	e018      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005438:	4b85      	ldr	r3, [pc, #532]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a84      	ldr	r2, [pc, #528]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800543e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005442:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005444:	e015      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	2100      	movs	r1, #0
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fab9 	bl	80059c4 <RCCEx_PLLSAI1_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005456:	e00c      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3320      	adds	r3, #32
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fba0 	bl	8005ba4 <RCCEx_PLLSAI2_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	74fb      	strb	r3, [r7, #19]
      break;
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005478:	4b75      	ldr	r3, [pc, #468]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005486:	4972      	ldr	r1, [pc, #456]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800548e:	e001      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d03f      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054a8:	d01c      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80054aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054ae:	d802      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80054b4:	e01f      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ba:	d003      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80054bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054c0:	d01c      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80054c2:	e018      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054c4:	4b62      	ldr	r3, [pc, #392]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4a61      	ldr	r2, [pc, #388]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054d0:	e015      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fa73 	bl	80059c4 <RCCEx_PLLSAI1_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054e2:	e00c      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3320      	adds	r3, #32
 80054e8:	2100      	movs	r1, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fb5a 	bl	8005ba4 <RCCEx_PLLSAI2_Config>
 80054f0:	4603      	mov	r3, r0
 80054f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054f4:	e003      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	74fb      	strb	r3, [r7, #19]
      break;
 80054fa:	e000      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80054fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005504:	4b52      	ldr	r3, [pc, #328]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005512:	494f      	ldr	r1, [pc, #316]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800551a:	e001      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80a0 	beq.w	800566e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005532:	4b47      	ldr	r3, [pc, #284]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005548:	4b41      	ldr	r3, [pc, #260]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554c:	4a40      	ldr	r2, [pc, #256]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005552:	6593      	str	r3, [r2, #88]	; 0x58
 8005554:	4b3e      	ldr	r3, [pc, #248]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005560:	2301      	movs	r3, #1
 8005562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005564:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3a      	ldr	r2, [pc, #232]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800556a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005570:	f7fd f962 	bl	8002838 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005576:	e009      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005578:	f7fd f95e 	bl	8002838 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	74fb      	strb	r3, [r7, #19]
        break;
 800558a:	e005      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800558c:	4b31      	ldr	r3, [pc, #196]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ef      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d15c      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800559e:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01f      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d019      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055bc:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055c8:	4b21      	ldr	r3, [pc, #132]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	4a20      	ldr	r2, [pc, #128]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055e8:	4a19      	ldr	r2, [pc, #100]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fd f91d 	bl	8002838 <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005600:	e00b      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005602:	f7fd f919 	bl	8002838 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d902      	bls.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	74fb      	strb	r3, [r7, #19]
            break;
 8005618:	e006      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561a:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0ec      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10c      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	4904      	ldr	r1, [pc, #16]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005646:	e009      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	74bb      	strb	r3, [r7, #18]
 800564c:	e006      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000
 8005654:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800565c:	7c7b      	ldrb	r3, [r7, #17]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d105      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005662:	4b9e      	ldr	r3, [pc, #632]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	4a9d      	ldr	r2, [pc, #628]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800567a:	4b98      	ldr	r3, [pc, #608]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	f023 0203 	bic.w	r2, r3, #3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	4994      	ldr	r1, [pc, #592]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800569c:	4b8f      	ldr	r3, [pc, #572]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f023 020c 	bic.w	r2, r3, #12
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	498c      	ldr	r1, [pc, #560]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056be:	4b87      	ldr	r3, [pc, #540]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	4983      	ldr	r1, [pc, #524]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056e0:	4b7e      	ldr	r3, [pc, #504]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	497b      	ldr	r1, [pc, #492]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005702:	4b76      	ldr	r3, [pc, #472]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005710:	4972      	ldr	r1, [pc, #456]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005724:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005732:	496a      	ldr	r1, [pc, #424]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005746:	4b65      	ldr	r3, [pc, #404]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005754:	4961      	ldr	r1, [pc, #388]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005768:	4b5c      	ldr	r3, [pc, #368]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005776:	4959      	ldr	r1, [pc, #356]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800578a:	4b54      	ldr	r3, [pc, #336]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005798:	4950      	ldr	r1, [pc, #320]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057ac:	4b4b      	ldr	r3, [pc, #300]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	4948      	ldr	r1, [pc, #288]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ce:	4b43      	ldr	r3, [pc, #268]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	493f      	ldr	r1, [pc, #252]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d028      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f0:	4b3a      	ldr	r3, [pc, #232]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fe:	4937      	ldr	r1, [pc, #220]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800580e:	d106      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005810:	4b32      	ldr	r3, [pc, #200]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a31      	ldr	r2, [pc, #196]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800581a:	60d3      	str	r3, [r2, #12]
 800581c:	e011      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005826:	d10c      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	2101      	movs	r1, #1
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f8c8 	bl	80059c4 <RCCEx_PLLSAI1_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d028      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800584e:	4b23      	ldr	r3, [pc, #140]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	491f      	ldr	r1, [pc, #124]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800586c:	d106      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005878:	60d3      	str	r3, [r2, #12]
 800587a:	e011      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005884:	d10c      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3304      	adds	r3, #4
 800588a:	2101      	movs	r1, #1
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f899 	bl	80059c4 <RCCEx_PLLSAI1_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005896:	7cfb      	ldrb	r3, [r7, #19]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d02b      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ba:	4908      	ldr	r1, [pc, #32]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ca:	d109      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a02      	ldr	r2, [pc, #8]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058d6:	60d3      	str	r3, [r2, #12]
 80058d8:	e014      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f867 	bl	80059c4 <RCCEx_PLLSAI1_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005900:	7cfb      	ldrb	r3, [r7, #19]
 8005902:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02f      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005910:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591e:	4928      	ldr	r1, [pc, #160]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800592e:	d10d      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	2102      	movs	r1, #2
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f844 	bl	80059c4 <RCCEx_PLLSAI1_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d014      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005946:	7cfb      	ldrb	r3, [r7, #19]
 8005948:	74bb      	strb	r3, [r7, #18]
 800594a:	e011      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005954:	d10c      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3320      	adds	r3, #32
 800595a:	2102      	movs	r1, #2
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f921 	bl	8005ba4 <RCCEx_PLLSAI2_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800596c:	7cfb      	ldrb	r3, [r7, #19]
 800596e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598a:	490d      	ldr	r1, [pc, #52]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800599e:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ae:	4904      	ldr	r1, [pc, #16]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000

080059c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059d2:	4b73      	ldr	r3, [pc, #460]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d018      	beq.n	8005a10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059de:	4b70      	ldr	r3, [pc, #448]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0203 	and.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d10d      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
       ||
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059f6:	4b6a      	ldr	r3, [pc, #424]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	091b      	lsrs	r3, r3, #4
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
       ||
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d044      	beq.n	8005a94 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
 8005a0e:	e041      	b.n	8005a94 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d00c      	beq.n	8005a32 <RCCEx_PLLSAI1_Config+0x6e>
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d013      	beq.n	8005a44 <RCCEx_PLLSAI1_Config+0x80>
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d120      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a20:	4b5f      	ldr	r3, [pc, #380]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11d      	bne.n	8005a68 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a30:	e01a      	b.n	8005a68 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a32:	4b5b      	ldr	r3, [pc, #364]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d116      	bne.n	8005a6c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a42:	e013      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a44:	4b56      	ldr	r3, [pc, #344]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10f      	bne.n	8005a70 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a50:	4b53      	ldr	r3, [pc, #332]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a60:	e006      	b.n	8005a70 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
      break;
 8005a66:	e004      	b.n	8005a72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005a70:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a78:	4b49      	ldr	r3, [pc, #292]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	4944      	ldr	r1, [pc, #272]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d17d      	bne.n	8005b96 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a9a:	4b41      	ldr	r3, [pc, #260]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a40      	ldr	r2, [pc, #256]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fc fec7 	bl	8002838 <HAL_GetTick>
 8005aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aac:	e009      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aae:	f7fc fec3 	bl	8002838 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d902      	bls.n	8005ac2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	73fb      	strb	r3, [r7, #15]
        break;
 8005ac0:	e005      	b.n	8005ace <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ac2:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1ef      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d160      	bne.n	8005b96 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d111      	bne.n	8005afe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ada:	4b31      	ldr	r3, [pc, #196]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6892      	ldr	r2, [r2, #8]
 8005aea:	0211      	lsls	r1, r2, #8
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	68d2      	ldr	r2, [r2, #12]
 8005af0:	0912      	lsrs	r2, r2, #4
 8005af2:	0452      	lsls	r2, r2, #17
 8005af4:	430a      	orrs	r2, r1
 8005af6:	492a      	ldr	r1, [pc, #168]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]
 8005afc:	e027      	b.n	8005b4e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d112      	bne.n	8005b2a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b04:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6892      	ldr	r2, [r2, #8]
 8005b14:	0211      	lsls	r1, r2, #8
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6912      	ldr	r2, [r2, #16]
 8005b1a:	0852      	lsrs	r2, r2, #1
 8005b1c:	3a01      	subs	r2, #1
 8005b1e:	0552      	lsls	r2, r2, #21
 8005b20:	430a      	orrs	r2, r1
 8005b22:	491f      	ldr	r1, [pc, #124]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	610b      	str	r3, [r1, #16]
 8005b28:	e011      	b.n	8005b4e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6892      	ldr	r2, [r2, #8]
 8005b3a:	0211      	lsls	r1, r2, #8
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6952      	ldr	r2, [r2, #20]
 8005b40:	0852      	lsrs	r2, r2, #1
 8005b42:	3a01      	subs	r2, #1
 8005b44:	0652      	lsls	r2, r2, #25
 8005b46:	430a      	orrs	r2, r1
 8005b48:	4915      	ldr	r1, [pc, #84]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5a:	f7fc fe6d 	bl	8002838 <HAL_GetTick>
 8005b5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b60:	e009      	b.n	8005b76 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b62:	f7fc fe69 	bl	8002838 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d902      	bls.n	8005b76 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	73fb      	strb	r3, [r7, #15]
          break;
 8005b74:	e005      	b.n	8005b82 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0ef      	beq.n	8005b62 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	4903      	ldr	r1, [pc, #12]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000

08005ba4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bb2:	4b68      	ldr	r3, [pc, #416]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d018      	beq.n	8005bf0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bbe:	4b65      	ldr	r3, [pc, #404]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0203 	and.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d10d      	bne.n	8005bea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
       ||
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bd6:	4b5f      	ldr	r3, [pc, #380]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
       ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d044      	beq.n	8005c74 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	73fb      	strb	r3, [r7, #15]
 8005bee:	e041      	b.n	8005c74 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d00c      	beq.n	8005c12 <RCCEx_PLLSAI2_Config+0x6e>
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d013      	beq.n	8005c24 <RCCEx_PLLSAI2_Config+0x80>
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d120      	bne.n	8005c42 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c00:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d11d      	bne.n	8005c48 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c10:	e01a      	b.n	8005c48 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c12:	4b50      	ldr	r3, [pc, #320]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d116      	bne.n	8005c4c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c22:	e013      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c24:	4b4b      	ldr	r3, [pc, #300]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10f      	bne.n	8005c50 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c30:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c40:	e006      	b.n	8005c50 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
      break;
 8005c46:	e004      	b.n	8005c52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005c48:	bf00      	nop
 8005c4a:	e002      	b.n	8005c52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005c4c:	bf00      	nop
 8005c4e:	e000      	b.n	8005c52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005c50:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10d      	bne.n	8005c74 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c58:	4b3e      	ldr	r3, [pc, #248]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	4939      	ldr	r1, [pc, #228]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d167      	bne.n	8005d4a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c7a:	4b36      	ldr	r3, [pc, #216]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a35      	ldr	r2, [pc, #212]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c86:	f7fc fdd7 	bl	8002838 <HAL_GetTick>
 8005c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c8c:	e009      	b.n	8005ca2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c8e:	f7fc fdd3 	bl	8002838 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d902      	bls.n	8005ca2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8005ca0:	e005      	b.n	8005cae <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ca2:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1ef      	bne.n	8005c8e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d14a      	bne.n	8005d4a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d111      	bne.n	8005cde <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cba:	4b26      	ldr	r3, [pc, #152]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6892      	ldr	r2, [r2, #8]
 8005cca:	0211      	lsls	r1, r2, #8
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68d2      	ldr	r2, [r2, #12]
 8005cd0:	0912      	lsrs	r2, r2, #4
 8005cd2:	0452      	lsls	r2, r2, #17
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	491f      	ldr	r1, [pc, #124]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	614b      	str	r3, [r1, #20]
 8005cdc:	e011      	b.n	8005d02 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cde:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ce6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6892      	ldr	r2, [r2, #8]
 8005cee:	0211      	lsls	r1, r2, #8
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6912      	ldr	r2, [r2, #16]
 8005cf4:	0852      	lsrs	r2, r2, #1
 8005cf6:	3a01      	subs	r2, #1
 8005cf8:	0652      	lsls	r2, r2, #25
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	4915      	ldr	r1, [pc, #84]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d02:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0e:	f7fc fd93 	bl	8002838 <HAL_GetTick>
 8005d12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d14:	e009      	b.n	8005d2a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d16:	f7fc fd8f 	bl	8002838 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d902      	bls.n	8005d2a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	73fb      	strb	r3, [r7, #15]
          break;
 8005d28:	e005      	b.n	8005d36 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0ef      	beq.n	8005d16 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	4903      	ldr	r1, [pc, #12]	; (8005d54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40021000 	.word	0x40021000

08005d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e01d      	b.n	8005da6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fc fba4 	bl	80024cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fbd2 	bl	8006540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <HAL_TIM_Base_Start_IT+0x50>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d00b      	beq.n	8005df2 <HAL_TIM_Base_Start_IT+0x42>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	d007      	beq.n	8005df2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	00010007 	.word	0x00010007

08005e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e01d      	b.n	8005e52 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fc fb30 	bl	8002490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f000 fb7c 	bl	8006540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 ff70 	bl	8006d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <HAL_TIM_PWM_Start+0x98>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x4a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <HAL_TIM_PWM_Start+0x9c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x4a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <HAL_TIM_PWM_Start+0xa0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x4a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <HAL_TIM_PWM_Start+0xa4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0x4a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <HAL_TIM_PWM_Start+0xa8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_PWM_Start+0x4e>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_PWM_Start+0x50>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <HAL_TIM_PWM_Start+0xac>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b06      	cmp	r3, #6
 8005ed0:	d00b      	beq.n	8005eea <HAL_TIM_PWM_Start+0x8e>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed8:	d007      	beq.n	8005eea <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40013400 	.word	0x40013400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800
 8005f08:	00010007 	.word	0x00010007

08005f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0202 	mvn.w	r2, #2
 8005f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fad7 	bl	8006502 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fac9 	bl	80064ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fada 	bl	8006516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d122      	bne.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11b      	bne.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0204 	mvn.w	r2, #4
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 faad 	bl	8006502 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa9f 	bl	80064ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fab0 	bl	8006516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d122      	bne.n	8006010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d11b      	bne.n	8006010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0208 	mvn.w	r2, #8
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa83 	bl	8006502 <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa75 	bl	80064ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa86 	bl	8006516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b10      	cmp	r3, #16
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0210 	mvn.w	r2, #16
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2208      	movs	r2, #8
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa59 	bl	8006502 <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa4b 	bl	80064ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fa5c 	bl	8006516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10e      	bne.n	8006090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d107      	bne.n	8006090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0201 	mvn.w	r2, #1
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fa fea0 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b80      	cmp	r3, #128	; 0x80
 800609c:	d10e      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b80      	cmp	r3, #128	; 0x80
 80060aa:	d107      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 ff04 	bl	8006ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ca:	d10e      	bne.n	80060ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	d107      	bne.n	80060ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fef7 	bl	8006ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b40      	cmp	r3, #64	; 0x40
 80060f6:	d10e      	bne.n	8006116 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b40      	cmp	r3, #64	; 0x40
 8006104:	d107      	bne.n	8006116 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800610e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fa0a 	bl	800652a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b20      	cmp	r3, #32
 8006122:	d10e      	bne.n	8006142 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b20      	cmp	r3, #32
 8006130:	d107      	bne.n	8006142 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f06f 0220 	mvn.w	r2, #32
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 feb7 	bl	8006eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006162:	2302      	movs	r3, #2
 8006164:	e105      	b.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b14      	cmp	r3, #20
 800617a:	f200 80f0 	bhi.w	800635e <HAL_TIM_PWM_ConfigChannel+0x212>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061d9 	.word	0x080061d9
 8006188:	0800635f 	.word	0x0800635f
 800618c:	0800635f 	.word	0x0800635f
 8006190:	0800635f 	.word	0x0800635f
 8006194:	08006219 	.word	0x08006219
 8006198:	0800635f 	.word	0x0800635f
 800619c:	0800635f 	.word	0x0800635f
 80061a0:	0800635f 	.word	0x0800635f
 80061a4:	0800625b 	.word	0x0800625b
 80061a8:	0800635f 	.word	0x0800635f
 80061ac:	0800635f 	.word	0x0800635f
 80061b0:	0800635f 	.word	0x0800635f
 80061b4:	0800629b 	.word	0x0800629b
 80061b8:	0800635f 	.word	0x0800635f
 80061bc:	0800635f 	.word	0x0800635f
 80061c0:	0800635f 	.word	0x0800635f
 80061c4:	080062dd 	.word	0x080062dd
 80061c8:	0800635f 	.word	0x0800635f
 80061cc:	0800635f 	.word	0x0800635f
 80061d0:	0800635f 	.word	0x0800635f
 80061d4:	0800631d 	.word	0x0800631d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fa48 	bl	8006674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0208 	orr.w	r2, r2, #8
 80061f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0204 	bic.w	r2, r2, #4
 8006202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6999      	ldr	r1, [r3, #24]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	619a      	str	r2, [r3, #24]
      break;
 8006216:	e0a3      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fab8 	bl	8006794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	619a      	str	r2, [r3, #24]
      break;
 8006258:	e082      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fb21 	bl	80068a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0208 	orr.w	r2, r2, #8
 8006274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0204 	bic.w	r2, r2, #4
 8006284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69d9      	ldr	r1, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	61da      	str	r2, [r3, #28]
      break;
 8006298:	e062      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fb89 	bl	80069b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	021a      	lsls	r2, r3, #8
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	61da      	str	r2, [r3, #28]
      break;
 80062da:	e041      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fbd2 	bl	8006a8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0208 	orr.w	r2, r2, #8
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0204 	bic.w	r2, r2, #4
 8006306:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800631a:	e021      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fc16 	bl	8006b54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	021a      	lsls	r2, r3, #8
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800635c:	e000      	b.n	8006360 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800635e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_TIM_ConfigClockSource+0x18>
 8006390:	2302      	movs	r3, #2
 8006392:	e0a8      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x16a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d067      	beq.n	80064a0 <HAL_TIM_ConfigClockSource+0x124>
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d80b      	bhi.n	80063ec <HAL_TIM_ConfigClockSource+0x70>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d073      	beq.n	80064c0 <HAL_TIM_ConfigClockSource+0x144>
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d802      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x66>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d06f      	beq.n	80064c0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063e0:	e078      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d06c      	beq.n	80064c0 <HAL_TIM_ConfigClockSource+0x144>
 80063e6:	2b30      	cmp	r3, #48	; 0x30
 80063e8:	d06a      	beq.n	80064c0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80063ea:	e073      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80063ec:	2b70      	cmp	r3, #112	; 0x70
 80063ee:	d00d      	beq.n	800640c <HAL_TIM_ConfigClockSource+0x90>
 80063f0:	2b70      	cmp	r3, #112	; 0x70
 80063f2:	d804      	bhi.n	80063fe <HAL_TIM_ConfigClockSource+0x82>
 80063f4:	2b50      	cmp	r3, #80	; 0x50
 80063f6:	d033      	beq.n	8006460 <HAL_TIM_ConfigClockSource+0xe4>
 80063f8:	2b60      	cmp	r3, #96	; 0x60
 80063fa:	d041      	beq.n	8006480 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80063fc:	e06a      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d066      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x156>
 8006404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006408:	d017      	beq.n	800643a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800640a:	e063      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	6899      	ldr	r1, [r3, #8]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f000 fc7a 	bl	8006d14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800642e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	609a      	str	r2, [r3, #8]
      break;
 8006438:	e04c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6899      	ldr	r1, [r3, #8]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f000 fc63 	bl	8006d14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800645c:	609a      	str	r2, [r3, #8]
      break;
 800645e:	e039      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6859      	ldr	r1, [r3, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	461a      	mov	r2, r3
 800646e:	f000 fbd7 	bl	8006c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2150      	movs	r1, #80	; 0x50
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fc30 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 800647e:	e029      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	6859      	ldr	r1, [r3, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	461a      	mov	r2, r3
 800648e:	f000 fbf6 	bl	8006c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2160      	movs	r1, #96	; 0x60
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fc20 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 800649e:	e019      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6859      	ldr	r1, [r3, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	461a      	mov	r2, r3
 80064ae:	f000 fbb7 	bl	8006c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2140      	movs	r1, #64	; 0x40
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fc10 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 80064be:	e009      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 fc07 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 80064d0:	e000      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80064d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a40      	ldr	r2, [pc, #256]	; (8006654 <TIM_Base_SetConfig+0x114>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d00f      	beq.n	8006580 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a3d      	ldr	r2, [pc, #244]	; (8006658 <TIM_Base_SetConfig+0x118>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00b      	beq.n	8006580 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a3c      	ldr	r2, [pc, #240]	; (800665c <TIM_Base_SetConfig+0x11c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d007      	beq.n	8006580 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a3b      	ldr	r2, [pc, #236]	; (8006660 <TIM_Base_SetConfig+0x120>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a3a      	ldr	r2, [pc, #232]	; (8006664 <TIM_Base_SetConfig+0x124>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d108      	bne.n	8006592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2f      	ldr	r2, [pc, #188]	; (8006654 <TIM_Base_SetConfig+0x114>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01f      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a0:	d01b      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a2c      	ldr	r2, [pc, #176]	; (8006658 <TIM_Base_SetConfig+0x118>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d017      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a2b      	ldr	r2, [pc, #172]	; (800665c <TIM_Base_SetConfig+0x11c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a2a      	ldr	r2, [pc, #168]	; (8006660 <TIM_Base_SetConfig+0x120>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a29      	ldr	r2, [pc, #164]	; (8006664 <TIM_Base_SetConfig+0x124>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a28      	ldr	r2, [pc, #160]	; (8006668 <TIM_Base_SetConfig+0x128>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <TIM_Base_SetConfig+0x12c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_Base_SetConfig+0x9a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a26      	ldr	r2, [pc, #152]	; (8006670 <TIM_Base_SetConfig+0x130>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d108      	bne.n	80065ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a10      	ldr	r2, [pc, #64]	; (8006654 <TIM_Base_SetConfig+0x114>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00f      	beq.n	8006638 <TIM_Base_SetConfig+0xf8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a12      	ldr	r2, [pc, #72]	; (8006664 <TIM_Base_SetConfig+0x124>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00b      	beq.n	8006638 <TIM_Base_SetConfig+0xf8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a11      	ldr	r2, [pc, #68]	; (8006668 <TIM_Base_SetConfig+0x128>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d007      	beq.n	8006638 <TIM_Base_SetConfig+0xf8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a10      	ldr	r2, [pc, #64]	; (800666c <TIM_Base_SetConfig+0x12c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_Base_SetConfig+0xf8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a0f      	ldr	r2, [pc, #60]	; (8006670 <TIM_Base_SetConfig+0x130>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d103      	bne.n	8006640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	615a      	str	r2, [r3, #20]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40012c00 	.word	0x40012c00
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40013400 	.word	0x40013400
 8006668:	40014000 	.word	0x40014000
 800666c:	40014400 	.word	0x40014400
 8006670:	40014800 	.word	0x40014800

08006674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 0302 	bic.w	r3, r3, #2
 80066c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a2c      	ldr	r2, [pc, #176]	; (8006780 <TIM_OC1_SetConfig+0x10c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00f      	beq.n	80066f4 <TIM_OC1_SetConfig+0x80>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a2b      	ldr	r2, [pc, #172]	; (8006784 <TIM_OC1_SetConfig+0x110>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00b      	beq.n	80066f4 <TIM_OC1_SetConfig+0x80>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <TIM_OC1_SetConfig+0x114>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_OC1_SetConfig+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a29      	ldr	r2, [pc, #164]	; (800678c <TIM_OC1_SetConfig+0x118>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_OC1_SetConfig+0x80>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a28      	ldr	r2, [pc, #160]	; (8006790 <TIM_OC1_SetConfig+0x11c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d10c      	bne.n	800670e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0308 	bic.w	r3, r3, #8
 80066fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f023 0304 	bic.w	r3, r3, #4
 800670c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1b      	ldr	r2, [pc, #108]	; (8006780 <TIM_OC1_SetConfig+0x10c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00f      	beq.n	8006736 <TIM_OC1_SetConfig+0xc2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <TIM_OC1_SetConfig+0x110>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00b      	beq.n	8006736 <TIM_OC1_SetConfig+0xc2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a19      	ldr	r2, [pc, #100]	; (8006788 <TIM_OC1_SetConfig+0x114>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d007      	beq.n	8006736 <TIM_OC1_SetConfig+0xc2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a18      	ldr	r2, [pc, #96]	; (800678c <TIM_OC1_SetConfig+0x118>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <TIM_OC1_SetConfig+0xc2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a17      	ldr	r2, [pc, #92]	; (8006790 <TIM_OC1_SetConfig+0x11c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d111      	bne.n	800675a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40013400 	.word	0x40013400
 8006788:	40014000 	.word	0x40014000
 800678c:	40014400 	.word	0x40014400
 8006790:	40014800 	.word	0x40014800

08006794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f023 0210 	bic.w	r2, r3, #16
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0320 	bic.w	r3, r3, #32
 80067e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a28      	ldr	r2, [pc, #160]	; (8006894 <TIM_OC2_SetConfig+0x100>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC2_SetConfig+0x6c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a27      	ldr	r2, [pc, #156]	; (8006898 <TIM_OC2_SetConfig+0x104>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10d      	bne.n	800681c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <TIM_OC2_SetConfig+0x100>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00f      	beq.n	8006844 <TIM_OC2_SetConfig+0xb0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1c      	ldr	r2, [pc, #112]	; (8006898 <TIM_OC2_SetConfig+0x104>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00b      	beq.n	8006844 <TIM_OC2_SetConfig+0xb0>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a1b      	ldr	r2, [pc, #108]	; (800689c <TIM_OC2_SetConfig+0x108>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d007      	beq.n	8006844 <TIM_OC2_SetConfig+0xb0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <TIM_OC2_SetConfig+0x10c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC2_SetConfig+0xb0>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <TIM_OC2_SetConfig+0x110>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d113      	bne.n	800686c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800684a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800

080068a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <TIM_OC3_SetConfig+0xfc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_OC3_SetConfig+0x6a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a26      	ldr	r2, [pc, #152]	; (80069a8 <TIM_OC3_SetConfig+0x100>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10d      	bne.n	800692e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800692c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <TIM_OC3_SetConfig+0xfc>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00f      	beq.n	8006956 <TIM_OC3_SetConfig+0xae>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <TIM_OC3_SetConfig+0x100>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00b      	beq.n	8006956 <TIM_OC3_SetConfig+0xae>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <TIM_OC3_SetConfig+0x104>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d007      	beq.n	8006956 <TIM_OC3_SetConfig+0xae>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <TIM_OC3_SetConfig+0x108>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_OC3_SetConfig+0xae>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <TIM_OC3_SetConfig+0x10c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d113      	bne.n	800697e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40012c00 	.word	0x40012c00
 80069a8:	40013400 	.word	0x40013400
 80069ac:	40014000 	.word	0x40014000
 80069b0:	40014400 	.word	0x40014400
 80069b4:	40014800 	.word	0x40014800

080069b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	031b      	lsls	r3, r3, #12
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <TIM_OC4_SetConfig+0xc0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00f      	beq.n	8006a3c <TIM_OC4_SetConfig+0x84>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <TIM_OC4_SetConfig+0xc4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00b      	beq.n	8006a3c <TIM_OC4_SetConfig+0x84>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <TIM_OC4_SetConfig+0xc8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <TIM_OC4_SetConfig+0x84>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <TIM_OC4_SetConfig+0xcc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC4_SetConfig+0x84>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a14      	ldr	r2, [pc, #80]	; (8006a88 <TIM_OC4_SetConfig+0xd0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d109      	bne.n	8006a50 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40012c00 	.word	0x40012c00
 8006a7c:	40013400 	.word	0x40013400
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ad0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a17      	ldr	r2, [pc, #92]	; (8006b40 <TIM_OC5_SetConfig+0xb4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_OC5_SetConfig+0x7a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <TIM_OC5_SetConfig+0xb8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_OC5_SetConfig+0x7a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <TIM_OC5_SetConfig+0xbc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_OC5_SetConfig+0x7a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <TIM_OC5_SetConfig+0xc0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_OC5_SetConfig+0x7a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <TIM_OC5_SetConfig+0xc4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d109      	bne.n	8006b1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	621a      	str	r2, [r3, #32]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40013400 	.word	0x40013400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800

08006b54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	051b      	lsls	r3, r3, #20
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <TIM_OC6_SetConfig+0xb8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00f      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x7c>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <TIM_OC6_SetConfig+0xbc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00b      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x7c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <TIM_OC6_SetConfig+0xc0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d007      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x7c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <TIM_OC6_SetConfig+0xc4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_OC6_SetConfig+0x7c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a14      	ldr	r2, [pc, #80]	; (8006c1c <TIM_OC6_SetConfig+0xc8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d109      	bne.n	8006be4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	029b      	lsls	r3, r3, #10
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	40013400 	.word	0x40013400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40014400 	.word	0x40014400
 8006c1c:	40014800 	.word	0x40014800

08006c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f023 030a 	bic.w	r3, r3, #10
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b087      	sub	sp, #28
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f023 0210 	bic.w	r2, r3, #16
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	031b      	lsls	r3, r3, #12
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f043 0307 	orr.w	r3, r3, #7
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	021a      	lsls	r2, r3, #8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2201      	movs	r2, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	43db      	mvns	r3, r3
 8006d76:	401a      	ands	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e068      	b.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2e      	ldr	r2, [pc, #184]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d108      	bne.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01d      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2a:	d018      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00e      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d009      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a14      	ldr	r2, [pc, #80]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10c      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40014000 	.word	0x40014000

08006eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e040      	b.n	8006f80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fb fb38 	bl	8002584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	; 0x24
 8006f18:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0201 	bic.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f82c 	bl	8006f88 <UART_SetConfig>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e022      	b.n	8006f80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fb92 	bl	800766c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc19 	bl	80077b0 <UART_CheckIdleState>
 8006f7e:	4603      	mov	r3, r0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006f8c:	b08a      	sub	sp, #40	; 0x28
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4bb8      	ldr	r3, [pc, #736]	; (80072a0 <UART_SetConfig+0x318>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4aae      	ldr	r2, [pc, #696]	; (80072a4 <UART_SetConfig+0x31c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d004      	beq.n	8006ffa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700a:	430a      	orrs	r2, r1
 800700c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4aa5      	ldr	r2, [pc, #660]	; (80072a8 <UART_SetConfig+0x320>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d126      	bne.n	8007066 <UART_SetConfig+0xde>
 8007018:	4ba4      	ldr	r3, [pc, #656]	; (80072ac <UART_SetConfig+0x324>)
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	2b03      	cmp	r3, #3
 8007024:	d81a      	bhi.n	800705c <UART_SetConfig+0xd4>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0xa4>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	0800703d 	.word	0x0800703d
 8007030:	0800704d 	.word	0x0800704d
 8007034:	08007045 	.word	0x08007045
 8007038:	08007055 	.word	0x08007055
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007042:	e105      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e101      	b.n	8007250 <UART_SetConfig+0x2c8>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007052:	e0fd      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e0f9      	b.n	8007250 <UART_SetConfig+0x2c8>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	bf00      	nop
 8007064:	e0f4      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a91      	ldr	r2, [pc, #580]	; (80072b0 <UART_SetConfig+0x328>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d138      	bne.n	80070e2 <UART_SetConfig+0x15a>
 8007070:	4b8e      	ldr	r3, [pc, #568]	; (80072ac <UART_SetConfig+0x324>)
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007076:	f003 030c 	and.w	r3, r3, #12
 800707a:	2b0c      	cmp	r3, #12
 800707c:	d82c      	bhi.n	80070d8 <UART_SetConfig+0x150>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0xfc>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070b9 	.word	0x080070b9
 8007088:	080070d9 	.word	0x080070d9
 800708c:	080070d9 	.word	0x080070d9
 8007090:	080070d9 	.word	0x080070d9
 8007094:	080070c9 	.word	0x080070c9
 8007098:	080070d9 	.word	0x080070d9
 800709c:	080070d9 	.word	0x080070d9
 80070a0:	080070d9 	.word	0x080070d9
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	080070d9 	.word	0x080070d9
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070be:	e0c7      	b.n	8007250 <UART_SetConfig+0x2c8>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c6:	e0c3      	b.n	8007250 <UART_SetConfig+0x2c8>
 80070c8:	2304      	movs	r3, #4
 80070ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ce:	e0bf      	b.n	8007250 <UART_SetConfig+0x2c8>
 80070d0:	2308      	movs	r3, #8
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d6:	e0bb      	b.n	8007250 <UART_SetConfig+0x2c8>
 80070d8:	2310      	movs	r3, #16
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070de:	bf00      	nop
 80070e0:	e0b6      	b.n	8007250 <UART_SetConfig+0x2c8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a73      	ldr	r2, [pc, #460]	; (80072b4 <UART_SetConfig+0x32c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d125      	bne.n	8007138 <UART_SetConfig+0x1b0>
 80070ec:	4b6f      	ldr	r3, [pc, #444]	; (80072ac <UART_SetConfig+0x324>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d011      	beq.n	800711e <UART_SetConfig+0x196>
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d802      	bhi.n	8007104 <UART_SetConfig+0x17c>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <UART_SetConfig+0x186>
 8007102:	e014      	b.n	800712e <UART_SetConfig+0x1a6>
 8007104:	2b20      	cmp	r3, #32
 8007106:	d006      	beq.n	8007116 <UART_SetConfig+0x18e>
 8007108:	2b30      	cmp	r3, #48	; 0x30
 800710a:	d00c      	beq.n	8007126 <UART_SetConfig+0x19e>
 800710c:	e00f      	b.n	800712e <UART_SetConfig+0x1a6>
 800710e:	2300      	movs	r3, #0
 8007110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007114:	e09c      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007116:	2302      	movs	r3, #2
 8007118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711c:	e098      	b.n	8007250 <UART_SetConfig+0x2c8>
 800711e:	2304      	movs	r3, #4
 8007120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007124:	e094      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007126:	2308      	movs	r3, #8
 8007128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712c:	e090      	b.n	8007250 <UART_SetConfig+0x2c8>
 800712e:	2310      	movs	r3, #16
 8007130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007134:	bf00      	nop
 8007136:	e08b      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5e      	ldr	r2, [pc, #376]	; (80072b8 <UART_SetConfig+0x330>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d125      	bne.n	800718e <UART_SetConfig+0x206>
 8007142:	4b5a      	ldr	r3, [pc, #360]	; (80072ac <UART_SetConfig+0x324>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d011      	beq.n	8007174 <UART_SetConfig+0x1ec>
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d802      	bhi.n	800715a <UART_SetConfig+0x1d2>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <UART_SetConfig+0x1dc>
 8007158:	e014      	b.n	8007184 <UART_SetConfig+0x1fc>
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d006      	beq.n	800716c <UART_SetConfig+0x1e4>
 800715e:	2bc0      	cmp	r3, #192	; 0xc0
 8007160:	d00c      	beq.n	800717c <UART_SetConfig+0x1f4>
 8007162:	e00f      	b.n	8007184 <UART_SetConfig+0x1fc>
 8007164:	2300      	movs	r3, #0
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716a:	e071      	b.n	8007250 <UART_SetConfig+0x2c8>
 800716c:	2302      	movs	r3, #2
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007172:	e06d      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717a:	e069      	b.n	8007250 <UART_SetConfig+0x2c8>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007182:	e065      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718a:	bf00      	nop
 800718c:	e060      	b.n	8007250 <UART_SetConfig+0x2c8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a4a      	ldr	r2, [pc, #296]	; (80072bc <UART_SetConfig+0x334>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d129      	bne.n	80071ec <UART_SetConfig+0x264>
 8007198:	4b44      	ldr	r3, [pc, #272]	; (80072ac <UART_SetConfig+0x324>)
 800719a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a6:	d014      	beq.n	80071d2 <UART_SetConfig+0x24a>
 80071a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ac:	d802      	bhi.n	80071b4 <UART_SetConfig+0x22c>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <UART_SetConfig+0x23a>
 80071b2:	e016      	b.n	80071e2 <UART_SetConfig+0x25a>
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d007      	beq.n	80071ca <UART_SetConfig+0x242>
 80071ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071be:	d00c      	beq.n	80071da <UART_SetConfig+0x252>
 80071c0:	e00f      	b.n	80071e2 <UART_SetConfig+0x25a>
 80071c2:	2300      	movs	r3, #0
 80071c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c8:	e042      	b.n	8007250 <UART_SetConfig+0x2c8>
 80071ca:	2302      	movs	r3, #2
 80071cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d0:	e03e      	b.n	8007250 <UART_SetConfig+0x2c8>
 80071d2:	2304      	movs	r3, #4
 80071d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d8:	e03a      	b.n	8007250 <UART_SetConfig+0x2c8>
 80071da:	2308      	movs	r3, #8
 80071dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e0:	e036      	b.n	8007250 <UART_SetConfig+0x2c8>
 80071e2:	2310      	movs	r3, #16
 80071e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e8:	bf00      	nop
 80071ea:	e031      	b.n	8007250 <UART_SetConfig+0x2c8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2c      	ldr	r2, [pc, #176]	; (80072a4 <UART_SetConfig+0x31c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d129      	bne.n	800724a <UART_SetConfig+0x2c2>
 80071f6:	4b2d      	ldr	r3, [pc, #180]	; (80072ac <UART_SetConfig+0x324>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007204:	d014      	beq.n	8007230 <UART_SetConfig+0x2a8>
 8007206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720a:	d802      	bhi.n	8007212 <UART_SetConfig+0x28a>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <UART_SetConfig+0x298>
 8007210:	e016      	b.n	8007240 <UART_SetConfig+0x2b8>
 8007212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007216:	d007      	beq.n	8007228 <UART_SetConfig+0x2a0>
 8007218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800721c:	d00c      	beq.n	8007238 <UART_SetConfig+0x2b0>
 800721e:	e00f      	b.n	8007240 <UART_SetConfig+0x2b8>
 8007220:	2300      	movs	r3, #0
 8007222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007226:	e013      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007228:	2302      	movs	r3, #2
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722e:	e00f      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007236:	e00b      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723e:	e007      	b.n	8007250 <UART_SetConfig+0x2c8>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007246:	bf00      	nop
 8007248:	e002      	b.n	8007250 <UART_SetConfig+0x2c8>
 800724a:	2310      	movs	r3, #16
 800724c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a13      	ldr	r2, [pc, #76]	; (80072a4 <UART_SetConfig+0x31c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	f040 80fe 	bne.w	8007458 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800725c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007260:	2b08      	cmp	r3, #8
 8007262:	d837      	bhi.n	80072d4 <UART_SetConfig+0x34c>
 8007264:	a201      	add	r2, pc, #4	; (adr r2, 800726c <UART_SetConfig+0x2e4>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	08007291 	.word	0x08007291
 8007270:	080072d5 	.word	0x080072d5
 8007274:	08007299 	.word	0x08007299
 8007278:	080072d5 	.word	0x080072d5
 800727c:	080072c5 	.word	0x080072c5
 8007280:	080072d5 	.word	0x080072d5
 8007284:	080072d5 	.word	0x080072d5
 8007288:	080072d5 	.word	0x080072d5
 800728c:	080072cd 	.word	0x080072cd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007290:	f7fe f826 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8007294:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007296:	e020      	b.n	80072da <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007298:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <UART_SetConfig+0x338>)
 800729a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800729c:	e01d      	b.n	80072da <UART_SetConfig+0x352>
 800729e:	bf00      	nop
 80072a0:	efff69f3 	.word	0xefff69f3
 80072a4:	40008000 	.word	0x40008000
 80072a8:	40013800 	.word	0x40013800
 80072ac:	40021000 	.word	0x40021000
 80072b0:	40004400 	.word	0x40004400
 80072b4:	40004800 	.word	0x40004800
 80072b8:	40004c00 	.word	0x40004c00
 80072bc:	40005000 	.word	0x40005000
 80072c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80072c4:	f7fd ff76 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 80072c8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80072ca:	e006      	b.n	80072da <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80072cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80072d2:	e002      	b.n	80072da <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	76fb      	strb	r3, [r7, #27]
        break;
 80072d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 81b9 	beq.w	8007654 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4413      	add	r3, r2
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d305      	bcc.n	80072fe <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d902      	bls.n	8007304 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	76fb      	strb	r3, [r7, #27]
 8007302:	e1a7      	b.n	8007654 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8007304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007308:	2b08      	cmp	r3, #8
 800730a:	f200 8092 	bhi.w	8007432 <UART_SetConfig+0x4aa>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x38c>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007339 	.word	0x08007339
 8007318:	08007433 	.word	0x08007433
 800731c:	08007387 	.word	0x08007387
 8007320:	08007433 	.word	0x08007433
 8007324:	080073bb 	.word	0x080073bb
 8007328:	08007433 	.word	0x08007433
 800732c:	08007433 	.word	0x08007433
 8007330:	08007433 	.word	0x08007433
 8007334:	08007409 	.word	0x08007409
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fd ffd2 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 800733c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	4619      	mov	r1, r3
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	f04f 0400 	mov.w	r4, #0
 800734e:	0214      	lsls	r4, r2, #8
 8007350:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007354:	020b      	lsls	r3, r1, #8
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6852      	ldr	r2, [r2, #4]
 800735a:	0852      	lsrs	r2, r2, #1
 800735c:	4611      	mov	r1, r2
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	eb13 0b01 	adds.w	fp, r3, r1
 8007366:	eb44 0c02 	adc.w	ip, r4, r2
 800736a:	4658      	mov	r0, fp
 800736c:	4661      	mov	r1, ip
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f04f 0400 	mov.w	r4, #0
 8007376:	461a      	mov	r2, r3
 8007378:	4623      	mov	r3, r4
 800737a:	f7f9 fb1b 	bl	80009b4 <__aeabi_uldivmod>
 800737e:	4603      	mov	r3, r0
 8007380:	460c      	mov	r4, r1
 8007382:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007384:	e058      	b.n	8007438 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	f04f 0400 	mov.w	r4, #0
 8007390:	49ae      	ldr	r1, [pc, #696]	; (800764c <UART_SetConfig+0x6c4>)
 8007392:	f04f 0200 	mov.w	r2, #0
 8007396:	eb13 0b01 	adds.w	fp, r3, r1
 800739a:	eb44 0c02 	adc.w	ip, r4, r2
 800739e:	4658      	mov	r0, fp
 80073a0:	4661      	mov	r1, ip
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f04f 0400 	mov.w	r4, #0
 80073aa:	461a      	mov	r2, r3
 80073ac:	4623      	mov	r3, r4
 80073ae:	f7f9 fb01 	bl	80009b4 <__aeabi_uldivmod>
 80073b2:	4603      	mov	r3, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80073b8:	e03e      	b.n	8007438 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80073ba:	f7fd fefb 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 80073be:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4619      	mov	r1, r3
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	f04f 0400 	mov.w	r4, #0
 80073d0:	0214      	lsls	r4, r2, #8
 80073d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80073d6:	020b      	lsls	r3, r1, #8
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6852      	ldr	r2, [r2, #4]
 80073dc:	0852      	lsrs	r2, r2, #1
 80073de:	4611      	mov	r1, r2
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	eb13 0b01 	adds.w	fp, r3, r1
 80073e8:	eb44 0c02 	adc.w	ip, r4, r2
 80073ec:	4658      	mov	r0, fp
 80073ee:	4661      	mov	r1, ip
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f04f 0400 	mov.w	r4, #0
 80073f8:	461a      	mov	r2, r3
 80073fa:	4623      	mov	r3, r4
 80073fc:	f7f9 fada 	bl	80009b4 <__aeabi_uldivmod>
 8007400:	4603      	mov	r3, r0
 8007402:	460c      	mov	r4, r1
 8007404:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007406:	e017      	b.n	8007438 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	f04f 0400 	mov.w	r4, #0
 8007412:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007416:	f144 0100 	adc.w	r1, r4, #0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f04f 0400 	mov.w	r4, #0
 8007422:	461a      	mov	r2, r3
 8007424:	4623      	mov	r3, r4
 8007426:	f7f9 fac5 	bl	80009b4 <__aeabi_uldivmod>
 800742a:	4603      	mov	r3, r0
 800742c:	460c      	mov	r4, r1
 800742e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007430:	e002      	b.n	8007438 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	76fb      	strb	r3, [r7, #27]
            break;
 8007436:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743e:	d308      	bcc.n	8007452 <UART_SetConfig+0x4ca>
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007446:	d204      	bcs.n	8007452 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	60da      	str	r2, [r3, #12]
 8007450:	e100      	b.n	8007654 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	76fb      	strb	r3, [r7, #27]
 8007456:	e0fd      	b.n	8007654 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007460:	f040 8084 	bne.w	800756c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8007464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007468:	2b08      	cmp	r3, #8
 800746a:	d85f      	bhi.n	800752c <UART_SetConfig+0x5a4>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <UART_SetConfig+0x4ec>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007499 	.word	0x08007499
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074d9 	.word	0x080074d9
 8007480:	0800752d 	.word	0x0800752d
 8007484:	080074f5 	.word	0x080074f5
 8007488:	0800752d 	.word	0x0800752d
 800748c:	0800752d 	.word	0x0800752d
 8007490:	0800752d 	.word	0x0800752d
 8007494:	08007515 	.word	0x08007515
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007498:	f7fd ff22 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 800749c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	005a      	lsls	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	441a      	add	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80074b6:	e03c      	b.n	8007532 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b8:	f7fd ff28 	bl	800530c <HAL_RCC_GetPCLK2Freq>
 80074bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	005a      	lsls	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	441a      	add	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80074d6:	e02c      	b.n	8007532 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	085b      	lsrs	r3, r3, #1
 80074de:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80074e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6852      	ldr	r2, [r2, #4]
 80074ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80074f2:	e01e      	b.n	8007532 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f4:	f7fd fe5e 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 80074f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	005a      	lsls	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	441a      	add	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	fbb2 f3f3 	udiv	r3, r2, r3
 800750e:	b29b      	uxth	r3, r3
 8007510:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007512:	e00e      	b.n	8007532 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800752a:	e002      	b.n	8007532 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	76fb      	strb	r3, [r7, #27]
        break;
 8007530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2b0f      	cmp	r3, #15
 8007536:	d916      	bls.n	8007566 <UART_SetConfig+0x5de>
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753e:	d212      	bcs.n	8007566 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f023 030f 	bic.w	r3, r3, #15
 8007548:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	b29b      	uxth	r3, r3
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	b29a      	uxth	r2, r3
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	4313      	orrs	r3, r2
 800755a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	89fa      	ldrh	r2, [r7, #14]
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	e076      	b.n	8007654 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	76fb      	strb	r3, [r7, #27]
 800756a:	e073      	b.n	8007654 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800756c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007570:	2b08      	cmp	r3, #8
 8007572:	d85c      	bhi.n	800762e <UART_SetConfig+0x6a6>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <UART_SetConfig+0x5f4>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075bf 	.word	0x080075bf
 8007584:	080075dd 	.word	0x080075dd
 8007588:	0800762f 	.word	0x0800762f
 800758c:	080075f9 	.word	0x080075f9
 8007590:	0800762f 	.word	0x0800762f
 8007594:	0800762f 	.word	0x0800762f
 8007598:	0800762f 	.word	0x0800762f
 800759c:	08007617 	.word	0x08007617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a0:	f7fd fe9e 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 80075a4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	085a      	lsrs	r2, r3, #1
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	441a      	add	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075bc:	e03a      	b.n	8007634 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075be:	f7fd fea5 	bl	800530c <HAL_RCC_GetPCLK2Freq>
 80075c2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	085a      	lsrs	r2, r3, #1
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	441a      	add	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075da:	e02b      	b.n	8007634 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	085b      	lsrs	r3, r3, #1
 80075e2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80075e6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6852      	ldr	r2, [r2, #4]
 80075ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075f6:	e01d      	b.n	8007634 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f8:	f7fd fddc 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 80075fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	085a      	lsrs	r2, r3, #1
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	441a      	add	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007610:	b29b      	uxth	r3, r3
 8007612:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007614:	e00e      	b.n	8007634 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	fbb2 f3f3 	udiv	r3, r2, r3
 8007628:	b29b      	uxth	r3, r3
 800762a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800762c:	e002      	b.n	8007634 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	76fb      	strb	r3, [r7, #27]
        break;
 8007632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b0f      	cmp	r3, #15
 8007638:	d90a      	bls.n	8007650 <UART_SetConfig+0x6c8>
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007640:	d206      	bcs.n	8007650 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	60da      	str	r2, [r3, #12]
 800764a:	e003      	b.n	8007654 <UART_SetConfig+0x6cc>
 800764c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007660:	7efb      	ldrb	r3, [r7, #27]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3728      	adds	r7, #40	; 0x28
 8007666:	46bd      	mov	sp, r7
 8007668:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800766c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01a      	beq.n	8007782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776a:	d10a      	bne.n	8007782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80077be:	f7fb f83b 	bl	8002838 <HAL_GetTick>
 80077c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d10e      	bne.n	80077f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f82a 	bl	800783a <UART_WaitOnFlagUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e020      	b.n	8007832 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d10e      	bne.n	800781c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f814 	bl	800783a <UART_WaitOnFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e00a      	b.n	8007832 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	603b      	str	r3, [r7, #0]
 8007846:	4613      	mov	r3, r2
 8007848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800784a:	e05d      	b.n	8007908 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d059      	beq.n	8007908 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007854:	f7fa fff0 	bl	8002838 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	429a      	cmp	r2, r3
 8007862:	d302      	bcc.n	800786a <UART_WaitOnFlagUntilTimeout+0x30>
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d11b      	bne.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007878:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0201 	bic.w	r2, r2, #1
 8007888:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e042      	b.n	8007928 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d02b      	beq.n	8007908 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078be:	d123      	bne.n	8007908 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078d8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e00f      	b.n	8007928 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	4013      	ands	r3, r2
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	429a      	cmp	r2, r3
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	429a      	cmp	r2, r3
 8007924:	d092      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <__libc_init_array>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	4e0d      	ldr	r6, [pc, #52]	; (8007968 <__libc_init_array+0x38>)
 8007934:	4c0d      	ldr	r4, [pc, #52]	; (800796c <__libc_init_array+0x3c>)
 8007936:	1ba4      	subs	r4, r4, r6
 8007938:	10a4      	asrs	r4, r4, #2
 800793a:	2500      	movs	r5, #0
 800793c:	42a5      	cmp	r5, r4
 800793e:	d109      	bne.n	8007954 <__libc_init_array+0x24>
 8007940:	4e0b      	ldr	r6, [pc, #44]	; (8007970 <__libc_init_array+0x40>)
 8007942:	4c0c      	ldr	r4, [pc, #48]	; (8007974 <__libc_init_array+0x44>)
 8007944:	f000 f820 	bl	8007988 <_init>
 8007948:	1ba4      	subs	r4, r4, r6
 800794a:	10a4      	asrs	r4, r4, #2
 800794c:	2500      	movs	r5, #0
 800794e:	42a5      	cmp	r5, r4
 8007950:	d105      	bne.n	800795e <__libc_init_array+0x2e>
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007958:	4798      	blx	r3
 800795a:	3501      	adds	r5, #1
 800795c:	e7ee      	b.n	800793c <__libc_init_array+0xc>
 800795e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007962:	4798      	blx	r3
 8007964:	3501      	adds	r5, #1
 8007966:	e7f2      	b.n	800794e <__libc_init_array+0x1e>
 8007968:	080079f0 	.word	0x080079f0
 800796c:	080079f0 	.word	0x080079f0
 8007970:	080079f0 	.word	0x080079f0
 8007974:	080079f4 	.word	0x080079f4

08007978 <memset>:
 8007978:	4402      	add	r2, r0
 800797a:	4603      	mov	r3, r0
 800797c:	4293      	cmp	r3, r2
 800797e:	d100      	bne.n	8007982 <memset+0xa>
 8007980:	4770      	bx	lr
 8007982:	f803 1b01 	strb.w	r1, [r3], #1
 8007986:	e7f9      	b.n	800797c <memset+0x4>

08007988 <_init>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr

08007994 <_fini>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr
